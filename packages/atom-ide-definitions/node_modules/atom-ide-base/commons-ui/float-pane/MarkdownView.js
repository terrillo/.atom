"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderMarkdown = exports.MarkdownView = void 0;
const React = __importStar(require("react"));
const dompurify_1 = __importDefault(require("dompurify"));
const MarkdownRenderer_1 = require("../MarkdownRenderer");
/**
 * A react component that can hosts markdown texts
 */
class MarkdownView extends React.Component {
    constructor() {
        super(...arguments);
        this.state = { markdown: "" };
    }
    render() {
        return (React.createElement("div", { className: this.props.containerClassName, onWheel: (e) => this.onMouseWheel(e) },
            React.createElement("div", { className: this.props.contentClassName, dangerouslySetInnerHTML: {
                    __html: this.state.markdown,
                } })));
    }
    /**
     * handles the mouse wheel event to enable scrolling over long text
     * @param evt the mouse wheel event being triggered
     */
    onMouseWheel(evt) {
        evt.stopPropagation();
    }
    /**
      Calls `getDocumentationHtml` to convert Markdown to markdown
    */
    async componentDidMount() {
        var _a;
        this.setState({
            markdown: (_a = (await renderMarkdown(this.props.markdown, this.props.grammarName, this.props.renderer))) !== null && _a !== void 0 ? _a : "",
        });
    }
}
exports.MarkdownView = MarkdownView;
/**
 * convert the markdown documentation to markdown
 * @param markdownTexts the documentation text in markdown format to be converted
 * @param grammarName  the default grammar used for embedded code samples
 * @param renderer markdown service to be used for rendering
 * @return a promise object to track the asynchronous operation
 */
async function renderMarkdown(markdownTexts, grammarName, renderer) {
    var _a, _b;
    if (grammarName === void 0) { grammarName = ((_b = (_a = atom.workspace.getActiveTextEditor()) === null || _a === void 0 ? void 0 : _a.getGrammar().scopeName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || ""; }
    if (markdownTexts === undefined) {
        return null;
    }
    let markdownText = "";
    // if Array
    if (Array.isArray(markdownTexts)) {
        if (markdownTexts.length === 0) {
            return null;
        }
        markdownText = markdownTexts.join("\r\n");
    }
    // if string
    else {
        markdownText = markdownTexts;
    }
    if (renderer) {
        return dompurify_1.default.sanitize(await renderer.render(markdownText, grammarName));
    }
    else {
        // Use built-in markdown renderer (it already does sanitization)
        const render = await MarkdownRenderer_1.getMarkdownRenderer();
        return render(markdownText, grammarName);
    }
}
exports.renderMarkdown = renderMarkdown;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFya2Rvd25WaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLWNvbW1vbnMtdWkvZmxvYXQtcGFuZS9NYXJrZG93blZpZXcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBOEI7QUFDOUIsMERBQWlDO0FBRWpDLDBEQUF5RDtBQWdCekQ7O0dBRUc7QUFDSCxNQUFhLFlBQWEsU0FBUSxLQUFLLENBQUMsU0FBdUI7SUFBL0Q7O1FBQ0UsVUFBSyxHQUFVLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFBO0lBK0JqQyxDQUFDO0lBN0JDLE1BQU07UUFDSixPQUFPLENBQ0wsNkJBQUssU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNqRiw2QkFDRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFDdEMsdUJBQXVCLEVBQUU7b0JBQ3ZCLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVE7aUJBQzVCLEdBQ0QsQ0FDRSxDQUNQLENBQUE7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsWUFBWSxDQUFDLEdBQXFCO1FBQ2hDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtJQUN2QixDQUFDO0lBRUQ7O01BRUU7SUFDRixLQUFLLENBQUMsaUJBQWlCOztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ1osUUFBUSxFQUFFLE1BQUEsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLG1DQUFJLEVBQUU7U0FDekcsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGO0FBaENELG9DQWdDQztBQUVEOzs7Ozs7R0FNRztBQUNJLEtBQUssVUFBVSxjQUFjLENBQ2xDLGFBQXFDLEVBQ3JDLFdBQXVHLEVBQ3ZHLFFBQTBCOztnQ0FEMUIsRUFBQSxlQUFzQixNQUFBLE1BQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSwwQ0FBRSxVQUFVLEdBQUcsU0FBUywwQ0FBRSxXQUFXLEVBQUUsS0FBSSxFQUFFO0lBR3ZHLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQTtLQUNaO0lBRUQsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFBO0lBQ3JCLFdBQVc7SUFDWCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDaEMsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM5QixPQUFPLElBQUksQ0FBQTtTQUNaO1FBQ0QsWUFBWSxHQUFJLGFBQStCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQzdEO0lBQ0QsWUFBWTtTQUNQO1FBQ0gsWUFBWSxHQUFHLGFBQWEsQ0FBQTtLQUM3QjtJQUNELElBQUksUUFBUSxFQUFFO1FBQ1osT0FBTyxtQkFBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7S0FDNUU7U0FBTTtRQUNMLGdFQUFnRTtRQUNoRSxNQUFNLE1BQU0sR0FBRyxNQUFNLHNDQUFtQixFQUFFLENBQUE7UUFDMUMsT0FBTyxNQUFNLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFBO0tBQ3pDO0FBQ0gsQ0FBQztBQTVCRCx3Q0E0QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgRE9NUHVyaWZ5IGZyb20gXCJkb21wdXJpZnlcIlxyXG5pbXBvcnQgeyBNYXJrZG93blNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vdHlwZXMtcGFja2FnZXMvbWFpblwiXHJcbmltcG9ydCB7IGdldE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwiLi4vTWFya2Rvd25SZW5kZXJlclwiXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcclxuICBtYXJrZG93bjogQXJyYXk8c3RyaW5nPiB8IHN0cmluZ1xyXG4gIGdyYW1tYXJOYW1lPzogc3RyaW5nXHJcbiAgcmVuZGVyZXI/OiBNYXJrZG93blNlcnZpY2VcclxuICBjb250YWluZXJDbGFzc05hbWU6IHN0cmluZ1xyXG4gIGNvbnRlbnRDbGFzc05hbWU6IHN0cmluZ1xyXG4gIC8vIGFscmVhZHkgcmVuZGVyZWQgbWFya2Rvd25cclxuICBodG1sPzogQXJyYXk8c3RyaW5nPiB8IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIG1hcmtkb3duOiBzdHJpbmdcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgcmVhY3QgY29tcG9uZW50IHRoYXQgY2FuIGhvc3RzIG1hcmtkb3duIHRleHRzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWFya2Rvd25WaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xyXG4gIHN0YXRlOiBTdGF0ZSA9IHsgbWFya2Rvd246IFwiXCIgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jb250YWluZXJDbGFzc05hbWV9IG9uV2hlZWw9eyhlKSA9PiB0aGlzLm9uTW91c2VXaGVlbChlKX0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNvbnRlbnRDbGFzc05hbWV9XHJcbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xyXG4gICAgICAgICAgICBfX2h0bWw6IHRoaXMuc3RhdGUubWFya2Rvd24sXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogaGFuZGxlcyB0aGUgbW91c2Ugd2hlZWwgZXZlbnQgdG8gZW5hYmxlIHNjcm9sbGluZyBvdmVyIGxvbmcgdGV4dFxyXG4gICAqIEBwYXJhbSBldnQgdGhlIG1vdXNlIHdoZWVsIGV2ZW50IGJlaW5nIHRyaWdnZXJlZFxyXG4gICAqL1xyXG4gIG9uTW91c2VXaGVlbChldnQ6IFJlYWN0LldoZWVsRXZlbnQpIHtcclxuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBDYWxscyBgZ2V0RG9jdW1lbnRhdGlvbkh0bWxgIHRvIGNvbnZlcnQgTWFya2Rvd24gdG8gbWFya2Rvd25cclxuICAqL1xyXG4gIGFzeW5jIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIG1hcmtkb3duOiAoYXdhaXQgcmVuZGVyTWFya2Rvd24odGhpcy5wcm9wcy5tYXJrZG93biwgdGhpcy5wcm9wcy5ncmFtbWFyTmFtZSwgdGhpcy5wcm9wcy5yZW5kZXJlcikpID8/IFwiXCIsXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGNvbnZlcnQgdGhlIG1hcmtkb3duIGRvY3VtZW50YXRpb24gdG8gbWFya2Rvd25cclxuICogQHBhcmFtIG1hcmtkb3duVGV4dHMgdGhlIGRvY3VtZW50YXRpb24gdGV4dCBpbiBtYXJrZG93biBmb3JtYXQgdG8gYmUgY29udmVydGVkXHJcbiAqIEBwYXJhbSBncmFtbWFyTmFtZSAgdGhlIGRlZmF1bHQgZ3JhbW1hciB1c2VkIGZvciBlbWJlZGRlZCBjb2RlIHNhbXBsZXNcclxuICogQHBhcmFtIHJlbmRlcmVyIG1hcmtkb3duIHNlcnZpY2UgdG8gYmUgdXNlZCBmb3IgcmVuZGVyaW5nXHJcbiAqIEByZXR1cm4gYSBwcm9taXNlIG9iamVjdCB0byB0cmFjayB0aGUgYXN5bmNocm9ub3VzIG9wZXJhdGlvblxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbmRlck1hcmtkb3duKFxyXG4gIG1hcmtkb3duVGV4dHM6IEFycmF5PHN0cmluZz4gfCBzdHJpbmcsXHJcbiAgZ3JhbW1hck5hbWU6IHN0cmluZyA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKT8uZ2V0R3JhbW1hcigpLnNjb3BlTmFtZT8udG9Mb3dlckNhc2UoKSB8fCBcIlwiLFxyXG4gIHJlbmRlcmVyPzogTWFya2Rvd25TZXJ2aWNlXHJcbik6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xyXG4gIGlmIChtYXJrZG93blRleHRzID09PSB1bmRlZmluZWQpIHtcclxuICAgIHJldHVybiBudWxsXHJcbiAgfVxyXG5cclxuICBsZXQgbWFya2Rvd25UZXh0ID0gXCJcIlxyXG4gIC8vIGlmIEFycmF5XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkobWFya2Rvd25UZXh0cykpIHtcclxuICAgIGlmIChtYXJrZG93blRleHRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gICAgbWFya2Rvd25UZXh0ID0gKG1hcmtkb3duVGV4dHMgYXMgQXJyYXk8c3RyaW5nPikuam9pbihcIlxcclxcblwiKVxyXG4gIH1cclxuICAvLyBpZiBzdHJpbmdcclxuICBlbHNlIHtcclxuICAgIG1hcmtkb3duVGV4dCA9IG1hcmtkb3duVGV4dHNcclxuICB9XHJcbiAgaWYgKHJlbmRlcmVyKSB7XHJcbiAgICByZXR1cm4gRE9NUHVyaWZ5LnNhbml0aXplKGF3YWl0IHJlbmRlcmVyLnJlbmRlcihtYXJrZG93blRleHQsIGdyYW1tYXJOYW1lKSlcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gVXNlIGJ1aWx0LWluIG1hcmtkb3duIHJlbmRlcmVyIChpdCBhbHJlYWR5IGRvZXMgc2FuaXRpemF0aW9uKVxyXG4gICAgY29uc3QgcmVuZGVyID0gYXdhaXQgZ2V0TWFya2Rvd25SZW5kZXJlcigpXHJcbiAgICByZXR1cm4gcmVuZGVyKG1hcmtkb3duVGV4dCwgZ3JhbW1hck5hbWUpXHJcbiAgfVxyXG59XHJcbiJdfQ==