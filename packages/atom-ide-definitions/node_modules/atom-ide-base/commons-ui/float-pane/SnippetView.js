"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnippetHtml = exports.SnippetView = void 0;
const React = __importStar(require("react"));
const dompurify_1 = __importDefault(require("dompurify"));
const MarkdownRenderer_1 = require("../MarkdownRenderer");
/**
 * A React component that hosts a code snippet with syntax highlighting
 */
class SnippetView extends React.Component {
    constructor() {
        super(...arguments);
        this.state = { snippet: "" };
    }
    render() {
        return (React.createElement("div", { className: this.props.containerClassName, onWheel: (e) => this.onMouseWheel(e) },
            React.createElement("div", { className: this.props.contentClassName, dangerouslySetInnerHTML: {
                    __html: this.state.snippet,
                } })));
    }
    /**
     * handles the mouse wheel event to enable scrolling over long text
     * @param evt the mouse wheel event being triggered
     */
    onMouseWheel(evt) {
        evt.stopPropagation();
    }
    async componentDidMount() {
        var _a;
        this.setState({
            snippet: (_a = (await getSnippetHtml(this.props.snippet, this.props.grammarName, this.props.renderer))) !== null && _a !== void 0 ? _a : "",
        });
    }
}
exports.SnippetView = SnippetView;
const regexPremeable = /^\s*<([!?])([a-z]+)?\s*/i;
const regexLSPPrefix = /^\((method|property|parameter|alias)\)\W/;
/**
 * converts a given code snippet into syntax formatted HTML
 * @param snippets the code snippet to be converted
 * @param grammarName the name of the grammar to be used for syntax highlighting
 * @param renderer markdown service to be used for rendering
 * @return a promise object to track the asynchronous operation
 */
async function getSnippetHtml(snipetsGiven, grammarName, renderer) {
    var _a, _b;
    if (grammarName === void 0) { grammarName = ((_b = (_a = atom.workspace.getActiveTextEditor()) === null || _a === void 0 ? void 0 : _a.getGrammar().scopeName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || ""; }
    if (snipetsGiven === undefined) {
        return null;
    }
    let snippets = snipetsGiven;
    // if string
    if (typeof snippets === "string") {
        snippets = [snippets];
    }
    // if Array
    if (Array.isArray(snippets)) {
        if (snippets.length === 0) {
            return null;
        }
        const markdown = snippets
            .map((snippet) => {
            const snp = snippet
                .replace(regexPremeable, "") // remove any preamble from the line
                .replace(regexLSPPrefix, ""); // remove LSP prefix
            return `\`\`\`\n${snp}\n\`\`\``;
        })
            .join("\n");
        if (renderer) {
            return dompurify_1.default.sanitize(await renderer.render(markdown, grammarName));
        }
        else {
            // Use built-in markdown renderer (it already does sanitization)
            const render = await MarkdownRenderer_1.getMarkdownRenderer();
            return render(markdown, grammarName);
        }
    }
    else {
        return null;
    }
}
exports.getSnippetHtml = getSnippetHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU25pcHBldFZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMtY29tbW9ucy11aS9mbG9hdC1wYW5lL1NuaXBwZXRWaWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkNBQThCO0FBQzlCLDBEQUFpQztBQUVqQywwREFBeUQ7QUFjekQ7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxLQUFLLENBQUMsU0FBdUI7SUFBOUQ7O1FBQ0UsVUFBSyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFBO0lBNEJ6QixDQUFDO0lBMUJDLE1BQU07UUFDSixPQUFPLENBQ0wsNkJBQUssU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNqRiw2QkFDRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFDdEMsdUJBQXVCLEVBQUU7b0JBQ3ZCLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87aUJBQzNCLEdBQ0QsQ0FDRSxDQUNQLENBQUE7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsWUFBWSxDQUFDLEdBQXFCO1FBQ2hDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLGlCQUFpQjs7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNaLE9BQU8sRUFBRSxNQUFBLENBQUMsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxtQ0FBSSxFQUFFO1NBQ3ZHLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQTdCRCxrQ0E2QkM7QUFFRCxNQUFNLGNBQWMsR0FBRywwQkFBMEIsQ0FBQTtBQUNqRCxNQUFNLGNBQWMsR0FBRywwQ0FBMEMsQ0FBQTtBQUVqRTs7Ozs7O0dBTUc7QUFDSSxLQUFLLFVBQVUsY0FBYyxDQUNsQyxZQUFvQyxFQUNwQyxXQUF1RyxFQUN2RyxRQUEwQjs7Z0NBRDFCLEVBQUEsZUFBc0IsTUFBQSxNQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsMENBQUUsVUFBVSxHQUFHLFNBQVMsMENBQUUsV0FBVyxFQUFFLEtBQUksRUFBRTtJQUd2RyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsT0FBTyxJQUFJLENBQUE7S0FDWjtJQUNELElBQUksUUFBUSxHQUFHLFlBQVksQ0FBQTtJQUUzQixZQUFZO0lBQ1osSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7UUFDaEMsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7S0FDdEI7SUFFRCxXQUFXO0lBQ1gsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzNCLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUNELE1BQU0sUUFBUSxHQUFHLFFBQVE7YUFDdEIsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDZixNQUFNLEdBQUcsR0FBRyxPQUFPO2lCQUNoQixPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLG9DQUFvQztpQkFDaEUsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQSxDQUFDLG9CQUFvQjtZQUNuRCxPQUFPLFdBQVcsR0FBRyxVQUFVLENBQUE7UUFDakMsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRWIsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLG1CQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQTtTQUN4RTthQUFNO1lBQ0wsZ0VBQWdFO1lBQ2hFLE1BQU0sTUFBTSxHQUFHLE1BQU0sc0NBQW1CLEVBQUUsQ0FBQTtZQUMxQyxPQUFPLE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUE7U0FDckM7S0FDRjtTQUFNO1FBQ0wsT0FBTyxJQUFJLENBQUE7S0FDWjtBQUNILENBQUM7QUF2Q0Qsd0NBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCJcclxuaW1wb3J0IERPTVB1cmlmeSBmcm9tIFwiZG9tcHVyaWZ5XCJcclxuaW1wb3J0IHsgTWFya2Rvd25TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3R5cGVzLXBhY2thZ2VzL21haW5cIlxyXG5pbXBvcnQgeyBnZXRNYXJrZG93blJlbmRlcmVyIH0gZnJvbSBcIi4uL01hcmtkb3duUmVuZGVyZXJcIlxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XHJcbiAgc25pcHBldDogQXJyYXk8c3RyaW5nPiB8IHN0cmluZ1xyXG4gIGdyYW1tYXJOYW1lPzogc3RyaW5nXHJcbiAgcmVuZGVyZXI/OiBNYXJrZG93blNlcnZpY2VcclxuICBjb250YWluZXJDbGFzc05hbWU6IHN0cmluZ1xyXG4gIGNvbnRlbnRDbGFzc05hbWU6IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIHNuaXBwZXQ6IHN0cmluZ1xyXG59XHJcblxyXG4vKipcclxuICogQSBSZWFjdCBjb21wb25lbnQgdGhhdCBob3N0cyBhIGNvZGUgc25pcHBldCB3aXRoIHN5bnRheCBoaWdobGlnaHRpbmdcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTbmlwcGV0VmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcclxuICBzdGF0ZSA9IHsgc25pcHBldDogXCJcIiB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNvbnRhaW5lckNsYXNzTmFtZX0gb25XaGVlbD17KGUpID0+IHRoaXMub25Nb3VzZVdoZWVsKGUpfT5cclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY29udGVudENsYXNzTmFtZX1cclxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XHJcbiAgICAgICAgICAgIF9faHRtbDogdGhpcy5zdGF0ZS5zbmlwcGV0LFxyXG4gICAgICAgICAgfX1cclxuICAgICAgICAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGhhbmRsZXMgdGhlIG1vdXNlIHdoZWVsIGV2ZW50IHRvIGVuYWJsZSBzY3JvbGxpbmcgb3ZlciBsb25nIHRleHRcclxuICAgKiBAcGFyYW0gZXZ0IHRoZSBtb3VzZSB3aGVlbCBldmVudCBiZWluZyB0cmlnZ2VyZWRcclxuICAgKi9cclxuICBvbk1vdXNlV2hlZWwoZXZ0OiBSZWFjdC5XaGVlbEV2ZW50KSB7XHJcbiAgICBldnQuc3RvcFByb3BhZ2F0aW9uKClcclxuICB9XHJcblxyXG4gIGFzeW5jIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHNuaXBwZXQ6IChhd2FpdCBnZXRTbmlwcGV0SHRtbCh0aGlzLnByb3BzLnNuaXBwZXQsIHRoaXMucHJvcHMuZ3JhbW1hck5hbWUsIHRoaXMucHJvcHMucmVuZGVyZXIpKSA/PyBcIlwiLFxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHJlZ2V4UHJlbWVhYmxlID0gL15cXHMqPChbIT9dKShbYS16XSspP1xccyovaVxyXG5jb25zdCByZWdleExTUFByZWZpeCA9IC9eXFwoKG1ldGhvZHxwcm9wZXJ0eXxwYXJhbWV0ZXJ8YWxpYXMpXFwpXFxXL1xyXG5cclxuLyoqXHJcbiAqIGNvbnZlcnRzIGEgZ2l2ZW4gY29kZSBzbmlwcGV0IGludG8gc3ludGF4IGZvcm1hdHRlZCBIVE1MXHJcbiAqIEBwYXJhbSBzbmlwcGV0cyB0aGUgY29kZSBzbmlwcGV0IHRvIGJlIGNvbnZlcnRlZFxyXG4gKiBAcGFyYW0gZ3JhbW1hck5hbWUgdGhlIG5hbWUgb2YgdGhlIGdyYW1tYXIgdG8gYmUgdXNlZCBmb3Igc3ludGF4IGhpZ2hsaWdodGluZ1xyXG4gKiBAcGFyYW0gcmVuZGVyZXIgbWFya2Rvd24gc2VydmljZSB0byBiZSB1c2VkIGZvciByZW5kZXJpbmdcclxuICogQHJldHVybiBhIHByb21pc2Ugb2JqZWN0IHRvIHRyYWNrIHRoZSBhc3luY2hyb25vdXMgb3BlcmF0aW9uXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U25pcHBldEh0bWwoXHJcbiAgc25pcGV0c0dpdmVuOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nLFxyXG4gIGdyYW1tYXJOYW1lOiBzdHJpbmcgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKCk/LmdldEdyYW1tYXIoKS5zY29wZU5hbWU/LnRvTG93ZXJDYXNlKCkgfHwgXCJcIixcclxuICByZW5kZXJlcj86IE1hcmtkb3duU2VydmljZVxyXG4pOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICBpZiAoc25pcGV0c0dpdmVuID09PSB1bmRlZmluZWQpIHtcclxuICAgIHJldHVybiBudWxsXHJcbiAgfVxyXG4gIGxldCBzbmlwcGV0cyA9IHNuaXBldHNHaXZlblxyXG5cclxuICAvLyBpZiBzdHJpbmdcclxuICBpZiAodHlwZW9mIHNuaXBwZXRzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICBzbmlwcGV0cyA9IFtzbmlwcGV0c11cclxuICB9XHJcblxyXG4gIC8vIGlmIEFycmF5XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkoc25pcHBldHMpKSB7XHJcbiAgICBpZiAoc25pcHBldHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgICBjb25zdCBtYXJrZG93biA9IHNuaXBwZXRzXHJcbiAgICAgIC5tYXAoKHNuaXBwZXQpID0+IHtcclxuICAgICAgICBjb25zdCBzbnAgPSBzbmlwcGV0XHJcbiAgICAgICAgICAucmVwbGFjZShyZWdleFByZW1lYWJsZSwgXCJcIikgLy8gcmVtb3ZlIGFueSBwcmVhbWJsZSBmcm9tIHRoZSBsaW5lXHJcbiAgICAgICAgICAucmVwbGFjZShyZWdleExTUFByZWZpeCwgXCJcIikgLy8gcmVtb3ZlIExTUCBwcmVmaXhcclxuICAgICAgICByZXR1cm4gYFxcYFxcYFxcYFxcbiR7c25wfVxcblxcYFxcYFxcYGBcclxuICAgICAgfSlcclxuICAgICAgLmpvaW4oXCJcXG5cIilcclxuXHJcbiAgICBpZiAocmVuZGVyZXIpIHtcclxuICAgICAgcmV0dXJuIERPTVB1cmlmeS5zYW5pdGl6ZShhd2FpdCByZW5kZXJlci5yZW5kZXIobWFya2Rvd24sIGdyYW1tYXJOYW1lKSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFVzZSBidWlsdC1pbiBtYXJrZG93biByZW5kZXJlciAoaXQgYWxyZWFkeSBkb2VzIHNhbml0aXphdGlvbilcclxuICAgICAgY29uc3QgcmVuZGVyID0gYXdhaXQgZ2V0TWFya2Rvd25SZW5kZXJlcigpXHJcbiAgICAgIHJldHVybiByZW5kZXIobWFya2Rvd24sIGdyYW1tYXJOYW1lKVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxufVxyXG4iXX0=