"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewContainer = exports.DATATIP_ACTIONS = void 0;
const MarkdownView_1 = require("./MarkdownView");
const SnippetView_1 = require("./SnippetView");
const ReactView_1 = require("./ReactView");
const React = __importStar(require("react"));
const react_dom_1 = __importDefault(require("react-dom"));
exports.DATATIP_ACTIONS = Object.freeze({
    PIN: "PIN",
    CLOSE: "CLOSE",
});
const IconsForAction = {
    [exports.DATATIP_ACTIONS.PIN]: "pin",
    [exports.DATATIP_ACTIONS.CLOSE]: "x",
};
/**
 * an etch component for a decoration pane
 */
class ViewContainer extends React.Component {
    constructor() {
        super(...arguments);
        this.children = [];
        this.rootElement = document.createElement("div");
    }
    /**
     * renders the data tip view component
     * @return the data tip view element
     */
    render() {
        var _a;
        this.actionButton = this.ActionClick(this.props.action, this.props.actionTitle);
        this.updateChildren();
        return (React.createElement("div", { className: (_a = this.props.className) !== null && _a !== void 0 ? _a : "datatip-element", ...this.props.onMouseDown, ...this.props.onClickCapture },
            this.children,
            this.actionButton));
    }
    get element() {
        return react_dom_1.default.render(this.render(), this.rootElement);
    }
    /**
     * internal helper function to figure out the structure of the data tip view
     * to be rendered
     */
    updateChildren() {
        if (this.props.component) {
            this.children.push(React.createElement(ReactView_1.ReactView, { ...this.props.component }));
        }
        if (this.props.snippet) {
            this.children.push(React.createElement(SnippetView_1.SnippetView, { ...this.props.snippet }));
        }
        if (this.props.markdown) {
            this.children.push(React.createElement(MarkdownView_1.MarkdownView, { ...this.props.markdown }));
        }
    }
    ActionClick(action, actionTitle) {
        let actionButton = undefined;
        if (action !== undefined && IconsForAction[action] !== undefined) {
            const actionIcon = IconsForAction[action];
            actionButton = (React.createElement("div", { className: `datatip-pin-button icon-${actionIcon}`, onClick: () => {
                    var _a, _b;
                    (_b = (_a = this.props).onActionClick) === null || _b === void 0 ? void 0 : _b.call(_a, event);
                }, title: actionTitle }));
        }
        return actionButton;
    }
    async destroy() {
        return; // this.componentWillUnmount()
    }
}
exports.ViewContainer = ViewContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlld0NvbnRhaW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy1jb21tb25zLXVpL2Zsb2F0LXBhbmUvVmlld0NvbnRhaW5lci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlEQUF5RTtBQUN6RSwrQ0FBc0U7QUFDdEUsMkNBQWdFO0FBRWhFLDZDQUE4QjtBQUM5QiwwREFBZ0M7QUFFbkIsUUFBQSxlQUFlLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMzQyxHQUFHLEVBQUUsS0FBSztJQUNWLEtBQUssRUFBRSxPQUFPO0NBQ2YsQ0FBQyxDQUFBO0FBRUYsTUFBTSxjQUFjLEdBQUc7SUFDckIsQ0FBQyx1QkFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUs7SUFDNUIsQ0FBQyx1QkFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUc7Q0FDN0IsQ0FBQTtBQWdCRDs7R0FFRztBQUNILE1BQWEsYUFBYyxTQUFRLEtBQUssQ0FBQyxTQUF1QjtJQUFoRTs7UUFFRSxhQUFRLEdBQXVCLEVBQUUsQ0FBQTtRQUNqQyxnQkFBVyxHQUFnQixRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBNkQxRCxDQUFDO0lBM0RDOzs7T0FHRztJQUNILE1BQU07O1FBQ0osSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDL0UsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ3JCLE9BQU8sQ0FDTCw2QkFDRSxTQUFTLEVBQUUsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsbUNBQUksaUJBQWlCLEtBQ2hELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxLQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWM7WUFFNUIsSUFBSSxDQUFDLFFBQVE7WUFDYixJQUFJLENBQUMsWUFBWSxDQUNkLENBQ1AsQ0FBQTtJQUNILENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLG1CQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDekQsQ0FBQztJQUVEOzs7T0FHRztJQUNILGNBQWM7UUFDWixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG9CQUFDLHFCQUFTLE9BQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUksQ0FBQyxDQUFBO1NBQzVEO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxvQkFBQyx5QkFBVyxPQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFJLENBQUMsQ0FBQTtTQUM1RDtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsb0JBQUMsMkJBQVksT0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBSSxDQUFDLENBQUE7U0FDOUQ7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQTBCLEVBQUUsV0FBK0I7UUFDckUsSUFBSSxZQUFZLEdBQUcsU0FBUyxDQUFBO1FBQzVCLElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ2hFLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN6QyxZQUFZLEdBQUcsQ0FDYiw2QkFDRSxTQUFTLEVBQUUsMkJBQTJCLFVBQVUsRUFBRSxFQUNsRCxPQUFPLEVBQUUsR0FBRyxFQUFFOztvQkFDWixNQUFBLE1BQUEsSUFBSSxDQUFDLEtBQUssRUFBQyxhQUFhLG1EQUFHLEtBQUssQ0FBQyxDQUFBO2dCQUNuQyxDQUFDLEVBQ0QsS0FBSyxFQUFFLFdBQVcsR0FDbEIsQ0FDSCxDQUFBO1NBQ0Y7UUFDRCxPQUFPLFlBQVksQ0FBQTtJQUNyQixDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU87UUFDWCxPQUFNLENBQUMsOEJBQThCO0lBQ3ZDLENBQUM7Q0FDRjtBQWhFRCxzQ0FnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXJrZG93blZpZXcsIFByb3BzIGFzIE1hcmtkb3duVmlld1Byb3BzIH0gZnJvbSBcIi4vTWFya2Rvd25WaWV3XCJcclxuaW1wb3J0IHsgU25pcHBldFZpZXcsIFByb3BzIGFzIFNuaXBwZXRWaWV3UHJvcHMgfSBmcm9tIFwiLi9TbmlwcGV0Vmlld1wiXHJcbmltcG9ydCB7IFJlYWN0VmlldywgUHJvcHMgYXMgUmVhY3RWaWV3UHJvcHMgfSBmcm9tIFwiLi9SZWFjdFZpZXdcIlxyXG5pbXBvcnQgdHlwZSB7IFJlYWN0RWxlbWVudCB9IGZyb20gXCJyZWFjdFwiXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXHJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCJcclxuXHJcbmV4cG9ydCBjb25zdCBEQVRBVElQX0FDVElPTlMgPSBPYmplY3QuZnJlZXplKHtcclxuICBQSU46IFwiUElOXCIsXHJcbiAgQ0xPU0U6IFwiQ0xPU0VcIixcclxufSlcclxuXHJcbmNvbnN0IEljb25zRm9yQWN0aW9uID0ge1xyXG4gIFtEQVRBVElQX0FDVElPTlMuUElOXTogXCJwaW5cIixcclxuICBbREFUQVRJUF9BQ1RJT05TLkNMT1NFXTogXCJ4XCIsXHJcbn1cclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgY29tcG9uZW50PzogUmVhY3RWaWV3UHJvcHNcclxuICBtYXJrZG93bj86IE1hcmtkb3duVmlld1Byb3BzXHJcbiAgc25pcHBldD86IFNuaXBwZXRWaWV3UHJvcHNcclxuICBhY3Rpb24/OiBzdHJpbmdcclxuICBhY3Rpb25UaXRsZT86IHN0cmluZ1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG4gIG9uQWN0aW9uQ2xpY2s/OiAoZXZlbnQ6IGFueSkgPT4gdm9pZFxyXG4gIG9uTW91c2VEb3duPzogKGV2ZW50OiBhbnkpID0+IHZvaWRcclxuICBvbkNsaWNrQ2FwdHVyZT86IChldmVudDogYW55KSA9PiB2b2lkXHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7fVxyXG5cclxuLyoqXHJcbiAqIGFuIGV0Y2ggY29tcG9uZW50IGZvciBhIGRlY29yYXRpb24gcGFuZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZpZXdDb250YWluZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgYWN0aW9uQnV0dG9uPzogSlNYLkVsZW1lbnRcclxuICBjaGlsZHJlbjogQXJyYXk8SlNYLkVsZW1lbnQ+ID0gW11cclxuICByb290RWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcblxyXG4gIC8qKlxyXG4gICAqIHJlbmRlcnMgdGhlIGRhdGEgdGlwIHZpZXcgY29tcG9uZW50XHJcbiAgICogQHJldHVybiB0aGUgZGF0YSB0aXAgdmlldyBlbGVtZW50XHJcbiAgICovXHJcbiAgcmVuZGVyKCk6IFJlYWN0RWxlbWVudCB7XHJcbiAgICB0aGlzLmFjdGlvbkJ1dHRvbiA9IHRoaXMuQWN0aW9uQ2xpY2sodGhpcy5wcm9wcy5hY3Rpb24sIHRoaXMucHJvcHMuYWN0aW9uVGl0bGUpXHJcbiAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKClcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lID8/IFwiZGF0YXRpcC1lbGVtZW50XCJ9XHJcbiAgICAgICAgey4uLnRoaXMucHJvcHMub25Nb3VzZURvd259XHJcbiAgICAgICAgey4uLnRoaXMucHJvcHMub25DbGlja0NhcHR1cmV9XHJcbiAgICAgID5cclxuICAgICAgICB7dGhpcy5jaGlsZHJlbn1cclxuICAgICAgICB7dGhpcy5hY3Rpb25CdXR0b259XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgZ2V0IGVsZW1lbnQoKSB7XHJcbiAgICByZXR1cm4gUmVhY3RET00ucmVuZGVyKHRoaXMucmVuZGVyKCksIHRoaXMucm9vdEVsZW1lbnQpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBpbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc3RydWN0dXJlIG9mIHRoZSBkYXRhIHRpcCB2aWV3XHJcbiAgICogdG8gYmUgcmVuZGVyZWRcclxuICAgKi9cclxuICB1cGRhdGVDaGlsZHJlbigpIHtcclxuICAgIGlmICh0aGlzLnByb3BzLmNvbXBvbmVudCkge1xyXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goPFJlYWN0VmlldyB7Li4udGhpcy5wcm9wcy5jb21wb25lbnR9IC8+KVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMucHJvcHMuc25pcHBldCkge1xyXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goPFNuaXBwZXRWaWV3IHsuLi50aGlzLnByb3BzLnNuaXBwZXR9IC8+KVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMucHJvcHMubWFya2Rvd24pIHtcclxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKDxNYXJrZG93blZpZXcgey4uLnRoaXMucHJvcHMubWFya2Rvd259IC8+KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQWN0aW9uQ2xpY2soYWN0aW9uOiBzdHJpbmcgfCB1bmRlZmluZWQsIGFjdGlvblRpdGxlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcclxuICAgIGxldCBhY3Rpb25CdXR0b24gPSB1bmRlZmluZWRcclxuICAgIGlmIChhY3Rpb24gIT09IHVuZGVmaW5lZCAmJiBJY29uc0ZvckFjdGlvblthY3Rpb25dICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgY29uc3QgYWN0aW9uSWNvbiA9IEljb25zRm9yQWN0aW9uW2FjdGlvbl1cclxuICAgICAgYWN0aW9uQnV0dG9uID0gKFxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgIGNsYXNzTmFtZT17YGRhdGF0aXAtcGluLWJ1dHRvbiBpY29uLSR7YWN0aW9uSWNvbn1gfVxyXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQWN0aW9uQ2xpY2s/LihldmVudClcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgICB0aXRsZT17YWN0aW9uVGl0bGV9XHJcbiAgICAgICAgLz5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjdGlvbkJ1dHRvblxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZGVzdHJveSgpIHtcclxuICAgIHJldHVybiAvLyB0aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50KClcclxuICB9XHJcbn1cclxuIl19