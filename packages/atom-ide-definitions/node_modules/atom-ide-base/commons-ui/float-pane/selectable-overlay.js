"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyListener = exports.makeOverLayCopyable = exports.blurEditor = exports.focusEditor = exports.overlayFocusFix = exports.makeOverlaySelectable = void 0;
/** makes the text selectable and copyable
 *
 * Note: you can directly add `user-select: text` (and `pointer-events: all`) in CSS for better performance
 */
function makeOverlaySelectable(editor, overlayElement, focusFix = true) {
    // allow the browser to handle selecting
    overlayElement.setAttribute("tabindex", "-1");
    // make it selectable
    if (!overlayElement.style.userSelect || overlayElement.style.userSelect === "none") {
        overlayElement.style.userSelect = "text";
    }
    if (focusFix) {
        // fix overlay focus issue
        overlayFocusFix(editor, overlayElement);
    }
    // add copy keybindings
    overlayElement.classList.add("native-key-bindings");
}
exports.makeOverlaySelectable = makeOverlaySelectable;
/**
 * - focus on the datatip once the text is selected (cursor gets disabled temporarily)
 * - remove focus once mouse leaves
 */
function overlayFocusFix(editor, element) {
    const editorComponent = atom.views.getView(editor).getComponent();
    element.addEventListener("mousedown", () => {
        blurEditor(editorComponent);
        element.addEventListener("mouseleave", () => {
            focusEditor(editorComponent);
        });
    });
}
exports.overlayFocusFix = overlayFocusFix;
function focusEditor(editorComponent) {
    // @ts-ignore internal api
    editorComponent === null || editorComponent === void 0 ? void 0 : editorComponent.didFocus();
}
exports.focusEditor = focusEditor;
function blurEditor(editorComponent) {
    // @ts-ignore internal api
    editorComponent === null || editorComponent === void 0 ? void 0 : editorComponent.didBlurHiddenInput({
        relatedTarget: null,
    });
}
exports.blurEditor = blurEditor;
/*
██████  ███████ ██████  ██████  ███████  ██████  █████  ████████ ███████ ██████
██   ██ ██      ██   ██ ██   ██ ██      ██      ██   ██    ██    ██      ██   ██
██   ██ █████   ██████  ██████  █████   ██      ███████    ██    █████   ██   ██
██   ██ ██      ██      ██   ██ ██      ██      ██   ██    ██    ██      ██   ██
██████  ███████ ██      ██   ██ ███████  ██████ ██   ██    ██    ███████ ██████
*/
/** @deprecated use `makeOverlaySelectable` instead.
 *
 * Makes the overlay component copyable
 * - you should call `makeOverlaySelectable` before this
 * - If your element already has mouseenter and mouseleav listeners, directly use `copyListener`
 */
function makeOverLayCopyable(element) {
    element.addEventListener("mouseenter", () => {
        element.addEventListener("keydown", copyListener);
    });
    element.addEventListener("mouseleave", () => {
        element.removeEventListener("keydown", copyListener);
    });
}
exports.makeOverLayCopyable = makeOverLayCopyable;
/** @deprecated use `makeOverlaySelectable` instead.
 *
 * A manual copy listener
 * Usage. Add the listener to your mouse enter and mouseleave listeners
   ```ts
   element.addEventListener("mouseenter", () => {element.addEventListener("keydown", copyListener)}`
   element.addEventListener("mouseleave", () => {element.removeEventListener("keydown", copyListener)}`
   ```
*/
async function copyListener(event) {
    var _a, _b;
    event.preventDefault();
    if (event.ctrlKey && event.key === "c") {
        const text = (_b = (_a = document.getSelection()) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "";
        await navigator.clipboard.writeText(text);
    }
} // TODO we should not need to manually listen for copy paste
exports.copyListener = copyListener;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0YWJsZS1vdmVybGF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLWNvbW1vbnMtdWkvZmxvYXQtcGFuZS9zZWxlY3RhYmxlLW92ZXJsYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUE7OztHQUdHO0FBQ0gsU0FBZ0IscUJBQXFCLENBQUMsTUFBa0IsRUFBRSxjQUEyQixFQUFFLFFBQVEsR0FBRyxJQUFJO0lBQ3BHLHdDQUF3QztJQUN4QyxjQUFjLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUU3QyxxQkFBcUI7SUFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLGNBQWMsQ0FBQyxLQUFLLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTtRQUNsRixjQUFjLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUE7S0FDekM7SUFFRCxJQUFJLFFBQVEsRUFBRTtRQUNaLDBCQUEwQjtRQUMxQixlQUFlLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFBO0tBQ3hDO0lBRUQsdUJBQXVCO0lBQ3ZCLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUE7QUFDckQsQ0FBQztBQWhCRCxzREFnQkM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixlQUFlLENBQUMsTUFBa0IsRUFBRSxPQUFvQjtJQUN0RSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtJQUNqRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUN6QyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUE7UUFDM0IsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7WUFDMUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBQzlCLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBUkQsMENBUUM7QUFFRCxTQUFnQixXQUFXLENBQUMsZUFBb0M7SUFDOUQsMEJBQTBCO0lBQzFCLGVBQWUsYUFBZixlQUFlLHVCQUFmLGVBQWUsQ0FBRSxRQUFRLEVBQUUsQ0FBQTtBQUM3QixDQUFDO0FBSEQsa0NBR0M7QUFFRCxTQUFnQixVQUFVLENBQUMsZUFBb0M7SUFDN0QsMEJBQTBCO0lBQzFCLGVBQWUsYUFBZixlQUFlLHVCQUFmLGVBQWUsQ0FBRSxrQkFBa0IsQ0FBQztRQUNsQyxhQUFhLEVBQUUsSUFBSTtLQUNwQixDQUFDLENBQUE7QUFDSixDQUFDO0FBTEQsZ0NBS0M7QUFFRDs7Ozs7O0VBTUU7QUFFRjs7Ozs7R0FLRztBQUNILFNBQWdCLG1CQUFtQixDQUFDLE9BQW9CO0lBQ3RELE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQzFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDbkQsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUMxQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQ3RELENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQVJELGtEQVFDO0FBRUQ7Ozs7Ozs7O0VBUUU7QUFDSyxLQUFLLFVBQVUsWUFBWSxDQUFDLEtBQW9COztJQUNyRCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUE7SUFDdEIsSUFBSSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFO1FBQ3RDLE1BQU0sSUFBSSxHQUFHLE1BQUEsTUFBQSxRQUFRLENBQUMsWUFBWSxFQUFFLDBDQUFFLFFBQVEsRUFBRSxtQ0FBSSxFQUFFLENBQUE7UUFDdEQsTUFBTSxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUMxQztBQUNILENBQUMsQ0FBQyw0REFBNEQ7QUFOOUQsb0NBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFRleHRFZGl0b3IsIFRleHRFZGl0b3JDb21wb25lbnQgfSBmcm9tIFwiYXRvbVwiXHJcblxyXG4vKiogbWFrZXMgdGhlIHRleHQgc2VsZWN0YWJsZSBhbmQgY29weWFibGVcclxuICpcclxuICogTm90ZTogeW91IGNhbiBkaXJlY3RseSBhZGQgYHVzZXItc2VsZWN0OiB0ZXh0YCAoYW5kIGBwb2ludGVyLWV2ZW50czogYWxsYCkgaW4gQ1NTIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlT3ZlcmxheVNlbGVjdGFibGUoZWRpdG9yOiBUZXh0RWRpdG9yLCBvdmVybGF5RWxlbWVudDogSFRNTEVsZW1lbnQsIGZvY3VzRml4ID0gdHJ1ZSkge1xyXG4gIC8vIGFsbG93IHRoZSBicm93c2VyIHRvIGhhbmRsZSBzZWxlY3RpbmdcclxuICBvdmVybGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIi0xXCIpXHJcblxyXG4gIC8vIG1ha2UgaXQgc2VsZWN0YWJsZVxyXG4gIGlmICghb3ZlcmxheUVsZW1lbnQuc3R5bGUudXNlclNlbGVjdCB8fCBvdmVybGF5RWxlbWVudC5zdHlsZS51c2VyU2VsZWN0ID09PSBcIm5vbmVcIikge1xyXG4gICAgb3ZlcmxheUVsZW1lbnQuc3R5bGUudXNlclNlbGVjdCA9IFwidGV4dFwiXHJcbiAgfVxyXG5cclxuICBpZiAoZm9jdXNGaXgpIHtcclxuICAgIC8vIGZpeCBvdmVybGF5IGZvY3VzIGlzc3VlXHJcbiAgICBvdmVybGF5Rm9jdXNGaXgoZWRpdG9yLCBvdmVybGF5RWxlbWVudClcclxuICB9XHJcblxyXG4gIC8vIGFkZCBjb3B5IGtleWJpbmRpbmdzXHJcbiAgb3ZlcmxheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5hdGl2ZS1rZXktYmluZGluZ3NcIilcclxufVxyXG5cclxuLyoqXHJcbiAqIC0gZm9jdXMgb24gdGhlIGRhdGF0aXAgb25jZSB0aGUgdGV4dCBpcyBzZWxlY3RlZCAoY3Vyc29yIGdldHMgZGlzYWJsZWQgdGVtcG9yYXJpbHkpXHJcbiAqIC0gcmVtb3ZlIGZvY3VzIG9uY2UgbW91c2UgbGVhdmVzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gb3ZlcmxheUZvY3VzRml4KGVkaXRvcjogVGV4dEVkaXRvciwgZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcclxuICBjb25zdCBlZGl0b3JDb21wb25lbnQgPSBhdG9tLnZpZXdzLmdldFZpZXcoZWRpdG9yKS5nZXRDb21wb25lbnQoKVxyXG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoKSA9PiB7XHJcbiAgICBibHVyRWRpdG9yKGVkaXRvckNvbXBvbmVudClcclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgKCkgPT4ge1xyXG4gICAgICBmb2N1c0VkaXRvcihlZGl0b3JDb21wb25lbnQpXHJcbiAgICB9KVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmb2N1c0VkaXRvcihlZGl0b3JDb21wb25lbnQ6IFRleHRFZGl0b3JDb21wb25lbnQpIHtcclxuICAvLyBAdHMtaWdub3JlIGludGVybmFsIGFwaVxyXG4gIGVkaXRvckNvbXBvbmVudD8uZGlkRm9jdXMoKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmx1ckVkaXRvcihlZGl0b3JDb21wb25lbnQ6IFRleHRFZGl0b3JDb21wb25lbnQpIHtcclxuICAvLyBAdHMtaWdub3JlIGludGVybmFsIGFwaVxyXG4gIGVkaXRvckNvbXBvbmVudD8uZGlkQmx1ckhpZGRlbklucHV0KHtcclxuICAgIHJlbGF0ZWRUYXJnZXQ6IG51bGwsXHJcbiAgfSlcclxufVxyXG5cclxuLypcclxu4paI4paI4paI4paI4paI4paIICDilojilojilojilojilojilojilogg4paI4paI4paI4paI4paI4paIICDilojilojilojilojilojiloggIOKWiOKWiOKWiOKWiOKWiOKWiOKWiCAg4paI4paI4paI4paI4paI4paIICDilojilojilojilojiloggIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiCDilojilojilojilojilojilojilogg4paI4paI4paI4paI4paI4paIXHJcbuKWiOKWiCAgIOKWiOKWiCDilojiloggICAgICDilojiloggICDilojilogg4paI4paIICAg4paI4paIIOKWiOKWiCAgICAgIOKWiOKWiCAgICAgIOKWiOKWiCAgIOKWiOKWiCAgICDilojiloggICAg4paI4paIICAgICAg4paI4paIICAg4paI4paIXHJcbuKWiOKWiCAgIOKWiOKWiCDilojilojilojilojiloggICDilojilojilojilojilojiloggIOKWiOKWiOKWiOKWiOKWiOKWiCAg4paI4paI4paI4paI4paIICAg4paI4paIICAgICAg4paI4paI4paI4paI4paI4paI4paIICAgIOKWiOKWiCAgICDilojilojilojilojiloggICDilojiloggICDilojilohcclxu4paI4paIICAg4paI4paIIOKWiOKWiCAgICAgIOKWiOKWiCAgICAgIOKWiOKWiCAgIOKWiOKWiCDilojiloggICAgICDilojiloggICAgICDilojiloggICDilojiloggICAg4paI4paIICAgIOKWiOKWiCAgICAgIOKWiOKWiCAgIOKWiOKWiFxyXG7ilojilojilojilojilojiloggIOKWiOKWiOKWiOKWiOKWiOKWiOKWiCDilojiloggICAgICDilojiloggICDilojilogg4paI4paI4paI4paI4paI4paI4paIICDilojilojilojilojilojilogg4paI4paIICAg4paI4paIICAgIOKWiOKWiCAgICDilojilojilojilojilojilojilogg4paI4paI4paI4paI4paI4paIXHJcbiovXHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgdXNlIGBtYWtlT3ZlcmxheVNlbGVjdGFibGVgIGluc3RlYWQuXHJcbiAqXHJcbiAqIE1ha2VzIHRoZSBvdmVybGF5IGNvbXBvbmVudCBjb3B5YWJsZVxyXG4gKiAtIHlvdSBzaG91bGQgY2FsbCBgbWFrZU92ZXJsYXlTZWxlY3RhYmxlYCBiZWZvcmUgdGhpc1xyXG4gKiAtIElmIHlvdXIgZWxlbWVudCBhbHJlYWR5IGhhcyBtb3VzZWVudGVyIGFuZCBtb3VzZWxlYXYgbGlzdGVuZXJzLCBkaXJlY3RseSB1c2UgYGNvcHlMaXN0ZW5lcmBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlT3ZlckxheUNvcHlhYmxlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCAoKSA9PiB7XHJcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGNvcHlMaXN0ZW5lcilcclxuICB9KVxyXG5cclxuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsICgpID0+IHtcclxuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgY29weUxpc3RlbmVyKVxyXG4gIH0pXHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCB1c2UgYG1ha2VPdmVybGF5U2VsZWN0YWJsZWAgaW5zdGVhZC5cclxuICpcclxuICogQSBtYW51YWwgY29weSBsaXN0ZW5lclxyXG4gKiBVc2FnZS4gQWRkIHRoZSBsaXN0ZW5lciB0byB5b3VyIG1vdXNlIGVudGVyIGFuZCBtb3VzZWxlYXZlIGxpc3RlbmVyc1xyXG4gICBgYGB0c1xyXG4gICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsICgpID0+IHtlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGNvcHlMaXN0ZW5lcil9YFxyXG4gICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsICgpID0+IHtlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGNvcHlMaXN0ZW5lcil9YFxyXG4gICBgYGBcclxuKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvcHlMaXN0ZW5lcihldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICBpZiAoZXZlbnQuY3RybEtleSAmJiBldmVudC5rZXkgPT09IFwiY1wiKSB7XHJcbiAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk/LnRvU3RyaW5nKCkgPz8gXCJcIlxyXG4gICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dClcclxuICB9XHJcbn0gLy8gVE9ETyB3ZSBzaG91bGQgbm90IG5lZWQgdG8gbWFudWFsbHkgbGlzdGVuIGZvciBjb3B5IHBhc3RlXHJcbiJdfQ==