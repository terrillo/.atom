"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getItemElement = exports.isElementVisible = exports.isItemVisible = void 0;
/** A function to detect if an item (view) is visible in Atom.
 * This is useful to skip code excecution or updating when the item is not visible.
 * @param item this is an item that is stored in {ViewRegistry}. It has the same type of the argument that you pass to `atom.view.getView(item)`.
 */
function isItemVisible(item) {
    if (item === undefined || item === null) {
        return false;
    }
    // check the HTMLElement itself (important for when the dock/container is visible but the tab is not selected)
    // try getting the element
    const element = getItemElement(item);
    if (element !== undefined && !isElementVisible(element)) {
        return false;
        // if it we can't detect the invisiblity using HTML we need to consider Atom's context so we continue
    }
    // etch component
    // if (item?.component?.visible === false) {
    //   return false
    // }
    const paneContainer = atom.workspace.paneContainerForItem(item);
    // if no container it is not visible
    if (paneContainer === undefined) {
        return false;
    }
    else if (typeof paneContainer.isVisible === "function") {
        // use Dock.isVisible()
        return paneContainer.isVisible();
    }
    else {
        // it is visible (when paneContainer is not a dock like TextEditor)
        return true;
    }
}
exports.isItemVisible = isItemVisible;
/** A function to detect if an HTMLElement is visible. It doesn't consider the Atom context.
 * To detect if an item is visible in Atom use {isItemVisible} instead
 * This is useful to skip code excecution or updating when the element is not visible.
 * @param element
 */
function isElementVisible(element) {
    if (element instanceof HTMLElement &&
        (element.style.display === "none" || element.hidden || element.offsetHeight === 0)) {
        return false;
    }
    return true;
}
exports.isElementVisible = isElementVisible;
/**
 * Get the HTMLElement of an item using `.getElement()` or `.element`
 */
function getItemElement(item) {
    if (item === undefined || item === null) {
        return undefined;
    }
    return typeof item.getElement === "function"
        ? item.getElement()
        : item.element;
}
exports.getItemElement = getItemElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMtY29tbW9ucy11aS9pdGVtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQTs7O0dBR0c7QUFDSCxTQUFnQixhQUFhLENBQUMsSUFBK0Q7SUFDM0YsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7UUFDdkMsT0FBTyxLQUFLLENBQUE7S0FDYjtJQUNELDhHQUE4RztJQUM5RywwQkFBMEI7SUFDMUIsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3BDLElBQUksT0FBTyxLQUFLLFNBQVMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3ZELE9BQU8sS0FBSyxDQUFBO1FBQ1oscUdBQXFHO0tBQ3RHO0lBQ0QsaUJBQWlCO0lBQ2pCLDRDQUE0QztJQUM1QyxpQkFBaUI7SUFDakIsSUFBSTtJQUNKLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDL0Qsb0NBQW9DO0lBQ3BDLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtRQUMvQixPQUFPLEtBQUssQ0FBQTtLQUNiO1NBQU0sSUFBSSxPQUFRLGFBQXFCLENBQUMsU0FBUyxLQUFLLFVBQVUsRUFBRTtRQUNqRSx1QkFBdUI7UUFDdkIsT0FBUSxhQUFzQixDQUFDLFNBQVMsRUFBRSxDQUFBO0tBQzNDO1NBQU07UUFDTCxtRUFBbUU7UUFDbkUsT0FBTyxJQUFJLENBQUE7S0FDWjtBQUNILENBQUM7QUExQkQsc0NBMEJDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLGdCQUFnQixDQUFDLE9BQW9CO0lBQ25ELElBQ0UsT0FBTyxZQUFZLFdBQVc7UUFDOUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQyxFQUNsRjtRQUNBLE9BQU8sS0FBSyxDQUFBO0tBQ2I7SUFDRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFSRCw0Q0FRQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsY0FBYyxDQUFDLElBQStCO0lBQzVELElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1FBQ3ZDLE9BQU8sU0FBUyxDQUFBO0tBQ2pCO0lBQ0QsT0FBTyxPQUFRLElBQVksQ0FBQyxVQUFVLEtBQUssVUFBVTtRQUNuRCxDQUFDLENBQUUsSUFBMEMsQ0FBQyxVQUFVLEVBQUU7UUFDMUQsQ0FBQyxDQUFFLElBQTZDLENBQUMsT0FBTyxDQUFBO0FBQzVELENBQUM7QUFQRCx3Q0FPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRG9jaywgVmlld1JlZ2lzdHJ5IH0gZnJvbSBcImF0b21cIlxuXG4vKiogQSBmdW5jdGlvbiB0byBkZXRlY3QgaWYgYW4gaXRlbSAodmlldykgaXMgdmlzaWJsZSBpbiBBdG9tLlxuICogVGhpcyBpcyB1c2VmdWwgdG8gc2tpcCBjb2RlIGV4Y2VjdXRpb24gb3IgdXBkYXRpbmcgd2hlbiB0aGUgaXRlbSBpcyBub3QgdmlzaWJsZS5cbiAqIEBwYXJhbSBpdGVtIHRoaXMgaXMgYW4gaXRlbSB0aGF0IGlzIHN0b3JlZCBpbiB7Vmlld1JlZ2lzdHJ5fS4gSXQgaGFzIHRoZSBzYW1lIHR5cGUgb2YgdGhlIGFyZ3VtZW50IHRoYXQgeW91IHBhc3MgdG8gYGF0b20udmlldy5nZXRWaWV3KGl0ZW0pYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlbVZpc2libGUoaXRlbTogUGFyYW1ldGVyczxWaWV3UmVnaXN0cnlbXCJnZXRWaWV3XCJdPlswXSB8IHVuZGVmaW5lZCB8IG51bGwpIHtcbiAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCB8fCBpdGVtID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgLy8gY2hlY2sgdGhlIEhUTUxFbGVtZW50IGl0c2VsZiAoaW1wb3J0YW50IGZvciB3aGVuIHRoZSBkb2NrL2NvbnRhaW5lciBpcyB2aXNpYmxlIGJ1dCB0aGUgdGFiIGlzIG5vdCBzZWxlY3RlZClcbiAgLy8gdHJ5IGdldHRpbmcgdGhlIGVsZW1lbnRcbiAgY29uc3QgZWxlbWVudCA9IGdldEl0ZW1FbGVtZW50KGl0ZW0pXG4gIGlmIChlbGVtZW50ICE9PSB1bmRlZmluZWQgJiYgIWlzRWxlbWVudFZpc2libGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgICAvLyBpZiBpdCB3ZSBjYW4ndCBkZXRlY3QgdGhlIGludmlzaWJsaXR5IHVzaW5nIEhUTUwgd2UgbmVlZCB0byBjb25zaWRlciBBdG9tJ3MgY29udGV4dCBzbyB3ZSBjb250aW51ZVxuICB9XG4gIC8vIGV0Y2ggY29tcG9uZW50XG4gIC8vIGlmIChpdGVtPy5jb21wb25lbnQ/LnZpc2libGUgPT09IGZhbHNlKSB7XG4gIC8vICAgcmV0dXJuIGZhbHNlXG4gIC8vIH1cbiAgY29uc3QgcGFuZUNvbnRhaW5lciA9IGF0b20ud29ya3NwYWNlLnBhbmVDb250YWluZXJGb3JJdGVtKGl0ZW0pXG4gIC8vIGlmIG5vIGNvbnRhaW5lciBpdCBpcyBub3QgdmlzaWJsZVxuICBpZiAocGFuZUNvbnRhaW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAodHlwZW9mIChwYW5lQ29udGFpbmVyIGFzIGFueSkuaXNWaXNpYmxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyB1c2UgRG9jay5pc1Zpc2libGUoKVxuICAgIHJldHVybiAocGFuZUNvbnRhaW5lciBhcyBEb2NrKS5pc1Zpc2libGUoKVxuICB9IGVsc2Uge1xuICAgIC8vIGl0IGlzIHZpc2libGUgKHdoZW4gcGFuZUNvbnRhaW5lciBpcyBub3QgYSBkb2NrIGxpa2UgVGV4dEVkaXRvcilcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbi8qKiBBIGZ1bmN0aW9uIHRvIGRldGVjdCBpZiBhbiBIVE1MRWxlbWVudCBpcyB2aXNpYmxlLiBJdCBkb2Vzbid0IGNvbnNpZGVyIHRoZSBBdG9tIGNvbnRleHQuXG4gKiBUbyBkZXRlY3QgaWYgYW4gaXRlbSBpcyB2aXNpYmxlIGluIEF0b20gdXNlIHtpc0l0ZW1WaXNpYmxlfSBpbnN0ZWFkXG4gKiBUaGlzIGlzIHVzZWZ1bCB0byBza2lwIGNvZGUgZXhjZWN1dGlvbiBvciB1cGRhdGluZyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCB2aXNpYmxlLlxuICogQHBhcmFtIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudFZpc2libGUoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgaWYgKFxuICAgIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJlxuICAgIChlbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW1lbnQuaGlkZGVuIHx8IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ID09PSAwKVxuICApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgSFRNTEVsZW1lbnQgb2YgYW4gaXRlbSB1c2luZyBgLmdldEVsZW1lbnQoKWAgb3IgYC5lbGVtZW50YFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SXRlbUVsZW1lbnQoaXRlbTogb2JqZWN0IHwgdW5kZWZpbmVkIHwgbnVsbCkge1xuICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkIHx8IGl0ZW0gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgcmV0dXJuIHR5cGVvZiAoaXRlbSBhcyBhbnkpLmdldEVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIlxuICAgID8gKGl0ZW0gYXMgeyBnZXRFbGVtZW50OiAoKSA9PiBIVE1MRWxlbWVudCB9KS5nZXRFbGVtZW50KClcbiAgICA6IChpdGVtIGFzIHsgZWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQgfSkuZWxlbWVudFxufVxuIl19