"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observeAndroidDevices = observeAndroidDevices;
exports.adbDeviceForIdentifier = adbDeviceForIdentifier;

var _log4js = require("log4js");

var _collection = require("@atom-ide-community/nuclide-commons/collection");

var _SimpleCache = require("@atom-ide-community/nuclide-commons/SimpleCache");

var _shallowequal = _interopRequireDefault(require("shallowequal"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _expected = require("@atom-ide-community/nuclide-commons/expected");

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

var _analytics = require("@atom-ide-community/nuclide-commons/analytics");

var _utils = require("./utils");

var _passesGK = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/passesGK"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function observeAndroidDevices(host) {
  const serviceUri = _nuclideUri.default.isRemote(host) ? _nuclideUri.default.createRemoteUri(_nuclideUri.default.getHostname(host), '/') : '';
  return pollersForUris.getOrCreate(serviceUri, () => {
    return _rxjsCompatUmdMin.Observable.defer(() => (0, _passesGK.default)('nuclide_device_panel_use_adb_track_devices')).concatMap(useTrackDevices => useTrackDevices ? observeDevicesViaTrackDevices(serviceUri) : observeDevicesViaPolling(serviceUri)).distinctUntilChanged((a, b) => (0, _expected.expectedEqual)(a, b, (v1, v2) => (0, _collection.arrayEqual)(v1, v2, _shallowequal.default), (e1, e2) => e1.message === e2.message)).do(async value => {
      if (value.isError) {
        const {
          error
        } = value;
        const logger = (0, _log4js.getLogger)('@atom-ide-community/nuclide-adb');
        let extras = {
          error
        };

        try {
          if ( // $FlowIgnore
          error.originalError != null && // $FlowIgnore
          error.originalError.code === 'ENOENT') {
            const infoService = await getInfoServiceByNuclideUri(serviceUri);

            if (infoService != null) {
              const rpcEnv = infoService.getServerEnvironment();
              extras = { ...extras,
                pathEnv: rpcEnv.PATH
              };
            }
          }
        } finally {
          logger.warn(value.error.message);
          (0, _analytics.track)('@atom-ide-community/nuclide-adb:device-poller:error', extras);
        }
      }
    }).publishReplay(1).refCount();
  });
}

function convertErrorToValue(error) {
  let message; // $FlowFixMe error.code

  if (error.code === 'ENOENT') {
    message = "'adb' not found in $PATH.";
  } else if ( // RPC call timed out
  error.name === 'RpcTimeoutError' || // RPC call succeeded, but the adb call itself timed out
  error.message === 'Timeout has occurred') {
    message = 'Request timed out, retrying...';
  } else if (error.message === 'Connection Closed') {
    return _rxjsCompatUmdMin.Observable.of(_expected.Expect.pending());
  } else {
    message = error.message;
  }

  const newError = new Error("Can't fetch Android devices. " + message); // $FlowIgnore

  newError.originalError = error;
  return _rxjsCompatUmdMin.Observable.of(_expected.Expect.error(newError));
}

function observeDevicesViaPolling(serviceUri) {
  return _rxjsCompatUmdMin.Observable.interval(2000).startWith(0).exhaustMap(() => {
    const service = (0, _utils.getAdbServiceByNuclideUri)(serviceUri);

    if (service == null) {
      // Gracefully handle a lost remote connection
      return _rxjsCompatUmdMin.Observable.of(_expected.Expect.pending());
    }

    return _rxjsCompatUmdMin.Observable.fromPromise(service.getDeviceList()).map(devices => _expected.Expect.value(devices)).catch(error => convertErrorToValue(error));
  });
}

function observeDevicesViaTrackDevices(serviceUri) {
  return _rxjsCompatUmdMin.Observable.defer(() => {
    const service = (0, _utils.getAdbServiceByNuclideUri)(serviceUri);

    if (service == null) {
      // Gracefully handle a lost remote connection
      return _rxjsCompatUmdMin.Observable.of(_expected.Expect.pending());
    }

    return service.trackDevices().refCount().map(devices => _expected.Expect.value(devices)).catch(error => convertErrorToValue(error));
  }) // If the process ever exits, retry after 5s
  // $FlowFixMe repeatWhen
  .repeatWhen(notifications => notifications.delay(5000)) // Also, never complete this observable, so we don't switch to a new observable
  // if the process exits, which would invalidate later caching (distinctUntilChanged/publishReplay)
  .merge(_rxjsCompatUmdMin.Observable.never());
}

function getInfoServiceByNuclideUri(uri) {
  let rpcService = null; // Atom's service hub is synchronous.

  atom.packages.serviceHub.consume('nuclide-rpc-services', '0.0.0', provider => {
    rpcService = provider;
  }).dispose();

  if (rpcService == null) {
    return null;
  }

  return rpcService.getServiceByNuclideUri('InfoService', uri);
} // This is a convenient way for any device panel plugins of type Android to get from Device to
// to the strongly typed AdbDevice.


async function adbDeviceForIdentifier(host, identifier) {
  const devices = await observeAndroidDevices(host).take(1).toPromise();
  return devices.getOrDefault([]).find(d => d.serial === identifier);
}

const pollersForUris = new _SimpleCache.SimpleCache();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,