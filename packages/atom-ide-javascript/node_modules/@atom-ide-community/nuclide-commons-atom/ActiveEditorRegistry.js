"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _debounced = require("./debounced");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _event = require("@atom-ide-community/nuclide-commons/event");

var _observable = require("@atom-ide-community/nuclide-commons/observable");

var _log4js = require("log4js");

var _paneItem = require("./pane-item");

var _ProviderRegistry = _interopRequireDefault(require("./ProviderRegistry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * ActiveEditorRegistry provides abstractions for creating services that operate
 * on text editor contents.
 */
class ActiveEditorRegistry {
  constructor(resultFunction, eventSources = {}) {
    this._resultFunction = void 0;
    this._providerRegistry = void 0;
    this._newProviderEvents = void 0;
    this._resultsStream = void 0;
    this._resultFunction = resultFunction;
    this._providerRegistry = new _ProviderRegistry.default();
    this._newProviderEvents = new _rxjsCompatUmdMin.Subject();
    this._resultsStream = this._createResultsStream({
      activeEditors: eventSources.activeEditors || (0, _debounced.observeActiveEditorsDebounced)(),
      savesForEditor: eventSources.savesForEditor || (editor => {
        return (0, _event.observableFromSubscribeFunction)(callback => editor.onDidSave(callback)).mapTo(undefined);
      })
    });
  }

  consumeProvider(provider) {
    this._providerRegistry.addProvider(provider);

    this._newProviderEvents.next();

    return new _UniversalDisposable.default(() => {
      this._providerRegistry.removeProvider(provider);
    });
  }

  getResultsStream() {
    return this._resultsStream;
  }

  _createResultsStream(eventSources) {
    const repeatedEditors = eventSources.activeEditors.switchMap(editor => {
      if (editor == null) {
        return _rxjsCompatUmdMin.Observable.of(editor);
      }

      return _rxjsCompatUmdMin.Observable.concat(_rxjsCompatUmdMin.Observable.of(editor), this._newProviderEvents.mapTo(editor));
    });
    const results = repeatedEditors.switchMap(editorArg => {
      // Necessary so the type refinement holds in the callback later
      const editor = editorArg;

      if (editor == null) {
        return _rxjsCompatUmdMin.Observable.of({
          kind: 'not-text-editor'
        });
      }

      return _rxjsCompatUmdMin.Observable.concat( // Emit a pane change event first, so that clients can do something while waiting for a
      // provider to give a result.
      _rxjsCompatUmdMin.Observable.of({
        kind: 'pane-change',
        editor
      }), // wait for pending panes to no longer be pending, or if they're not,
      // get the result right away.
      ((0, _paneItem.isPending)(editor) ? (0, _paneItem.observePendingStateEnd)(editor).take(1) : _rxjsCompatUmdMin.Observable.of(null)).ignoreElements(), _rxjsCompatUmdMin.Observable.fromPromise(this._getResultForEditor(this._getProvidersForEditor(editor), editor)), this._resultsForEditor(editor, eventSources));
    });
    return (0, _observable.cacheWhileSubscribed)(results);
  }

  _resultsForEditor(editor, eventSources) {
    // It's possible that the active provider for an editor changes over time.
    // Thus, we have to subscribe to both edits and saves.
    return _rxjsCompatUmdMin.Observable.merge(eventSources.savesForEditor(editor).map(() => 'save')).flatMap(event => {
      const providers = this._getProvidersForEditor(editor);

      return _rxjsCompatUmdMin.Observable.concat( // $FlowIssue: {kind: save}
      _rxjsCompatUmdMin.Observable.of({
        kind: event,
        editor
      }), _rxjsCompatUmdMin.Observable.fromPromise(this._getResultForEditor(providers, editor)));
    });
  }

  _getProvidersForEditor(editor) {
    return [...this._providerRegistry.getAllProvidersForEditor(editor)];
  }

  async _getResultForEditor(providers, editor) {
    if (providers.length === 0) {
      return {
        kind: 'no-provider',
        grammar: editor.getGrammar()
      };
    }

    let errorResult;
    const results = await Promise.all(providers.map(async provider => {
      try {
        return await this._resultFunction(provider, editor);
      } catch (error) {
        (0, _log4js.getLogger)(this.constructor.name).error(`Error from provider for ${editor.getGrammar().scopeName}`, error);
        errorResult = {
          provider,
          kind: 'provider-error'
        };
      }
    }));

    if (errorResult != null) {
      return errorResult;
    }

    const resultIndex = results.findIndex(r => r != null);
    return {
      kind: 'result',
      result: results[resultIndex],
      provider: providers[resultIndex] || providers[0],
      editor
    };
  }

}

exports.default = ActiveEditorRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vQWN0aXZlRWRpdG9yUmVnaXN0cnkuanMiXSwibmFtZXMiOlsiQWN0aXZlRWRpdG9yUmVnaXN0cnkiLCJjb25zdHJ1Y3RvciIsInJlc3VsdEZ1bmN0aW9uIiwiZXZlbnRTb3VyY2VzIiwiX3Jlc3VsdEZ1bmN0aW9uIiwiX3Byb3ZpZGVyUmVnaXN0cnkiLCJfbmV3UHJvdmlkZXJFdmVudHMiLCJfcmVzdWx0c1N0cmVhbSIsIlByb3ZpZGVyUmVnaXN0cnkiLCJTdWJqZWN0IiwiX2NyZWF0ZVJlc3VsdHNTdHJlYW0iLCJhY3RpdmVFZGl0b3JzIiwic2F2ZXNGb3JFZGl0b3IiLCJlZGl0b3IiLCJjYWxsYmFjayIsIm9uRGlkU2F2ZSIsIm1hcFRvIiwidW5kZWZpbmVkIiwiY29uc3VtZVByb3ZpZGVyIiwicHJvdmlkZXIiLCJhZGRQcm92aWRlciIsIm5leHQiLCJVbml2ZXJzYWxEaXNwb3NhYmxlIiwicmVtb3ZlUHJvdmlkZXIiLCJnZXRSZXN1bHRzU3RyZWFtIiwicmVwZWF0ZWRFZGl0b3JzIiwic3dpdGNoTWFwIiwiT2JzZXJ2YWJsZSIsIm9mIiwiY29uY2F0IiwicmVzdWx0cyIsImVkaXRvckFyZyIsImtpbmQiLCJ0YWtlIiwiaWdub3JlRWxlbWVudHMiLCJmcm9tUHJvbWlzZSIsIl9nZXRSZXN1bHRGb3JFZGl0b3IiLCJfZ2V0UHJvdmlkZXJzRm9yRWRpdG9yIiwiX3Jlc3VsdHNGb3JFZGl0b3IiLCJtZXJnZSIsIm1hcCIsImZsYXRNYXAiLCJldmVudCIsInByb3ZpZGVycyIsImdldEFsbFByb3ZpZGVyc0ZvckVkaXRvciIsImxlbmd0aCIsImdyYW1tYXIiLCJnZXRHcmFtbWFyIiwiZXJyb3JSZXN1bHQiLCJQcm9taXNlIiwiYWxsIiwiZXJyb3IiLCJuYW1lIiwic2NvcGVOYW1lIiwicmVzdWx0SW5kZXgiLCJmaW5kSW5kZXgiLCJyIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBaUJB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QU8sTUFBTSxLQUFLZixlQUFMLENBQXFCZSxRQUFyQixFQUErQk4sTUFBL0IsQ0FBYjtBQUNELE9BRkQsQ0FFRSxPQUFPc0MsS0FBUCxFQUFjO0FBQ2QsK0JBQVUsS0FBS2xELFdBQUwsQ0FBaUJtRCxJQUEzQixFQUFpQ0QsS0FBakMsQ0FDRywyQkFBMEJ0QyxNQUFNLENBQUNrQyxVQUFQLEdBQW9CTSxTQUFVLEVBRDNELEVBRUVGLEtBRkY7QUFJQUgsUUFBQUEsV0FBVyxHQUFHO0FBQ1o3QixVQUFBQSxRQURZO0FBRVphLFVBQUFBLElBQUksRUFBRTtBQUZNLFNBQWQ7QUFJRDtBQUNGLEtBYkQsQ0FEb0IsQ0FBdEI7O0FBZ0JBLFFBQUlnQixXQUFXLElBQUksSUFBbkIsRUFBeUI7QUFDdkIsYUFBT0EsV0FBUDtBQUNEOztBQUNELFVBQU1NLFdBQVcsR0FBR3hCLE9BQU8sQ0FBQ3lCLFNBQVIsQ0FBa0JDLENBQUMsSUFBSUEsQ0FBQyxJQUFJLElBQTVCLENBQXBCO0FBQ0EsV0FBTztBQUNMeEIsTUFBQUEsSUFBSSxFQUFFLFFBREQ7QUFFTHlCLE1BQUFBLE1BQU0sRUFBRzNCLE9BQU8sQ0FBQ3dCLFdBQUQsQ0FGWDtBQUdMbkMsTUFBQUEsUUFBUSxFQUFFd0IsU0FBUyxDQUFDVyxXQUFELENBQVQsSUFBMEJYLFNBQVMsQ0FBQyxDQUFELENBSHhDO0FBSUw5QixNQUFBQTtBQUpLLEtBQVA7QUFNRDs7QUF4SXVEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEFjdGl2ZUVkaXRvclJlZ2lzdHJ5IHByb3ZpZGVzIGFic3RyYWN0aW9ucyBmb3IgY3JlYXRpbmcgc2VydmljZXMgdGhhdCBvcGVyYXRlXHJcbiAqIG9uIHRleHQgZWRpdG9yIGNvbnRlbnRzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcy1jb21wYXQvYnVuZGxlcy9yeGpzLWNvbXBhdC51bWQubWluLmpzJztcclxuaW1wb3J0IHtvYnNlcnZlQWN0aXZlRWRpdG9yc0RlYm91bmNlZH0gZnJvbSAnLi9kZWJvdW5jZWQnO1xyXG5pbXBvcnQgVW5pdmVyc2FsRGlzcG9zYWJsZSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9Vbml2ZXJzYWxEaXNwb3NhYmxlJztcclxuaW1wb3J0IHtvYnNlcnZhYmxlRnJvbVN1YnNjcmliZUZ1bmN0aW9ufSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9ldmVudCc7XHJcbmltcG9ydCB7Y2FjaGVXaGlsZVN1YnNjcmliZWR9IGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL29ic2VydmFibGUnO1xyXG5cclxuaW1wb3J0IHtnZXRMb2dnZXJ9IGZyb20gJ2xvZzRqcyc7XHJcblxyXG5pbXBvcnQge2lzUGVuZGluZywgb2JzZXJ2ZVBlbmRpbmdTdGF0ZUVuZH0gZnJvbSAnLi9wYW5lLWl0ZW0nO1xyXG5pbXBvcnQgUHJvdmlkZXJSZWdpc3RyeSBmcm9tICcuL1Byb3ZpZGVyUmVnaXN0cnknO1xyXG5cclxuZXhwb3J0IHR5cGUgUHJvdmlkZXIgPSB7XHJcbiAgcHJpb3JpdHk6IG51bWJlcixcclxuICArZ3JhbW1hclNjb3Blcz86IEFycmF5PHN0cmluZz4sXHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBSZXN1bHQ8VCwgVj4gPVxyXG4gIHwge1xyXG4gICAgICBraW5kOiAnbm90LXRleHQtZWRpdG9yJyxcclxuICAgIH1cclxuICB8IHtcclxuICAgICAga2luZDogJ25vLXByb3ZpZGVyJyxcclxuICAgICAgZ3JhbW1hcjogYXRvbSRHcmFtbWFyLFxyXG4gICAgfVxyXG4gIHwge1xyXG4gICAgICBraW5kOiAncHJvdmlkZXItZXJyb3InLFxyXG4gICAgICBwcm92aWRlcjogVCxcclxuICAgIH1cclxuICB8IHtcclxuICAgICAgLy8gU2luY2UgcHJvdmlkZXJzIGNhbiBiZSBzbG93LCB0aGUgcGFuZS1jaGFuZ2UgYW5kIGVkaXQgZXZlbnRzIGFyZSBlbWl0dGVkIGltbWVkaWF0ZWx5IGluIGNhc2VcclxuICAgICAgLy8gdGhlIFVJIG5lZWRzIHRvIGNsZWFyIG91dGRhdGVkIHJlc3VsdHMuXHJcbiAgICAgIGtpbmQ6ICdwYW5lLWNoYW5nZScsXHJcbiAgICAgIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxyXG4gICAgfVxyXG4gIHwge1xyXG4gICAgICBraW5kOiAnc2F2ZScsXHJcbiAgICAgIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxyXG4gICAgfVxyXG4gIHwge1xyXG4gICAgICBraW5kOiAncmVzdWx0JyxcclxuICAgICAgcmVzdWx0OiBWLFxyXG4gICAgICAvLyBUaGUgZWRpdG9yIHRoYXQgdGhlIHJlc3VsdCB3YXMgY29tcHV0ZWQgZnJvbVxyXG4gICAgICBlZGl0b3I6IGF0b20kVGV4dEVkaXRvcixcclxuICAgICAgLy8gVGhlIHByb3ZpZGVyIHRoYXQgY29tcHV0ZWQgdGhlIHJlc3VsdFxyXG4gICAgICAvLyBUT0RPIFVzZSBhIHR5cGUgcGFyYW1ldGVyIGZvciB0aGlzIHR5cGVcclxuICAgICAgcHJvdmlkZXI6IFQsXHJcbiAgICB9O1xyXG5cclxuZXhwb3J0IHR5cGUgUmVzdWx0RnVuY3Rpb248VCwgVj4gPSAoXHJcbiAgcHJvdmlkZXI6IFQsXHJcbiAgZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IsXHJcbikgPT4gUHJvbWlzZTxWPjtcclxuXHJcbnR5cGUgUGFydGlhbEV2ZW50U291cmNlcyA9IHtcclxuICArYWN0aXZlRWRpdG9ycz86IE9ic2VydmFibGU8P2F0b20kVGV4dEVkaXRvcj4sXHJcbiAgK3NhdmVzRm9yRWRpdG9yPzogKGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yKSA9PiBPYnNlcnZhYmxlPHZvaWQ+LFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgRXZlbnRTb3VyY2VzID0ge1xyXG4gIGFjdGl2ZUVkaXRvcnM6IE9ic2VydmFibGU8P2F0b20kVGV4dEVkaXRvcj4sXHJcbiAgc2F2ZXNGb3JFZGl0b3I6IChlZGl0b3I6IGF0b20kVGV4dEVkaXRvcikgPT4gT2JzZXJ2YWJsZTx2b2lkPixcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGl2ZUVkaXRvclJlZ2lzdHJ5PFQ6IFByb3ZpZGVyLCBWPiB7XHJcbiAgX3Jlc3VsdEZ1bmN0aW9uOiBSZXN1bHRGdW5jdGlvbjxULCBWPjtcclxuICBfcHJvdmlkZXJSZWdpc3RyeTogUHJvdmlkZXJSZWdpc3RyeTxUPjtcclxuICBfbmV3UHJvdmlkZXJFdmVudHM6IFN1YmplY3Q8dm9pZD47XHJcbiAgX3Jlc3VsdHNTdHJlYW06IE9ic2VydmFibGU8UmVzdWx0PFQsIFY+PjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZXN1bHRGdW5jdGlvbjogUmVzdWx0RnVuY3Rpb248VCwgVj4sXHJcbiAgICBldmVudFNvdXJjZXM6IFBhcnRpYWxFdmVudFNvdXJjZXMgPSB7fSxcclxuICApIHtcclxuICAgIHRoaXMuX3Jlc3VsdEZ1bmN0aW9uID0gcmVzdWx0RnVuY3Rpb247XHJcbiAgICB0aGlzLl9wcm92aWRlclJlZ2lzdHJ5ID0gbmV3IFByb3ZpZGVyUmVnaXN0cnkoKTtcclxuICAgIHRoaXMuX25ld1Byb3ZpZGVyRXZlbnRzID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHRoaXMuX3Jlc3VsdHNTdHJlYW0gPSB0aGlzLl9jcmVhdGVSZXN1bHRzU3RyZWFtKHtcclxuICAgICAgYWN0aXZlRWRpdG9yczpcclxuICAgICAgICBldmVudFNvdXJjZXMuYWN0aXZlRWRpdG9ycyB8fCBvYnNlcnZlQWN0aXZlRWRpdG9yc0RlYm91bmNlZCgpLFxyXG4gICAgICBzYXZlc0ZvckVkaXRvcjpcclxuICAgICAgICBldmVudFNvdXJjZXMuc2F2ZXNGb3JFZGl0b3IgfHxcclxuICAgICAgICAoZWRpdG9yID0+IHtcclxuICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlRnJvbVN1YnNjcmliZUZ1bmN0aW9uKGNhbGxiYWNrID0+XHJcbiAgICAgICAgICAgIGVkaXRvci5vbkRpZFNhdmUoY2FsbGJhY2spLFxyXG4gICAgICAgICAgKS5tYXBUbyh1bmRlZmluZWQpO1xyXG4gICAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdW1lUHJvdmlkZXIocHJvdmlkZXI6IFQpOiBJRGlzcG9zYWJsZSB7XHJcbiAgICB0aGlzLl9wcm92aWRlclJlZ2lzdHJ5LmFkZFByb3ZpZGVyKHByb3ZpZGVyKTtcclxuICAgIHRoaXMuX25ld1Byb3ZpZGVyRXZlbnRzLm5leHQoKTtcclxuICAgIHJldHVybiBuZXcgVW5pdmVyc2FsRGlzcG9zYWJsZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuX3Byb3ZpZGVyUmVnaXN0cnkucmVtb3ZlUHJvdmlkZXIocHJvdmlkZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRSZXN1bHRzU3RyZWFtKCk6IE9ic2VydmFibGU8UmVzdWx0PFQsIFY+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVzdWx0c1N0cmVhbTtcclxuICB9XHJcblxyXG4gIF9jcmVhdGVSZXN1bHRzU3RyZWFtKGV2ZW50U291cmNlczogRXZlbnRTb3VyY2VzKTogT2JzZXJ2YWJsZTxSZXN1bHQ8VCwgVj4+IHtcclxuICAgIGNvbnN0IHJlcGVhdGVkRWRpdG9ycyA9IGV2ZW50U291cmNlcy5hY3RpdmVFZGl0b3JzLnN3aXRjaE1hcChlZGl0b3IgPT4ge1xyXG4gICAgICBpZiAoZWRpdG9yID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihlZGl0b3IpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNvbmNhdChcclxuICAgICAgICBPYnNlcnZhYmxlLm9mKGVkaXRvciksXHJcbiAgICAgICAgdGhpcy5fbmV3UHJvdmlkZXJFdmVudHMubWFwVG8oZWRpdG9yKSxcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgcmVzdWx0cyA9IHJlcGVhdGVkRWRpdG9ycy5zd2l0Y2hNYXAoZWRpdG9yQXJnID0+IHtcclxuICAgICAgLy8gTmVjZXNzYXJ5IHNvIHRoZSB0eXBlIHJlZmluZW1lbnQgaG9sZHMgaW4gdGhlIGNhbGxiYWNrIGxhdGVyXHJcbiAgICAgIGNvbnN0IGVkaXRvciA9IGVkaXRvckFyZztcclxuICAgICAgaWYgKGVkaXRvciA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2Yoe2tpbmQ6ICdub3QtdGV4dC1lZGl0b3InfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNvbmNhdChcclxuICAgICAgICAvLyBFbWl0IGEgcGFuZSBjaGFuZ2UgZXZlbnQgZmlyc3QsIHNvIHRoYXQgY2xpZW50cyBjYW4gZG8gc29tZXRoaW5nIHdoaWxlIHdhaXRpbmcgZm9yIGFcclxuICAgICAgICAvLyBwcm92aWRlciB0byBnaXZlIGEgcmVzdWx0LlxyXG4gICAgICAgIE9ic2VydmFibGUub2Yoe1xyXG4gICAgICAgICAga2luZDogJ3BhbmUtY2hhbmdlJyxcclxuICAgICAgICAgIGVkaXRvcixcclxuICAgICAgICB9KSxcclxuICAgICAgICAvLyB3YWl0IGZvciBwZW5kaW5nIHBhbmVzIHRvIG5vIGxvbmdlciBiZSBwZW5kaW5nLCBvciBpZiB0aGV5J3JlIG5vdCxcclxuICAgICAgICAvLyBnZXQgdGhlIHJlc3VsdCByaWdodCBhd2F5LlxyXG4gICAgICAgIChpc1BlbmRpbmcoZWRpdG9yKVxyXG4gICAgICAgICAgPyBvYnNlcnZlUGVuZGluZ1N0YXRlRW5kKGVkaXRvcikudGFrZSgxKVxyXG4gICAgICAgICAgOiBPYnNlcnZhYmxlLm9mKG51bGwpXHJcbiAgICAgICAgKS5pZ25vcmVFbGVtZW50cygpLFxyXG4gICAgICAgIE9ic2VydmFibGUuZnJvbVByb21pc2UoXHJcbiAgICAgICAgICB0aGlzLl9nZXRSZXN1bHRGb3JFZGl0b3IodGhpcy5fZ2V0UHJvdmlkZXJzRm9yRWRpdG9yKGVkaXRvciksIGVkaXRvciksXHJcbiAgICAgICAgKSxcclxuICAgICAgICB0aGlzLl9yZXN1bHRzRm9yRWRpdG9yKGVkaXRvciwgZXZlbnRTb3VyY2VzKSxcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNhY2hlV2hpbGVTdWJzY3JpYmVkKHJlc3VsdHMpO1xyXG4gIH1cclxuXHJcbiAgX3Jlc3VsdHNGb3JFZGl0b3IoXHJcbiAgICBlZGl0b3I6IGF0b20kVGV4dEVkaXRvcixcclxuICAgIGV2ZW50U291cmNlczogRXZlbnRTb3VyY2VzLFxyXG4gICk6IE9ic2VydmFibGU8UmVzdWx0PFQsIFY+PiB7XHJcbiAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgdGhlIGFjdGl2ZSBwcm92aWRlciBmb3IgYW4gZWRpdG9yIGNoYW5nZXMgb3ZlciB0aW1lLlxyXG4gICAgLy8gVGh1cywgd2UgaGF2ZSB0byBzdWJzY3JpYmUgdG8gYm90aCBlZGl0cyBhbmQgc2F2ZXMuXHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5tZXJnZShcclxuICAgICAgZXZlbnRTb3VyY2VzLnNhdmVzRm9yRWRpdG9yKGVkaXRvcikubWFwKCgpID0+ICdzYXZlJyksXHJcbiAgICApLmZsYXRNYXAoZXZlbnQgPT4ge1xyXG4gICAgICBjb25zdCBwcm92aWRlcnMgPSB0aGlzLl9nZXRQcm92aWRlcnNGb3JFZGl0b3IoZWRpdG9yKTtcclxuICAgICAgcmV0dXJuIE9ic2VydmFibGUuY29uY2F0KFxyXG4gICAgICAgIC8vICRGbG93SXNzdWU6IHtraW5kOiBzYXZlfVxyXG4gICAgICAgIE9ic2VydmFibGUub2Yoe2tpbmQ6IGV2ZW50LCBlZGl0b3J9KSxcclxuICAgICAgICBPYnNlcnZhYmxlLmZyb21Qcm9taXNlKHRoaXMuX2dldFJlc3VsdEZvckVkaXRvcihwcm92aWRlcnMsIGVkaXRvcikpLFxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfZ2V0UHJvdmlkZXJzRm9yRWRpdG9yKGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yKTogQXJyYXk8VD4ge1xyXG4gICAgcmV0dXJuIFsuLi50aGlzLl9wcm92aWRlclJlZ2lzdHJ5LmdldEFsbFByb3ZpZGVyc0ZvckVkaXRvcihlZGl0b3IpXTtcclxuICB9XHJcblxyXG4gIGFzeW5jIF9nZXRSZXN1bHRGb3JFZGl0b3IoXHJcbiAgICBwcm92aWRlcnM6IEFycmF5PFQ+LFxyXG4gICAgZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IsXHJcbiAgKTogUHJvbWlzZTxSZXN1bHQ8VCwgVj4+IHtcclxuICAgIGlmIChwcm92aWRlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAga2luZDogJ25vLXByb3ZpZGVyJyxcclxuICAgICAgICBncmFtbWFyOiBlZGl0b3IuZ2V0R3JhbW1hcigpLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgbGV0IGVycm9yUmVzdWx0O1xyXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgICBwcm92aWRlcnMubWFwKGFzeW5jIHByb3ZpZGVyID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3Jlc3VsdEZ1bmN0aW9uKHByb3ZpZGVyLCBlZGl0b3IpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBnZXRMb2dnZXIodGhpcy5jb25zdHJ1Y3Rvci5uYW1lKS5lcnJvcihcclxuICAgICAgICAgICAgYEVycm9yIGZyb20gcHJvdmlkZXIgZm9yICR7ZWRpdG9yLmdldEdyYW1tYXIoKS5zY29wZU5hbWV9YCxcclxuICAgICAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgZXJyb3JSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyLFxyXG4gICAgICAgICAgICBraW5kOiAncHJvdmlkZXItZXJyb3InLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICAgIGlmIChlcnJvclJlc3VsdCAhPSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBlcnJvclJlc3VsdDtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlc3VsdEluZGV4ID0gcmVzdWx0cy5maW5kSW5kZXgociA9PiByICE9IG51bGwpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAga2luZDogJ3Jlc3VsdCcsXHJcbiAgICAgIHJlc3VsdDogKHJlc3VsdHNbcmVzdWx0SW5kZXhdOiBhbnkpLFxyXG4gICAgICBwcm92aWRlcjogcHJvdmlkZXJzW3Jlc3VsdEluZGV4XSB8fCBwcm92aWRlcnNbMF0sXHJcbiAgICAgIGVkaXRvcixcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==