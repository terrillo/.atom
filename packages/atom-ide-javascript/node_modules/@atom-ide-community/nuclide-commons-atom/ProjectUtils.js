"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLabelFromPath = getLabelFromPath;
exports.getLocalPathsForProjectRepo = getLocalPathsForProjectRepo;
exports.getRemotePathsForProjectRepo = getRemotePathsForProjectRepo;
exports.setLocalPathsForProjectRepo = setLocalPathsForProjectRepo;
exports.setRemotePathsForProjectRepo = setRemotePathsForProjectRepo;

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function getLabelFromPath(path) {
  const basename = _nuclideUri.default.basename(path);

  const parts = basename.split('.').filter(Boolean);
  const name = parts.length >= 2 ? parts.slice(0, Math.max(1, parts.length - 2)).join(' ') : basename;
  return humanizeProjectName(name);
}

function formatProjectNameWord(word) {
  switch (word) {
    case 'www':
      return 'WWW';

    case 'ios':
      return 'iOS';

    case '':
      return '';

    default:
      return word[0].toUpperCase() + word.slice(1);
  }
}

function humanizeProjectName(name) {
  // Special case some projects.
  if (name === 'www' || name.startsWith('fb')) {
    return name;
  }

  const hasCapitalLetters = /[A-Z]/.test(name);

  const id = x => x;

  return name.split(/[-_]+/).filter(Boolean).map(hasCapitalLetters ? id : formatProjectNameWord).join(' ') || name;
}
/**
 * Gets the array of paths which can be tried on the local machine to find
 * the location of `repo`. For example, if repo := fbsource, then we are getting
 * the paths to fbsource on the user's local machine.
 */


function getLocalPathsForProjectRepo(repo) {
  return getPathsForProjectRepoFromLocation(repo, 'localPaths');
}
/**
 * Gets the array of paths which can be tried on a remote machine to find
 * the location of `repo`. For example, if repo := fbsource, then we are getting
 * the paths to fbsource on the user's remote machine.
 */


function getRemotePathsForProjectRepo(repo) {
  return getPathsForProjectRepoFromLocation(repo, 'remotePaths');
}

let featureConfig; // lazy loaded since it uses atom global and should only run inside Atom

function getFeatureConfig() {
  if (!featureConfig) {
    featureConfig = require('./featureConfig');
  }

  return featureConfig;
}

function getPathsForProjectRepoFromLocation(repo, featureConfigLocation) {
  if (repo == null) {
    return [];
  }

  const localPaths = getFeatureConfig().get(`fb-atomprojects.${featureConfigLocation}`);
  (0, _assert.default)(Array.isArray(localPaths));
  const repoPaths = localPaths // $FlowIgnore
  .filter(obj => obj.repo === repo) // $FlowIgnore
  .map(obj => obj.path);

  if (repoPaths.length === 0) {
    repoPaths.push(`~/${repo}`);
  }

  return repoPaths;
}
/**
 * Sets an array of paths which can be tried on the local machine to find
 * the location of <repo>. For example, if repo := fbsource, then we are setting
 * the paths to fbsource on the user's local machine.
 */


function setLocalPathsForProjectRepo(paths) {
  getFeatureConfig().set('fb-atomprojects.localPaths', paths);
}
/**
 * Sets an array of paths which can be tried on a remote machine to find
 * the location of <repo>. For example, if repo := fbsource, then we are setting
 * the paths to fbsource on the user's remote machine.
 */


function setRemotePathsForProjectRepo(paths) {
  getFeatureConfig().set('fb-atomprojects.remotePaths', paths);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,