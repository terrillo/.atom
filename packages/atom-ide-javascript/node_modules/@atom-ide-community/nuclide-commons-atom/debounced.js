"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observeActivePaneItemDebounced = observeActivePaneItemDebounced;
exports.observeActiveEditorsDebounced = observeActiveEditorsDebounced;
exports.editorChangesDebounced = editorChangesDebounced;
exports.editorScrollTopDebounced = editorScrollTopDebounced;
exports.observeTextEditorsPositions = observeTextEditorsPositions;

var _observable = require("@atom-ide-community/nuclide-commons/observable");

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _event = require("@atom-ide-community/nuclide-commons/event");

var _textEditor = require("./text-editor");

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * Often, we may want to respond to Atom events, but only after a buffer period
 * of no change.
 * For example, Atom provides Workspace::onDidChangeActivePaneItem, but we may
 * want to know not when the active pane item has changed, buth when it has
 * stopped changing.
 * This file provides methods to do this.
 */
const DEFAULT_PANE_DEBOUNCE_INTERVAL_MS = 100;
const DEFAULT_EDITOR_DEBOUNCE_INTERVAL_MS = 300;
const DEFAULT_POSITION_DEBOUNCE_INTERVAL_MS = 300;

function observeActivePaneItemDebounced(debounceInterval = DEFAULT_PANE_DEBOUNCE_INTERVAL_MS) {
  return (0, _event.observableFromSubscribeFunction)(callback => {
    if (atom.workspace.getCenter != null) {
      return atom.workspace.getCenter().observeActivePaneItem(callback);
    }

    return atom.workspace.observeActivePaneItem(callback);
  }).let((0, _observable.fastDebounce)(debounceInterval));
}

function observeActiveEditorsDebounced(debounceInterval = DEFAULT_PANE_DEBOUNCE_INTERVAL_MS) {
  return observeActivePaneItemDebounced(debounceInterval).map(paneItem => {
    return (0, _textEditor.isValidTextEditor)(paneItem) ? paneItem : null;
  });
}

function editorChangesDebounced(editor, debounceInterval = DEFAULT_EDITOR_DEBOUNCE_INTERVAL_MS) {
  return (0, _event.observableFromSubscribeFunction)(callback => editor.getBuffer().onDidChangeText(() => callback())) // Debounce manually rather than using editor.onDidStopChanging so that the debounce time is
  // configurable.
  .let((0, _observable.fastDebounce)(debounceInterval));
}

function editorScrollTopDebounced(editor, debounceInterval = DEFAULT_EDITOR_DEBOUNCE_INTERVAL_MS) {
  return (0, _event.observableFromSubscribeFunction)(callback => atom.views.getView(editor).onDidChangeScrollTop(callback)).let((0, _observable.fastDebounce)(debounceInterval));
}

// Yields null when the current pane is not an editor,
// otherwise yields events on each move of the primary cursor within any Editor.
function observeTextEditorsPositions(editorDebounceInterval = DEFAULT_EDITOR_DEBOUNCE_INTERVAL_MS, positionDebounceInterval = DEFAULT_POSITION_DEBOUNCE_INTERVAL_MS) {
  return observeActiveEditorsDebounced(editorDebounceInterval).switchMap(editor => {
    return editor == null ? _rxjsCompatUmdMin.Observable.of(null) : (0, _textEditor.getCursorPositions)(editor).let((0, _observable.fastDebounce)(positionDebounceInterval)).map(position => {
      (0, _assert.default)(editor != null);
      return {
        editor,
        position
      };
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vZGVib3VuY2VkLmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfUEFORV9ERUJPVU5DRV9JTlRFUlZBTF9NUyIsIkRFRkFVTFRfRURJVE9SX0RFQk9VTkNFX0lOVEVSVkFMX01TIiwiREVGQVVMVF9QT1NJVElPTl9ERUJPVU5DRV9JTlRFUlZBTF9NUyIsIm9ic2VydmVBY3RpdmVQYW5lSXRlbURlYm91bmNlZCIsImRlYm91bmNlSW50ZXJ2YWwiLCJjYWxsYmFjayIsImF0b20iLCJ3b3Jrc3BhY2UiLCJnZXRDZW50ZXIiLCJvYnNlcnZlQWN0aXZlUGFuZUl0ZW0iLCJsZXQiLCJvYnNlcnZlQWN0aXZlRWRpdG9yc0RlYm91bmNlZCIsIm1hcCIsInBhbmVJdGVtIiwiZWRpdG9yQ2hhbmdlc0RlYm91bmNlZCIsImVkaXRvciIsImdldEJ1ZmZlciIsIm9uRGlkQ2hhbmdlVGV4dCIsImVkaXRvclNjcm9sbFRvcERlYm91bmNlZCIsInZpZXdzIiwiZ2V0VmlldyIsIm9uRGlkQ2hhbmdlU2Nyb2xsVG9wIiwib2JzZXJ2ZVRleHRFZGl0b3JzUG9zaXRpb25zIiwiZWRpdG9yRGVib3VuY2VJbnRlcnZhbCIsInBvc2l0aW9uRGVib3VuY2VJbnRlcnZhbCIsInN3aXRjaE1hcCIsIk9ic2VydmFibGUiLCJvZiIsInBvc2l0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQXFCQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQTFCQTs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7O0FBZ0JBLE1BQU1BLGlDQUFpQyxHQUFHLEdBQTFDO0FBQ0EsTUFBTUMsbUNBQW1DLEdBQUcsR0FBNUM7QUFDQSxNQUFNQyxxQ0FBcUMsR0FBRyxHQUE5Qzs7QUFFTyxTQUFTQyw4QkFBVCxDQUNMQyxnQkFBd0IsR0FBR0osaUNBRHRCLEVBRWM7QUFDbkIsU0FBTyw0Q0FBZ0NLLFFBQVEsSUFBSTtBQUNqRCxRQUFJQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUMsU0FBZixJQUE0QixJQUFoQyxFQUFzQztBQUNwQyxhQUFPRixJQUFJLENBQUNDLFNBQUwsQ0FBZUMsU0FBZixHQUEyQkMscUJBQTNCLENBQWlESixRQUFqRCxDQUFQO0FBQ0Q7O0FBQ0QsV0FBT0MsSUFBSSxDQUFDQyxTQUFMLENBQWVFLHFCQUFmLENBQXFDSixRQUFyQyxDQUFQO0FBQ0QsR0FMTSxFQUtKSyxHQUxJLENBS0EsOEJBQWFOLGdCQUFiLENBTEEsQ0FBUDtBQU1EOztBQUVNLFNBQVNPLDZCQUFULENBQ0xQLGdCQUF3QixHQUFHSixpQ0FEdEIsRUFFeUI7QUFDOUIsU0FBT0csOEJBQThCLENBQUNDLGdCQUFELENBQTlCLENBQWlEUSxHQUFqRCxDQUFxREMsUUFBUSxJQUFJO0FBQ3RFLFdBQU8sbUNBQWtCQSxRQUFsQixJQUE4QkEsUUFBOUIsR0FBeUMsSUFBaEQ7QUFDRCxHQUZNLENBQVA7QUFHRDs7QUFFTSxTQUFTQyxzQkFBVCxDQUNMQyxNQURLLEVBRUxYLGdCQUF3QixHQUFHSCxtQ0FGdEIsRUFHYTtBQUNsQixTQUNFLDRDQUFnQ0ksUUFBUSxJQUN0Q1UsTUFBTSxDQUFDQyxTQUFQLEdBQW1CQyxlQUFuQixDQUFtQyxNQUFNWixRQUFRLEVBQWpELENBREYsRUFHRTtBQUNBO0FBSkYsR0FLR0ssR0FMSCxDQUtPLDhCQUFhTixnQkFBYixDQUxQLENBREY7QUFRRDs7QUFFTSxTQUFTYyx3QkFBVCxDQUNMSCxNQURLLEVBRUxYLGdCQUF3QixHQUFHSCxtQ0FGdEIsRUFHZTtBQUNwQixTQUFPLDRDQUFnQ0ksUUFBUSxJQUM3Q0MsSUFBSSxDQUFDYSxLQUFMLENBQVdDLE9BQVgsQ0FBbUJMLE1BQW5CLEVBQTJCTSxvQkFBM0IsQ0FBZ0RoQixRQUFoRCxDQURLLEVBRUxLLEdBRkssQ0FFRCw4QkFBYU4sZ0JBQWIsQ0FGQyxDQUFQO0FBR0Q7O0FBT0Q7QUFDQTtBQUNPLFNBQVNrQiwyQkFBVCxDQUNMQyxzQkFBOEIsR0FBR3RCLG1DQUQ1QixFQUVMdUIsd0JBQWdDLEdBQUd0QixxQ0FGOUIsRUFHd0I7QUFDN0IsU0FBT1MsNkJBQTZCLENBQUNZLHNCQUFELENBQTdCLENBQXNERSxTQUF0RCxDQUNMVixNQUFNLElBQUk7QUFDUixXQUFPQSxNQUFNLElBQUksSUFBVixHQUNIVyw2QkFBV0MsRUFBWCxDQUFjLElBQWQsQ0FERyxHQUVILG9DQUFtQlosTUFBbkIsRUFDR0wsR0FESCxDQUNPLDhCQUFhYyx3QkFBYixDQURQLEVBRUdaLEdBRkgsQ0FFT2dCLFFBQVEsSUFBSTtBQUNmLDJCQUFVYixNQUFNLElBQUksSUFBcEI7QUFDQSxhQUFPO0FBQUNBLFFBQUFBLE1BQUQ7QUFBU2EsUUFBQUE7QUFBVCxPQUFQO0FBQ0QsS0FMSCxDQUZKO0FBUUQsR0FWSSxDQUFQO0FBWUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG4vKipcclxuICogT2Z0ZW4sIHdlIG1heSB3YW50IHRvIHJlc3BvbmQgdG8gQXRvbSBldmVudHMsIGJ1dCBvbmx5IGFmdGVyIGEgYnVmZmVyIHBlcmlvZFxyXG4gKiBvZiBubyBjaGFuZ2UuXHJcbiAqIEZvciBleGFtcGxlLCBBdG9tIHByb3ZpZGVzIFdvcmtzcGFjZTo6b25EaWRDaGFuZ2VBY3RpdmVQYW5lSXRlbSwgYnV0IHdlIG1heVxyXG4gKiB3YW50IHRvIGtub3cgbm90IHdoZW4gdGhlIGFjdGl2ZSBwYW5lIGl0ZW0gaGFzIGNoYW5nZWQsIGJ1dGggd2hlbiBpdCBoYXNcclxuICogc3RvcHBlZCBjaGFuZ2luZy5cclxuICogVGhpcyBmaWxlIHByb3ZpZGVzIG1ldGhvZHMgdG8gZG8gdGhpcy5cclxuICovXHJcblxyXG5pbXBvcnQge2Zhc3REZWJvdW5jZX0gZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcy1jb21wYXQvYnVuZGxlcy9yeGpzLWNvbXBhdC51bWQubWluLmpzJztcclxuXHJcbmltcG9ydCB7b2JzZXJ2YWJsZUZyb21TdWJzY3JpYmVGdW5jdGlvbn0gZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvZXZlbnQnO1xyXG5pbXBvcnQge2dldEN1cnNvclBvc2l0aW9ucywgaXNWYWxpZFRleHRFZGl0b3J9IGZyb20gJy4vdGV4dC1lZGl0b3InO1xyXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2Fzc2VydCc7XHJcblxyXG5jb25zdCBERUZBVUxUX1BBTkVfREVCT1VOQ0VfSU5URVJWQUxfTVMgPSAxMDA7XHJcbmNvbnN0IERFRkFVTFRfRURJVE9SX0RFQk9VTkNFX0lOVEVSVkFMX01TID0gMzAwO1xyXG5jb25zdCBERUZBVUxUX1BPU0lUSU9OX0RFQk9VTkNFX0lOVEVSVkFMX01TID0gMzAwO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVBY3RpdmVQYW5lSXRlbURlYm91bmNlZChcclxuICBkZWJvdW5jZUludGVydmFsOiBudW1iZXIgPSBERUZBVUxUX1BBTkVfREVCT1VOQ0VfSU5URVJWQUxfTVMsXHJcbik6IE9ic2VydmFibGU8bWl4ZWQ+IHtcclxuICByZXR1cm4gb2JzZXJ2YWJsZUZyb21TdWJzY3JpYmVGdW5jdGlvbihjYWxsYmFjayA9PiB7XHJcbiAgICBpZiAoYXRvbS53b3Jrc3BhY2UuZ2V0Q2VudGVyICE9IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmdldENlbnRlcigpLm9ic2VydmVBY3RpdmVQYW5lSXRlbShjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZUFjdGl2ZVBhbmVJdGVtKGNhbGxiYWNrKTtcclxuICB9KS5sZXQoZmFzdERlYm91bmNlKGRlYm91bmNlSW50ZXJ2YWwpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVBY3RpdmVFZGl0b3JzRGVib3VuY2VkKFxyXG4gIGRlYm91bmNlSW50ZXJ2YWw6IG51bWJlciA9IERFRkFVTFRfUEFORV9ERUJPVU5DRV9JTlRFUlZBTF9NUyxcclxuKTogT2JzZXJ2YWJsZTw/YXRvbSRUZXh0RWRpdG9yPiB7XHJcbiAgcmV0dXJuIG9ic2VydmVBY3RpdmVQYW5lSXRlbURlYm91bmNlZChkZWJvdW5jZUludGVydmFsKS5tYXAocGFuZUl0ZW0gPT4ge1xyXG4gICAgcmV0dXJuIGlzVmFsaWRUZXh0RWRpdG9yKHBhbmVJdGVtKSA/IHBhbmVJdGVtIDogbnVsbDtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVkaXRvckNoYW5nZXNEZWJvdW5jZWQoXHJcbiAgZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IsXHJcbiAgZGVib3VuY2VJbnRlcnZhbDogbnVtYmVyID0gREVGQVVMVF9FRElUT1JfREVCT1VOQ0VfSU5URVJWQUxfTVMsXHJcbik6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gIHJldHVybiAoXHJcbiAgICBvYnNlcnZhYmxlRnJvbVN1YnNjcmliZUZ1bmN0aW9uKGNhbGxiYWNrID0+XHJcbiAgICAgIGVkaXRvci5nZXRCdWZmZXIoKS5vbkRpZENoYW5nZVRleHQoKCkgPT4gY2FsbGJhY2soKSksXHJcbiAgICApXHJcbiAgICAgIC8vIERlYm91bmNlIG1hbnVhbGx5IHJhdGhlciB0aGFuIHVzaW5nIGVkaXRvci5vbkRpZFN0b3BDaGFuZ2luZyBzbyB0aGF0IHRoZSBkZWJvdW5jZSB0aW1lIGlzXHJcbiAgICAgIC8vIGNvbmZpZ3VyYWJsZS5cclxuICAgICAgLmxldChmYXN0RGVib3VuY2UoZGVib3VuY2VJbnRlcnZhbCkpXHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVkaXRvclNjcm9sbFRvcERlYm91bmNlZChcclxuICBlZGl0b3I6IGF0b20kVGV4dEVkaXRvcixcclxuICBkZWJvdW5jZUludGVydmFsOiBudW1iZXIgPSBERUZBVUxUX0VESVRPUl9ERUJPVU5DRV9JTlRFUlZBTF9NUyxcclxuKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcclxuICByZXR1cm4gb2JzZXJ2YWJsZUZyb21TdWJzY3JpYmVGdW5jdGlvbihjYWxsYmFjayA9PlxyXG4gICAgYXRvbS52aWV3cy5nZXRWaWV3KGVkaXRvcikub25EaWRDaGFuZ2VTY3JvbGxUb3AoY2FsbGJhY2spLFxyXG4gICkubGV0KGZhc3REZWJvdW5jZShkZWJvdW5jZUludGVydmFsKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEVkaXRvclBvc2l0aW9uID0ge1xyXG4gIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxyXG4gIHBvc2l0aW9uOiBhdG9tJFBvaW50LFxyXG59O1xyXG5cclxuLy8gWWllbGRzIG51bGwgd2hlbiB0aGUgY3VycmVudCBwYW5lIGlzIG5vdCBhbiBlZGl0b3IsXHJcbi8vIG90aGVyd2lzZSB5aWVsZHMgZXZlbnRzIG9uIGVhY2ggbW92ZSBvZiB0aGUgcHJpbWFyeSBjdXJzb3Igd2l0aGluIGFueSBFZGl0b3IuXHJcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlVGV4dEVkaXRvcnNQb3NpdGlvbnMoXHJcbiAgZWRpdG9yRGVib3VuY2VJbnRlcnZhbDogbnVtYmVyID0gREVGQVVMVF9FRElUT1JfREVCT1VOQ0VfSU5URVJWQUxfTVMsXHJcbiAgcG9zaXRpb25EZWJvdW5jZUludGVydmFsOiBudW1iZXIgPSBERUZBVUxUX1BPU0lUSU9OX0RFQk9VTkNFX0lOVEVSVkFMX01TLFxyXG4pOiBPYnNlcnZhYmxlPD9FZGl0b3JQb3NpdGlvbj4ge1xyXG4gIHJldHVybiBvYnNlcnZlQWN0aXZlRWRpdG9yc0RlYm91bmNlZChlZGl0b3JEZWJvdW5jZUludGVydmFsKS5zd2l0Y2hNYXAoXHJcbiAgICBlZGl0b3IgPT4ge1xyXG4gICAgICByZXR1cm4gZWRpdG9yID09IG51bGxcclxuICAgICAgICA/IE9ic2VydmFibGUub2YobnVsbClcclxuICAgICAgICA6IGdldEN1cnNvclBvc2l0aW9ucyhlZGl0b3IpXHJcbiAgICAgICAgICAgIC5sZXQoZmFzdERlYm91bmNlKHBvc2l0aW9uRGVib3VuY2VJbnRlcnZhbCkpXHJcbiAgICAgICAgICAgIC5tYXAocG9zaXRpb24gPT4ge1xyXG4gICAgICAgICAgICAgIGludmFyaWFudChlZGl0b3IgIT0gbnVsbCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHtlZGl0b3IsIHBvc2l0aW9ufTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICk7XHJcbn1cclxuIl19