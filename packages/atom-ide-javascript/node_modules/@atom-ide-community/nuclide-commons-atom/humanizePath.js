"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = humanizePath;

var _idx = _interopRequireDefault(require("idx"));

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * Format a path for display. After the path is humanized, it should no longer be treated like a
 * parsable, navigable path; it's just for display.
 *
 * Note that this (intentionally) provides different results based on the projects currently open in
 * Atom. If you have multiple directories open, the result will be prefixed with one of their names.
 * If you only have one, it won't.
 */
function humanizePath(path, options) {
  const isDirectory = (0, _idx.default)(options, _ => _.isDirectory);
  const rootPaths = (0, _idx.default)(options, _ => _.rootPaths) || atom.project.getDirectories().map(dir => dir.getPath());
  const normalized = normalizePath(path, isDirectory);
  let resolved;

  for (const rootPath of rootPaths) {
    const normalizedDir = _nuclideUri.default.normalizeDir(rootPath);

    if (_nuclideUri.default.contains(normalizedDir, normalized)) {
      resolved = normalized.substr(normalizedDir.length);

      const rootName = _nuclideUri.default.basename(normalizedDir); // If the path is a root or there's more than one root, include the root's name.


      if (normalized === normalizedDir) {
        return _nuclideUri.default.normalizeDir(rootName);
      }

      if (rootPaths.length > 1) {
        return _nuclideUri.default.join(rootName, resolved);
      }

      return resolved;
    }
  } // It's not in one of the project directories so return the full (normalized)
  // path run through nuclideUriToDisplayString to remove nuclide:// etc.


  return _nuclideUri.default.nuclideUriToDisplayString(normalized);
}

function normalizePath(path, isDirectory_) {
  const isDirectory = isDirectory_ == null ? _nuclideUri.default.endsWithSeparator(path) : isDirectory_;
  return isDirectory ? _nuclideUri.default.normalizeDir(path) : _nuclideUri.default.normalize(path);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vaHVtYW5pemVQYXRoLmpzIl0sIm5hbWVzIjpbImh1bWFuaXplUGF0aCIsInBhdGgiLCJvcHRpb25zIiwiaXNEaXJlY3RvcnkiLCJfIiwicm9vdFBhdGhzIiwiYXRvbSIsInByb2plY3QiLCJnZXREaXJlY3RvcmllcyIsIm1hcCIsImRpciIsImdldFBhdGgiLCJub3JtYWxpemVkIiwibm9ybWFsaXplUGF0aCIsInJlc29sdmVkIiwicm9vdFBhdGgiLCJub3JtYWxpemVkRGlyIiwibnVjbGlkZVVyaSIsIm5vcm1hbGl6ZURpciIsImNvbnRhaW5zIiwic3Vic3RyIiwibGVuZ3RoIiwicm9vdE5hbWUiLCJiYXNlbmFtZSIsImpvaW4iLCJudWNsaWRlVXJpVG9EaXNwbGF5U3RyaW5nIiwiaXNEaXJlY3RvcnlfIiwiZW5kc1dpdGhTZXBhcmF0b3IiLCJub3JtYWxpemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFjQTs7QUFDQTs7OztBQWZBOzs7Ozs7Ozs7Ozs7QUFpQkE7Ozs7Ozs7O0FBUWUsU0FBU0EsWUFBVCxDQUNiQyxJQURhLEVBRWJDLE9BRmEsRUFNTDtBQUNSLFFBQU1DLFdBQVcsR0FBRyxrQkFBSUQsT0FBSixFQUFhRSxDQUFDLElBQUlBLENBQUMsQ0FBQ0QsV0FBcEIsQ0FBcEI7QUFDQSxRQUFNRSxTQUFTLEdBQ2Isa0JBQUlILE9BQUosRUFBYUUsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLFNBQXBCLEtBQ0FDLElBQUksQ0FBQ0MsT0FBTCxDQUFhQyxjQUFiLEdBQThCQyxHQUE5QixDQUFrQ0MsR0FBRyxJQUFJQSxHQUFHLENBQUNDLE9BQUosRUFBekMsQ0FGRjtBQUdBLFFBQU1DLFVBQVUsR0FBR0MsYUFBYSxDQUFDWixJQUFELEVBQU9FLFdBQVAsQ0FBaEM7QUFDQSxNQUFJVyxRQUFKOztBQUNBLE9BQUssTUFBTUMsUUFBWCxJQUF1QlYsU0FBdkIsRUFBa0M7QUFDaEMsVUFBTVcsYUFBYSxHQUFHQyxvQkFBV0MsWUFBWCxDQUF3QkgsUUFBeEIsQ0FBdEI7O0FBQ0EsUUFBSUUsb0JBQVdFLFFBQVgsQ0FBb0JILGFBQXBCLEVBQW1DSixVQUFuQyxDQUFKLEVBQW9EO0FBQ2xERSxNQUFBQSxRQUFRLEdBQUdGLFVBQVUsQ0FBQ1EsTUFBWCxDQUFrQkosYUFBYSxDQUFDSyxNQUFoQyxDQUFYOztBQUNBLFlBQU1DLFFBQVEsR0FBR0wsb0JBQVdNLFFBQVgsQ0FBb0JQLGFBQXBCLENBQWpCLENBRmtELENBR2xEOzs7QUFDQSxVQUFJSixVQUFVLEtBQUtJLGFBQW5CLEVBQWtDO0FBQ2hDLGVBQU9DLG9CQUFXQyxZQUFYLENBQXdCSSxRQUF4QixDQUFQO0FBQ0Q7O0FBQ0QsVUFBSWpCLFNBQVMsQ0FBQ2dCLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEIsZUFBT0osb0JBQVdPLElBQVgsQ0FBZ0JGLFFBQWhCLEVBQTBCUixRQUExQixDQUFQO0FBQ0Q7O0FBQ0QsYUFBT0EsUUFBUDtBQUNEO0FBQ0YsR0FyQk8sQ0F1QlI7QUFDQTs7O0FBQ0EsU0FBT0csb0JBQVdRLHlCQUFYLENBQXFDYixVQUFyQyxDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsYUFBVCxDQUF1QlosSUFBdkIsRUFBeUN5QixZQUF6QyxFQUE2RTtBQUMzRSxRQUFNdkIsV0FBVyxHQUNmdUIsWUFBWSxJQUFJLElBQWhCLEdBQXVCVCxvQkFBV1UsaUJBQVgsQ0FBNkIxQixJQUE3QixDQUF2QixHQUE0RHlCLFlBRDlEO0FBRUEsU0FBT3ZCLFdBQVcsR0FDZGMsb0JBQVdDLFlBQVgsQ0FBd0JqQixJQUF4QixDQURjLEdBRWRnQixvQkFBV1csU0FBWCxDQUFxQjNCLElBQXJCLENBRko7QUFHRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCB0eXBlIHtOdWNsaWRlVXJpfSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9udWNsaWRlVXJpJztcclxuXHJcbmltcG9ydCBpZHggZnJvbSAnaWR4JztcclxuaW1wb3J0IG51Y2xpZGVVcmkgZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvbnVjbGlkZVVyaSc7XHJcblxyXG4vKipcclxuICogRm9ybWF0IGEgcGF0aCBmb3IgZGlzcGxheS4gQWZ0ZXIgdGhlIHBhdGggaXMgaHVtYW5pemVkLCBpdCBzaG91bGQgbm8gbG9uZ2VyIGJlIHRyZWF0ZWQgbGlrZSBhXHJcbiAqIHBhcnNhYmxlLCBuYXZpZ2FibGUgcGF0aDsgaXQncyBqdXN0IGZvciBkaXNwbGF5LlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgdGhpcyAoaW50ZW50aW9uYWxseSkgcHJvdmlkZXMgZGlmZmVyZW50IHJlc3VsdHMgYmFzZWQgb24gdGhlIHByb2plY3RzIGN1cnJlbnRseSBvcGVuIGluXHJcbiAqIEF0b20uIElmIHlvdSBoYXZlIG11bHRpcGxlIGRpcmVjdG9yaWVzIG9wZW4sIHRoZSByZXN1bHQgd2lsbCBiZSBwcmVmaXhlZCB3aXRoIG9uZSBvZiB0aGVpciBuYW1lcy5cclxuICogSWYgeW91IG9ubHkgaGF2ZSBvbmUsIGl0IHdvbid0LlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHVtYW5pemVQYXRoKFxyXG4gIHBhdGg6IE51Y2xpZGVVcmksXHJcbiAgb3B0aW9uczogP3tcclxuICAgIGlzRGlyZWN0b3J5PzogYm9vbGVhbixcclxuICAgIHJvb3RQYXRocz86IEFycmF5PE51Y2xpZGVVcmk+LFxyXG4gIH0sXHJcbik6IHN0cmluZyB7XHJcbiAgY29uc3QgaXNEaXJlY3RvcnkgPSBpZHgob3B0aW9ucywgXyA9PiBfLmlzRGlyZWN0b3J5KTtcclxuICBjb25zdCByb290UGF0aHMgPVxyXG4gICAgaWR4KG9wdGlvbnMsIF8gPT4gXy5yb290UGF0aHMpIHx8XHJcbiAgICBhdG9tLnByb2plY3QuZ2V0RGlyZWN0b3JpZXMoKS5tYXAoZGlyID0+IGRpci5nZXRQYXRoKCkpO1xyXG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVQYXRoKHBhdGgsIGlzRGlyZWN0b3J5KTtcclxuICBsZXQgcmVzb2x2ZWQ7XHJcbiAgZm9yIChjb25zdCByb290UGF0aCBvZiByb290UGF0aHMpIHtcclxuICAgIGNvbnN0IG5vcm1hbGl6ZWREaXIgPSBudWNsaWRlVXJpLm5vcm1hbGl6ZURpcihyb290UGF0aCk7XHJcbiAgICBpZiAobnVjbGlkZVVyaS5jb250YWlucyhub3JtYWxpemVkRGlyLCBub3JtYWxpemVkKSkge1xyXG4gICAgICByZXNvbHZlZCA9IG5vcm1hbGl6ZWQuc3Vic3RyKG5vcm1hbGl6ZWREaXIubGVuZ3RoKTtcclxuICAgICAgY29uc3Qgcm9vdE5hbWUgPSBudWNsaWRlVXJpLmJhc2VuYW1lKG5vcm1hbGl6ZWREaXIpO1xyXG4gICAgICAvLyBJZiB0aGUgcGF0aCBpcyBhIHJvb3Qgb3IgdGhlcmUncyBtb3JlIHRoYW4gb25lIHJvb3QsIGluY2x1ZGUgdGhlIHJvb3QncyBuYW1lLlxyXG4gICAgICBpZiAobm9ybWFsaXplZCA9PT0gbm9ybWFsaXplZERpcikge1xyXG4gICAgICAgIHJldHVybiBudWNsaWRlVXJpLm5vcm1hbGl6ZURpcihyb290TmFtZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHJvb3RQYXRocy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgcmV0dXJuIG51Y2xpZGVVcmkuam9pbihyb290TmFtZSwgcmVzb2x2ZWQpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZXNvbHZlZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEl0J3Mgbm90IGluIG9uZSBvZiB0aGUgcHJvamVjdCBkaXJlY3RvcmllcyBzbyByZXR1cm4gdGhlIGZ1bGwgKG5vcm1hbGl6ZWQpXHJcbiAgLy8gcGF0aCBydW4gdGhyb3VnaCBudWNsaWRlVXJpVG9EaXNwbGF5U3RyaW5nIHRvIHJlbW92ZSBudWNsaWRlOi8vIGV0Yy5cclxuICByZXR1cm4gbnVjbGlkZVVyaS5udWNsaWRlVXJpVG9EaXNwbGF5U3RyaW5nKG5vcm1hbGl6ZWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub3JtYWxpemVQYXRoKHBhdGg6IE51Y2xpZGVVcmksIGlzRGlyZWN0b3J5XzogP2Jvb2xlYW4pOiBOdWNsaWRlVXJpIHtcclxuICBjb25zdCBpc0RpcmVjdG9yeSA9XHJcbiAgICBpc0RpcmVjdG9yeV8gPT0gbnVsbCA/IG51Y2xpZGVVcmkuZW5kc1dpdGhTZXBhcmF0b3IocGF0aCkgOiBpc0RpcmVjdG9yeV87XHJcbiAgcmV0dXJuIGlzRGlyZWN0b3J5XHJcbiAgICA/IG51Y2xpZGVVcmkubm9ybWFsaXplRGlyKHBhdGgpXHJcbiAgICA6IG51Y2xpZGVVcmkubm9ybWFsaXplKHBhdGgpO1xyXG59XHJcbiJdfQ==