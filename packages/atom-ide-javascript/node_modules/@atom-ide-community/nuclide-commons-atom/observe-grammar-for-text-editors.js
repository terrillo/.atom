"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = observeGrammarForTextEditors;

var _atom = require("atom");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const GRAMMAR_CHANGE_EVENT = 'grammar-change';
/**
 * A singleton that listens to grammar changes in all text editors.
 */

class GrammarForTextEditorsListener {
  constructor() {
    this._emitter = void 0;
    this._subscriptions = void 0;
    this._emitter = new _atom.Emitter();
    this._subscriptions = new _UniversalDisposable.default();

    this._subscriptions.add(this._emitter, atom.workspace.observeTextEditors(textEditor => {
      this._subscriptions.addUntilDestroyed(textEditor, textEditor.observeGrammar(grammar => {
        this._emitter.emit(GRAMMAR_CHANGE_EVENT, textEditor);
      }));
    }));
  }

  observeGrammarForTextEditors(fn) {
    function fnWithGrammar(textEditor) {
      fn(textEditor, textEditor.getGrammar());
    } // The event was already handled before `fn` was added to the emitter, so
    // we need to call it on all the existing editors.


    atom.workspace.getTextEditors().forEach(fnWithGrammar);
    return this._emitter.on(GRAMMAR_CHANGE_EVENT, fnWithGrammar);
  }

  dispose() {
    this._subscriptions.dispose();
  }

}

let grammarForTextEditorsListener;
/**
 * Use this to perform an action on every text editor with its latest grammar.
 *
 * @param fn This is called once for every text editor, and then again every
 * time it changes to a grammar.
 */

function observeGrammarForTextEditors(fn) {
  if (!grammarForTextEditorsListener) {
    grammarForTextEditorsListener = new GrammarForTextEditorsListener();
  }

  return grammarForTextEditorsListener.observeGrammarForTextEditors(fn);
}

if (atom.inSpecMode()) {
  observeGrammarForTextEditors.__reset__ = function () {
    if (grammarForTextEditorsListener) {
      grammarForTextEditorsListener.dispose();
      grammarForTextEditorsListener = null;
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vb2JzZXJ2ZS1ncmFtbWFyLWZvci10ZXh0LWVkaXRvcnMuanMiXSwibmFtZXMiOlsiR1JBTU1BUl9DSEFOR0VfRVZFTlQiLCJHcmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lciIsImNvbnN0cnVjdG9yIiwiX2VtaXR0ZXIiLCJfc3Vic2NyaXB0aW9ucyIsIkVtaXR0ZXIiLCJVbml2ZXJzYWxEaXNwb3NhYmxlIiwiYWRkIiwiYXRvbSIsIndvcmtzcGFjZSIsIm9ic2VydmVUZXh0RWRpdG9ycyIsInRleHRFZGl0b3IiLCJhZGRVbnRpbERlc3Ryb3llZCIsIm9ic2VydmVHcmFtbWFyIiwiZ3JhbW1hciIsImVtaXQiLCJvYnNlcnZlR3JhbW1hckZvclRleHRFZGl0b3JzIiwiZm4iLCJmbldpdGhHcmFtbWFyIiwiZ2V0R3JhbW1hciIsImdldFRleHRFZGl0b3JzIiwiZm9yRWFjaCIsIm9uIiwiZGlzcG9zZSIsImdyYW1tYXJGb3JUZXh0RWRpdG9yc0xpc3RlbmVyIiwiaW5TcGVjTW9kZSIsIl9fcmVzZXRfXyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUNBOzs7O0FBYkE7Ozs7Ozs7Ozs7O0FBZUEsTUFBTUEsb0JBQW9CLEdBQUcsZ0JBQTdCO0FBRUE7Ozs7QUFHQSxNQUFNQyw2QkFBTixDQUFvQztBQUlsQ0MsRUFBQUEsV0FBVyxHQUFHO0FBQUEsU0FIZEMsUUFHYztBQUFBLFNBRmRDLGNBRWM7QUFDWixTQUFLRCxRQUFMLEdBQWdCLElBQUlFLGFBQUosRUFBaEI7QUFDQSxTQUFLRCxjQUFMLEdBQXNCLElBQUlFLDRCQUFKLEVBQXRCOztBQUNBLFNBQUtGLGNBQUwsQ0FBb0JHLEdBQXBCLENBQ0UsS0FBS0osUUFEUCxFQUVFSyxJQUFJLENBQUNDLFNBQUwsQ0FBZUMsa0JBQWYsQ0FBa0NDLFVBQVUsSUFBSTtBQUM5QyxXQUFLUCxjQUFMLENBQW9CUSxpQkFBcEIsQ0FDRUQsVUFERixFQUVFQSxVQUFVLENBQUNFLGNBQVgsQ0FBMEJDLE9BQU8sSUFBSTtBQUNuQyxhQUFLWCxRQUFMLENBQWNZLElBQWQsQ0FBbUJmLG9CQUFuQixFQUF5Q1csVUFBekM7QUFDRCxPQUZELENBRkY7QUFNRCxLQVBELENBRkY7QUFXRDs7QUFFREssRUFBQUEsNEJBQTRCLENBQzFCQyxFQUQwQixFQUViO0FBQ2IsYUFBU0MsYUFBVCxDQUF1QlAsVUFBdkIsRUFBbUM7QUFDakNNLE1BQUFBLEVBQUUsQ0FBQ04sVUFBRCxFQUFhQSxVQUFVLENBQUNRLFVBQVgsRUFBYixDQUFGO0FBQ0QsS0FIWSxDQUtiO0FBQ0E7OztBQUNBWCxJQUFBQSxJQUFJLENBQUNDLFNBQUwsQ0FBZVcsY0FBZixHQUFnQ0MsT0FBaEMsQ0FBd0NILGFBQXhDO0FBQ0EsV0FBTyxLQUFLZixRQUFMLENBQWNtQixFQUFkLENBQWlCdEIsb0JBQWpCLEVBQXVDa0IsYUFBdkMsQ0FBUDtBQUNEOztBQUVESyxFQUFBQSxPQUFPLEdBQVM7QUFDZCxTQUFLbkIsY0FBTCxDQUFvQm1CLE9BQXBCO0FBQ0Q7O0FBbkNpQzs7QUFzQ3BDLElBQUlDLDZCQUFKO0FBRUE7Ozs7Ozs7QUFNZSxTQUFTUiw0QkFBVCxDQUNiQyxFQURhLEVBRUE7QUFDYixNQUFJLENBQUNPLDZCQUFMLEVBQW9DO0FBQ2xDQSxJQUFBQSw2QkFBNkIsR0FBRyxJQUFJdkIsNkJBQUosRUFBaEM7QUFDRDs7QUFDRCxTQUFPdUIsNkJBQTZCLENBQUNSLDRCQUE5QixDQUEyREMsRUFBM0QsQ0FBUDtBQUNEOztBQUVELElBQUlULElBQUksQ0FBQ2lCLFVBQUwsRUFBSixFQUF1QjtBQUNyQlQsRUFBQUEsNEJBQTRCLENBQUNVLFNBQTdCLEdBQXlDLFlBQVc7QUFDbEQsUUFBSUYsNkJBQUosRUFBbUM7QUFDakNBLE1BQUFBLDZCQUE2QixDQUFDRCxPQUE5QjtBQUNBQyxNQUFBQSw2QkFBNkIsR0FBRyxJQUFoQztBQUNEO0FBQ0YsR0FMRDtBQU1EIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHtFbWl0dGVyfSBmcm9tICdhdG9tJztcclxuaW1wb3J0IFVuaXZlcnNhbERpc3Bvc2FibGUgZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvVW5pdmVyc2FsRGlzcG9zYWJsZSc7XHJcblxyXG5jb25zdCBHUkFNTUFSX0NIQU5HRV9FVkVOVCA9ICdncmFtbWFyLWNoYW5nZSc7XHJcblxyXG4vKipcclxuICogQSBzaW5nbGV0b24gdGhhdCBsaXN0ZW5zIHRvIGdyYW1tYXIgY2hhbmdlcyBpbiBhbGwgdGV4dCBlZGl0b3JzLlxyXG4gKi9cclxuY2xhc3MgR3JhbW1hckZvclRleHRFZGl0b3JzTGlzdGVuZXIge1xyXG4gIF9lbWl0dGVyOiBFbWl0dGVyO1xyXG4gIF9zdWJzY3JpcHRpb25zOiBVbml2ZXJzYWxEaXNwb3NhYmxlO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xyXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG5ldyBVbml2ZXJzYWxEaXNwb3NhYmxlKCk7XHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmFkZChcclxuICAgICAgdGhpcy5fZW1pdHRlcixcclxuICAgICAgYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKHRleHRFZGl0b3IgPT4ge1xyXG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuYWRkVW50aWxEZXN0cm95ZWQoXHJcbiAgICAgICAgICB0ZXh0RWRpdG9yLFxyXG4gICAgICAgICAgdGV4dEVkaXRvci5vYnNlcnZlR3JhbW1hcihncmFtbWFyID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KEdSQU1NQVJfQ0hBTkdFX0VWRU5ULCB0ZXh0RWRpdG9yKTtcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9ic2VydmVHcmFtbWFyRm9yVGV4dEVkaXRvcnMoXHJcbiAgICBmbjogKHRleHRFZGl0b3I6IFRleHRFZGl0b3IsIGdyYW1tYXI6IGF0b20kR3JhbW1hcikgPT4gdm9pZCxcclxuICApOiBJRGlzcG9zYWJsZSB7XHJcbiAgICBmdW5jdGlvbiBmbldpdGhHcmFtbWFyKHRleHRFZGl0b3IpIHtcclxuICAgICAgZm4odGV4dEVkaXRvciwgdGV4dEVkaXRvci5nZXRHcmFtbWFyKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoZSBldmVudCB3YXMgYWxyZWFkeSBoYW5kbGVkIGJlZm9yZSBgZm5gIHdhcyBhZGRlZCB0byB0aGUgZW1pdHRlciwgc29cclxuICAgIC8vIHdlIG5lZWQgdG8gY2FsbCBpdCBvbiBhbGwgdGhlIGV4aXN0aW5nIGVkaXRvcnMuXHJcbiAgICBhdG9tLndvcmtzcGFjZS5nZXRUZXh0RWRpdG9ycygpLmZvckVhY2goZm5XaXRoR3JhbW1hcik7XHJcbiAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5vbihHUkFNTUFSX0NIQU5HRV9FVkVOVCwgZm5XaXRoR3JhbW1hcik7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5sZXQgZ3JhbW1hckZvclRleHRFZGl0b3JzTGlzdGVuZXI6ID9HcmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lcjtcclxuXHJcbi8qKlxyXG4gKiBVc2UgdGhpcyB0byBwZXJmb3JtIGFuIGFjdGlvbiBvbiBldmVyeSB0ZXh0IGVkaXRvciB3aXRoIGl0cyBsYXRlc3QgZ3JhbW1hci5cclxuICpcclxuICogQHBhcmFtIGZuIFRoaXMgaXMgY2FsbGVkIG9uY2UgZm9yIGV2ZXJ5IHRleHQgZWRpdG9yLCBhbmQgdGhlbiBhZ2FpbiBldmVyeVxyXG4gKiB0aW1lIGl0IGNoYW5nZXMgdG8gYSBncmFtbWFyLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb2JzZXJ2ZUdyYW1tYXJGb3JUZXh0RWRpdG9ycyhcclxuICBmbjogKHRleHRFZGl0b3I6IFRleHRFZGl0b3IsIGdyYW1tYXI6IGF0b20kR3JhbW1hcikgPT4gdm9pZCxcclxuKTogSURpc3Bvc2FibGUge1xyXG4gIGlmICghZ3JhbW1hckZvclRleHRFZGl0b3JzTGlzdGVuZXIpIHtcclxuICAgIGdyYW1tYXJGb3JUZXh0RWRpdG9yc0xpc3RlbmVyID0gbmV3IEdyYW1tYXJGb3JUZXh0RWRpdG9yc0xpc3RlbmVyKCk7XHJcbiAgfVxyXG4gIHJldHVybiBncmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lci5vYnNlcnZlR3JhbW1hckZvclRleHRFZGl0b3JzKGZuKTtcclxufVxyXG5cclxuaWYgKGF0b20uaW5TcGVjTW9kZSgpKSB7XHJcbiAgb2JzZXJ2ZUdyYW1tYXJGb3JUZXh0RWRpdG9ycy5fX3Jlc2V0X18gPSBmdW5jdGlvbigpIHtcclxuICAgIGlmIChncmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lcikge1xyXG4gICAgICBncmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lci5kaXNwb3NlKCk7XHJcbiAgICAgIGdyYW1tYXJGb3JUZXh0RWRpdG9yc0xpc3RlbmVyID0gbnVsbDtcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiJdfQ==