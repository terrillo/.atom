"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _anser = _interopRequireDefault(require("anser"));

var _escapeCarriage = _interopRequireDefault(require("escape-carriage"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function ansiToJSON(input, useClasses) {
  const classes = useClasses == null || !useClasses ? false : useClasses;
  return _anser.default.ansiToJson((0, _escapeCarriage.default)(input), {
    use_classes: classes,
    json: true,
    remove_empty: true
  });
} // make sure


function ansiJSONtoStyleBundle(ansiBundle, colorStyle) {
  const style = {};

  if (ansiBundle.bg) {
    style.backgroundColor = colorStyle != null ? `rgb(${colorStyle[ansiBundle.bg]})` : `rgb(${ansiBundle.bg})`;
  }

  if (ansiBundle.fg) {
    style.color = colorStyle != null ? `rgb(${colorStyle[ansiBundle.fg]})` : `rgb(${ansiBundle.fg})`;
  } else {
    if (colorStyle != null) {
      style.color = `rgb(${colorStyle.default})`;
    }
  }

  return {
    content: ansiBundle.content,
    style
  };
}

function ansiToInlineStyle(text, useClasses, colorStyle) {
  return ansiToJSON(text, useClasses).map(input => ansiJSONtoStyleBundle(input, colorStyle));
}

function defaultRenderSegment({
  key,
  style,
  content
}) {
  return /*#__PURE__*/React.createElement("span", {
    key: key,
    style: style
  }, content);
}

class Ansi extends React.PureComponent {
  render() {
    const {
      useClasses,
      colorStyle,
      children,
      renderSegment = defaultRenderSegment,
      ...passThroughProps
    } = this.props;
    return /*#__PURE__*/React.createElement("code", passThroughProps, ansiToInlineStyle(children, useClasses, colorStyle).map(({
      style,
      content
    }, key) => renderSegment({
      key: String(key),
      style,
      content
    })));
  }

}

exports.default = Ansi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0Fuc2kuanMiXSwibmFtZXMiOlsiYW5zaVRvSlNPTiIsImlucHV0IiwidXNlQ2xhc3NlcyIsImNsYXNzZXMiLCJBbnNlciIsImFuc2lUb0pzb24iLCJ1c2VfY2xhc3NlcyIsImpzb24iLCJyZW1vdmVfZW1wdHkiLCJhbnNpSlNPTnRvU3R5bGVCdW5kbGUiLCJhbnNpQnVuZGxlIiwiY29sb3JTdHlsZSIsInN0eWxlIiwiYmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJmZyIsImNvbG9yIiwiZGVmYXVsdCIsImNvbnRlbnQiLCJhbnNpVG9JbmxpbmVTdHlsZSIsInRleHQiLCJtYXAiLCJkZWZhdWx0UmVuZGVyU2VnbWVudCIsImtleSIsIkFuc2kiLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJyZW5kZXIiLCJjaGlsZHJlbiIsInJlbmRlclNlZ21lbnQiLCJwYXNzVGhyb3VnaFByb3BzIiwicHJvcHMiLCJTdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFkQTs7Ozs7Ozs7Ozs7QUE2QkEsU0FBU0EsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkJDLFVBQTNCLEVBQXVDO0FBQ3JDLFFBQU1DLE9BQU8sR0FBR0QsVUFBVSxJQUFJLElBQWQsSUFBc0IsQ0FBQ0EsVUFBdkIsR0FBb0MsS0FBcEMsR0FBNENBLFVBQTVEO0FBQ0EsU0FBT0UsZUFBTUMsVUFBTixDQUFpQiw2QkFBcUJKLEtBQXJCLENBQWpCLEVBQThDO0FBQ25ESyxJQUFBQSxXQUFXLEVBQUVILE9BRHNDO0FBRW5ESSxJQUFBQSxJQUFJLEVBQUUsSUFGNkM7QUFHbkRDLElBQUFBLFlBQVksRUFBRTtBQUhxQyxHQUE5QyxDQUFQO0FBS0QsQyxDQUVEOzs7QUFDQSxTQUFTQyxxQkFBVCxDQUErQkMsVUFBL0IsRUFBMkNDLFVBQTNDLEVBQXVEO0FBQ3JELFFBQU1DLEtBQUssR0FBRyxFQUFkOztBQUNBLE1BQUlGLFVBQVUsQ0FBQ0csRUFBZixFQUFtQjtBQUNqQkQsSUFBQUEsS0FBSyxDQUFDRSxlQUFOLEdBQ0VILFVBQVUsSUFBSSxJQUFkLEdBQ0ssT0FBTUEsVUFBVSxDQUFDRCxVQUFVLENBQUNHLEVBQVosQ0FBZ0IsR0FEckMsR0FFSyxPQUFNSCxVQUFVLENBQUNHLEVBQUcsR0FIM0I7QUFJRDs7QUFDRCxNQUFJSCxVQUFVLENBQUNLLEVBQWYsRUFBbUI7QUFDakJILElBQUFBLEtBQUssQ0FBQ0ksS0FBTixHQUNFTCxVQUFVLElBQUksSUFBZCxHQUNLLE9BQU1BLFVBQVUsQ0FBQ0QsVUFBVSxDQUFDSyxFQUFaLENBQWdCLEdBRHJDLEdBRUssT0FBTUwsVUFBVSxDQUFDSyxFQUFHLEdBSDNCO0FBSUQsR0FMRCxNQUtPO0FBQ0wsUUFBSUosVUFBVSxJQUFJLElBQWxCLEVBQXdCO0FBQ3RCQyxNQUFBQSxLQUFLLENBQUNJLEtBQU4sR0FBZSxPQUFNTCxVQUFVLENBQUNNLE9BQVEsR0FBeEM7QUFDRDtBQUNGOztBQUNELFNBQU87QUFDTEMsSUFBQUEsT0FBTyxFQUFFUixVQUFVLENBQUNRLE9BRGY7QUFFTE4sSUFBQUE7QUFGSyxHQUFQO0FBSUQ7O0FBRUQsU0FBU08saUJBQVQsQ0FBMkJDLElBQTNCLEVBQWlDbEIsVUFBakMsRUFBNkNTLFVBQTdDLEVBQXlEO0FBQ3ZELFNBQU9YLFVBQVUsQ0FBQ29CLElBQUQsRUFBT2xCLFVBQVAsQ0FBVixDQUE2Qm1CLEdBQTdCLENBQWlDcEIsS0FBSyxJQUMzQ1EscUJBQXFCLENBQUNSLEtBQUQsRUFBUVUsVUFBUixDQURoQixDQUFQO0FBR0Q7O0FBRUQsU0FBU1csb0JBQVQsQ0FBOEI7QUFBQ0MsRUFBQUEsR0FBRDtBQUFNWCxFQUFBQSxLQUFOO0FBQWFNLEVBQUFBO0FBQWIsQ0FBOUIsRUFBeUU7QUFDdkUsc0JBQ0U7QUFBTSxJQUFBLEdBQUcsRUFBRUssR0FBWDtBQUFnQixJQUFBLEtBQUssRUFBRVg7QUFBdkIsS0FDR00sT0FESCxDQURGO0FBS0Q7O0FBRWMsTUFBTU0sSUFBTixTQUFtQkMsS0FBSyxDQUFDQyxhQUF6QixDQUE4QztBQUMzREMsRUFBQUEsTUFBTSxHQUFHO0FBQ1AsVUFBTTtBQUNKekIsTUFBQUEsVUFESTtBQUVKUyxNQUFBQSxVQUZJO0FBR0ppQixNQUFBQSxRQUhJO0FBSUpDLE1BQUFBLGFBQWEsR0FBR1Asb0JBSlo7QUFLSixTQUFHUTtBQUxDLFFBTUYsS0FBS0MsS0FOVDtBQU9BLHdCQUNFLDRCQUFVRCxnQkFBVixFQUNHWCxpQkFBaUIsQ0FBQ1MsUUFBRCxFQUFXMUIsVUFBWCxFQUF1QlMsVUFBdkIsQ0FBakIsQ0FBb0RVLEdBQXBELENBQ0MsQ0FBQztBQUFDVCxNQUFBQSxLQUFEO0FBQVFNLE1BQUFBO0FBQVIsS0FBRCxFQUFtQkssR0FBbkIsS0FDRU0sYUFBYSxDQUFDO0FBQUNOLE1BQUFBLEdBQUcsRUFBRVMsTUFBTSxDQUFDVCxHQUFELENBQVo7QUFBbUJYLE1BQUFBLEtBQW5CO0FBQTBCTSxNQUFBQTtBQUExQixLQUFELENBRmhCLENBREgsQ0FERjtBQVFEOztBQWpCMEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBBbnNlciBmcm9tICdhbnNlcic7XHJcbmltcG9ydCBlc2NhcGVDYXJyaWFnZVJldHVybiBmcm9tICdlc2NhcGUtY2FycmlhZ2UnO1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICB1c2VDbGFzc2VzPzogYm9vbGVhbixcclxuICBjb2xvclN0eWxlPzoge1tjb2xvcjogc3RyaW5nXTogc3RyaW5nfSxcclxuICBjaGlsZHJlbj86IHN0cmluZyxcclxuICByZW5kZXJTZWdtZW50PzogUmVuZGVyU2VnbWVudFByb3BzID0+IFJlYWN0Lk5vZGUsXHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBSZW5kZXJTZWdtZW50UHJvcHMgPSB7XHJcbiAga2V5OiBzdHJpbmcsXHJcbiAgc3R5bGU6IE9iamVjdCxcclxuICBjb250ZW50OiBzdHJpbmcsXHJcbn07XHJcblxyXG5mdW5jdGlvbiBhbnNpVG9KU09OKGlucHV0LCB1c2VDbGFzc2VzKSB7XHJcbiAgY29uc3QgY2xhc3NlcyA9IHVzZUNsYXNzZXMgPT0gbnVsbCB8fCAhdXNlQ2xhc3NlcyA/IGZhbHNlIDogdXNlQ2xhc3NlcztcclxuICByZXR1cm4gQW5zZXIuYW5zaVRvSnNvbihlc2NhcGVDYXJyaWFnZVJldHVybihpbnB1dCksIHtcclxuICAgIHVzZV9jbGFzc2VzOiBjbGFzc2VzLFxyXG4gICAganNvbjogdHJ1ZSxcclxuICAgIHJlbW92ZV9lbXB0eTogdHJ1ZSxcclxuICB9KTtcclxufVxyXG5cclxuLy8gbWFrZSBzdXJlXHJcbmZ1bmN0aW9uIGFuc2lKU09OdG9TdHlsZUJ1bmRsZShhbnNpQnVuZGxlLCBjb2xvclN0eWxlKSB7XHJcbiAgY29uc3Qgc3R5bGUgPSB7fTtcclxuICBpZiAoYW5zaUJ1bmRsZS5iZykge1xyXG4gICAgc3R5bGUuYmFja2dyb3VuZENvbG9yID1cclxuICAgICAgY29sb3JTdHlsZSAhPSBudWxsXHJcbiAgICAgICAgPyBgcmdiKCR7Y29sb3JTdHlsZVthbnNpQnVuZGxlLmJnXX0pYFxyXG4gICAgICAgIDogYHJnYigke2Fuc2lCdW5kbGUuYmd9KWA7XHJcbiAgfVxyXG4gIGlmIChhbnNpQnVuZGxlLmZnKSB7XHJcbiAgICBzdHlsZS5jb2xvciA9XHJcbiAgICAgIGNvbG9yU3R5bGUgIT0gbnVsbFxyXG4gICAgICAgID8gYHJnYigke2NvbG9yU3R5bGVbYW5zaUJ1bmRsZS5mZ119KWBcclxuICAgICAgICA6IGByZ2IoJHthbnNpQnVuZGxlLmZnfSlgO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoY29sb3JTdHlsZSAhPSBudWxsKSB7XHJcbiAgICAgIHN0eWxlLmNvbG9yID0gYHJnYigke2NvbG9yU3R5bGUuZGVmYXVsdH0pYDtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHtcclxuICAgIGNvbnRlbnQ6IGFuc2lCdW5kbGUuY29udGVudCxcclxuICAgIHN0eWxlLFxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFuc2lUb0lubGluZVN0eWxlKHRleHQsIHVzZUNsYXNzZXMsIGNvbG9yU3R5bGUpIHtcclxuICByZXR1cm4gYW5zaVRvSlNPTih0ZXh0LCB1c2VDbGFzc2VzKS5tYXAoaW5wdXQgPT5cclxuICAgIGFuc2lKU09OdG9TdHlsZUJ1bmRsZShpbnB1dCwgY29sb3JTdHlsZSksXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVmYXVsdFJlbmRlclNlZ21lbnQoe2tleSwgc3R5bGUsIGNvbnRlbnR9OiBSZW5kZXJTZWdtZW50UHJvcHMpIHtcclxuICByZXR1cm4gKFxyXG4gICAgPHNwYW4ga2V5PXtrZXl9IHN0eWxlPXtzdHlsZX0+XHJcbiAgICAgIHtjb250ZW50fVxyXG4gICAgPC9zcGFuPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuc2kgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzPiB7XHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICB1c2VDbGFzc2VzLFxyXG4gICAgICBjb2xvclN0eWxlLFxyXG4gICAgICBjaGlsZHJlbixcclxuICAgICAgcmVuZGVyU2VnbWVudCA9IGRlZmF1bHRSZW5kZXJTZWdtZW50LFxyXG4gICAgICAuLi5wYXNzVGhyb3VnaFByb3BzXHJcbiAgICB9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxjb2RlIHsuLi5wYXNzVGhyb3VnaFByb3BzfT5cclxuICAgICAgICB7YW5zaVRvSW5saW5lU3R5bGUoY2hpbGRyZW4sIHVzZUNsYXNzZXMsIGNvbG9yU3R5bGUpLm1hcChcclxuICAgICAgICAgICh7c3R5bGUsIGNvbnRlbnR9LCBrZXkpID0+XHJcbiAgICAgICAgICAgIHJlbmRlclNlZ21lbnQoe2tleTogU3RyaW5nKGtleSksIHN0eWxlLCBjb250ZW50fSksXHJcbiAgICAgICAgKX1cclxuICAgICAgPC9jb2RlPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19