"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = exports.ButtonTypes = exports.ButtonSizes = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _string = require("@atom-ide-community/nuclide-commons/string");

var _lodash = require("lodash");

var _addTooltip = _interopRequireDefault(require("./addTooltip"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ButtonSizes = Object.freeze({
  EXTRA_SMALL: 'EXTRA_SMALL',
  SMALL: 'SMALL',
  LARGE: 'LARGE'
});
exports.ButtonSizes = ButtonSizes;
const ButtonTypes = Object.freeze({
  PRIMARY: 'PRIMARY',
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR'
});
exports.ButtonTypes = ButtonTypes;
const ButtonSizeClassnames = Object.freeze({
  EXTRA_SMALL: 'btn-xs',
  SMALL: 'btn-sm',
  LARGE: 'btn-lg'
});
const ButtonTypeClassnames = Object.freeze({
  PRIMARY: 'btn-primary',
  INFO: 'btn-info',
  SUCCESS: 'btn-success',
  WARNING: 'btn-warning',
  ERROR: 'btn-error'
});
/**
 * Generic Button wrapper.
 */

class Button extends React.Component {
  constructor(...args) {
    super(...args);
    this._button = void 0;
    this._removeTooltip = void 0;

    this._onRefChange = button => {
      const {
        disabled,
        onButtonDOMNodeChange,
        tooltip
      } = this.props;
      this._button = button;

      if (onButtonDOMNodeChange) {
        onButtonDOMNodeChange(this._button);
      } // When the element goes away (e.g. on unmount), remove the tooltip.


      if (button == null && this._removeTooltip != null) {
        this._removeTooltip();
      }

      if (!disabled && tooltip && button != null) {
        const updateTooltip = (0, _addTooltip.default)(tooltip);
        updateTooltip(button);

        this._removeTooltip = () => {
          updateTooltip(null);
          this._removeTooltip = null;
        };
      }
    };
  }

  focus() {
    const node = _reactDom.default.findDOMNode(this);

    if (node == null) {
      return;
    } // $FlowFixMe


    node.focus();
  }

  render() {
    const {
      disabled,
      icon,
      buttonType,
      selected,
      size,
      children,
      className,
      wrapperElement,
      tooltip,
      ...remainingProps
    } = this.props;
    const buttonProps = (0, _lodash.omit)(remainingProps, 'onButtonDOMNodeChange');
    const sizeClassname = size == null ? '' : ButtonSizeClassnames[size] || '';
    const buttonTypeClassname = buttonType == null ? '' : ButtonTypeClassnames[buttonType] || '';
    const titleToolTip = tooltip && disabled ? tooltip.title : null;
    const newClassName = (0, _classnames.default)(className, 'btn', {
      [`icon icon-${(0, _string.maybeToString)(icon)}`]: icon != null,
      [sizeClassname]: size != null,
      selected,
      [buttonTypeClassname]: buttonType != null
    });
    const Wrapper = wrapperElement == null ? 'button' : wrapperElement;
    return /*#__PURE__*/React.createElement(Wrapper, _extends({
      className: newClassName // eslint-disable-next-line nuclide-internal/jsx-simple-callback-refs
      ,
      ref: this._onRefChange,
      disabled: disabled
    }, buttonProps, {
      title: titleToolTip
    }), children);
  }

}

exports.Button = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,