"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateSelector = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var React = _interopRequireWildcard(require("react"));

var _dateRangePicker = require("tiny-date-picker/dist/date-range-picker");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global Node */
class DateSelector extends React.Component {
  constructor(props) {
    super(props);
    this._refEl = void 0;
    this._datePicker = void 0;
    this._disposable = void 0;

    this._openDatePicker = () => {
      this.setState({
        isOpen: true
      });
    };

    this._closeDatePicker = () => {
      this.setState({
        isOpen: false
      });
      this._datePicker = null;
    };

    this._handleWindowClick = e => {
      if (!(e.target instanceof Node)) {
        return;
      }

      if (this._refEl.current && !this._refEl.current.contains(e.target)) {
        this._closeDatePicker();
      }
    };

    this._handleLostFocus = e => {
      if (!Boolean(this.props.showOnlyOnFocus)) {
        return;
      }

      const {
        target,
        relatedTarget
      } = e;

      if (!(target instanceof Node && (relatedTarget instanceof Node || relatedTarget == null))) {
        return;
      }

      if (this._refEl.current && !this._refEl.current.contains(target) && !this._refEl.current.contains(relatedTarget)) {
        this._closeDatePicker();
      }
    };

    this._checkDatesAreEqual = (date1, date2) => {
      const time1 = date1 ? date1.getTime() : null;
      const time2 = date2 ? date2.getTime() : null;
      return time1 === time2;
    };

    this._createDatePicker = hilightedDate => {
      if (!this._refEl.current) {
        return;
      }

      let {
        start,
        end
      } = this.props;
      const {
        earliestDate,
        latestDate
      } = this.props; // DateRangePicker can never have end without start

      if (start == null) {
        start = end;
        end = null;
      }

      this._datePicker = (0, _dateRangePicker.DateRangePicker)(this._refEl.current, {
        startOpts: {
          hilightedDate: hilightedDate || start || new Date(),
          min: earliestDate,
          max: latestDate,
          shouldFocusOnRender: false,
          dayOffset: 1
        }
      }).on('statechange', (_, dp) => {
        const newStart = dp.state.start;
        const newEnd = dp.state.end;

        if (!Boolean(this.props.selectRange)) {
          if (!this._checkDatesAreEqual(newStart, newEnd)) {
            dp.setState({
              start: newStart,
              end: newStart
            });
            return;
          }
        } // Call onDatesChange if new date was selected


        const prevEnd = Boolean(this.props.selectRange) ? this.props.end : this.props.start;

        if (!this._checkDatesAreEqual(this.props.start, newStart) || Boolean(this.props.selectRange) && !this._checkDatesAreEqual(this.props.end, newEnd)) {
          if (newEnd < newStart) {
            this.props.onDatesChange(newEnd, newStart);
          } else {
            this.props.onDatesChange(newStart, newEnd);
          }
        }

        if (Boolean(this.props.showOnlyOnFocus) && newEnd != null && !this._checkDatesAreEqual(newEnd, prevEnd)) {
          this._closeDatePicker();
        }
      });

      this._datePicker.setState({
        start,
        end
      });
    };

    this.state = {
      isOpen: Boolean(props.defaultOpen) || !props.showOnlyOnFocus
    };
    this._refEl = /*#__PURE__*/React.createRef();
  }

  componentDidMount() {
    if (Boolean(this.props.showOnlyOnFocus)) {
      this._disposable = new _UniversalDisposable.default(_rxjsCompatUmdMin.Observable.fromEvent(window, 'mousedown').subscribe(this._handleWindowClick));
    }

    this._createDatePicker();
  }

  componentDidUpdate(prevProps, prevState) {
    if (!this.state.isOpen) {
      return;
    }

    const {
      start,
      end
    } = this.props;

    if (!this._checkDatesAreEqual(start, prevProps.start)) {
      this._createDatePicker(start);
    } else if (!this._checkDatesAreEqual(end, prevProps.end)) {
      this._createDatePicker(end);
    } else if (!this._datePicker) {
      this._createDatePicker();
    }
  }

  componentWillUnmount() {
    if (this._disposable) {
      this._disposable.dispose();
    }
  }

  render() {
    const classname = (0, _classnames.default)(this.props.className, 'nuclide-ui-date-selector', {
      'nuclide-ui-dropdown-date-selector': this.props.showOnlyOnFocus
    });
    return /*#__PURE__*/React.createElement("div", {
      onFocus: this._openDatePicker,
      onBlur: this._handleLostFocus
    }, this.props.children, this.state.isOpen ? /*#__PURE__*/React.createElement("div", {
      className: classname,
      ref: this._refEl
    }) : null);
  }

}

exports.DateSelector = DateSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,