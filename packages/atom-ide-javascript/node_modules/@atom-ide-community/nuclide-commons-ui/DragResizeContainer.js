"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DragResizeContainer = void 0;

var React = _interopRequireWildcard(require("react"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class DragResizeContainer extends React.Component {
  constructor(props) {
    super(props);
    this._disposables = void 0;
    this._resizeStarts = void 0;
    this._node = void 0;
    this._resizeStarts = new _rxjsCompatUmdMin.Subject();
    this.state = {
      height: null,
      isDragging: false,
      lastMouseDown: 0
    };
  }

  componentDidMount() {
    const el = (0, _nullthrows.default)(this._node);
    this._disposables = new _UniversalDisposable.default(this._resizeStarts.switchMap(startEvent => {
      // Only fire on primary mouse button
      if (startEvent.button !== 0) {
        return _rxjsCompatUmdMin.Observable.empty();
      } // Abort everything if double click


      const now = Date.now();

      if (now - this.state.lastMouseDown < 500) {
        this.setState({
          height: null,
          isDragging: false,
          lastMouseDown: now
        });
        return _rxjsCompatUmdMin.Observable.empty();
      }

      this.setState({
        isDragging: true,
        lastMouseDown: now
      });
      const startY = startEvent.pageY;
      const startHeight = el.getBoundingClientRect().height;
      return _rxjsCompatUmdMin.Observable.fromEvent(document, 'mousemove').takeUntil(_rxjsCompatUmdMin.Observable.fromEvent(document, 'mouseup')).map(event => {
        const change = event.pageY - startY;
        return startHeight + change;
      }).do({
        complete: () => this.setState({
          isDragging: false
        })
      });
    }).subscribe(height => this.setState({
      height
    })), atom.commands.add(el, 'resize-container:reset-height', () => this.setState({
      height: null
    })), atom.contextMenu.add({
      '.nuclide-ui-drag-resize-container': [{
        label: 'Reset Height',
        command: 'resize-container:reset-height'
      }]
    }));
  }

  componentWillUnmount() {
    this._disposables.dispose();
  }

  render() {
    const {
      height,
      isDragging
    } = this.state;
    const style = {};

    if (height == null) {
      style.maxHeight = '20vh';
    } else {
      style.height = height;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "nuclide-ui-drag-resize-container",
      style: style,
      ref: node => this._node = node
    }, this.props.children, /*#__PURE__*/React.createElement("div", {
      className: "nuclide-ui-drag-resize-container-handle",
      onMouseDown: event => this._resizeStarts.next(event)
    }, /*#__PURE__*/React.createElement("div", {
      className: "nuclide-ui-drag-resize-container-handle-line"
    }), isDragging ? /*#__PURE__*/React.createElement("div", {
      className: "nuclide-ui-drag-resize-container-handle-overlay"
    }) : null));
  }

}

exports.DragResizeContainer = DragResizeContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,