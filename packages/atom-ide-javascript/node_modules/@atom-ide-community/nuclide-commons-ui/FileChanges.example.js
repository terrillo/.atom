"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileChangesExamples = void 0;

var React = _interopRequireWildcard(require("react"));

var _diffparser = _interopRequireDefault(require("diffparser"));

var _FileChanges = _interopRequireDefault(require("./FileChanges"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const sampleUnifiedDiff = `
diff --git a/some/folder/filename.js b/some/folder/filename.js
index abc123..cde456 100644
--- a/some/folder/filename.js
+++ b/some/folder/filename.js
@@ -36,6 +36,7 @@ export type SomeContext = {
   foo: bar,
 };

+import newdep from 'newdep';
 import {bla} from 'bla';
 import {qwe} from 'qwe';
 import {ertyu} from 'ertyu';
@@ -97,11 +98,11 @@ export default class MoreContext extends Something {
   props: Props;
   state: State;

-  thing: Thing;
+  thing: ?Thing;

   constructor(a, b) {
     super(a, b);
-    this.thing = new Thing();
+    this.thing = null;

     const foobar =
       barfoo;
@@ -144,8 +145,20 @@ export default class MoreContext extends Something {
   /**
    * Public API
    */
-  focus(): void {
-    this._getFoo().bar();
+  // comment comment
+  // comment comment
+  // comment comment
+  // comment comment
+  // comment comment
+  setup(): void {
+    invariant(1 === 1);
+    this.foobar();
+  }
+
+  teardown(): void {
+    invariant(this.thing != null);
+    this.thing.foo();
+    this.thing = null;
   }

   // end of hunk
`;

class FileChangesExample extends React.Component {
  render() {
    const diff = (0, _diffparser.default)(sampleUnifiedDiff);
    const changes = diff.map(file => /*#__PURE__*/React.createElement(_FileChanges.default, {
      diff: file,
      key: `${file.from}:${file.to}`
    }));
    return /*#__PURE__*/React.createElement("div", null, changes);
  }

}

const FileChangesExamples = {
  sectionName: 'FileChanges',
  description: 'Displays unified diffs in separate, per-hunk TextEditor instances',
  examples: [{
    title: 'Basic example',
    component: FileChangesExample
  }]
};
exports.FileChangesExamples = FileChangesExamples;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0ZpbGVDaGFuZ2VzLmV4YW1wbGUuanMiXSwibmFtZXMiOlsic2FtcGxlVW5pZmllZERpZmYiLCJGaWxlQ2hhbmdlc0V4YW1wbGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlciIsImRpZmYiLCJjaGFuZ2VzIiwibWFwIiwiZmlsZSIsImZyb20iLCJ0byIsIkZpbGVDaGFuZ2VzRXhhbXBsZXMiLCJzZWN0aW9uTmFtZSIsImRlc2NyaXB0aW9uIiwiZXhhbXBsZXMiLCJ0aXRsZSIsImNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUNBOztBQUNBOzs7Ozs7OztBQWRBOzs7Ozs7Ozs7OztBQWdCQSxNQUFNQSxpQkFBaUIsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FBM0I7O0FBb0RBLE1BQU1DLGtCQUFOLFNBQWlDQyxLQUFLLENBQUNDLFNBQXZDLENBQXFEO0FBQ25EQyxFQUFBQSxNQUFNLEdBQWU7QUFDbkIsVUFBTUMsSUFBSSxHQUFHLHlCQUFNTCxpQkFBTixDQUFiO0FBQ0EsVUFBTU0sT0FBTyxHQUFHRCxJQUFJLENBQUNFLEdBQUwsQ0FBU0MsSUFBSSxpQkFDM0Isb0JBQUMsb0JBQUQ7QUFBYSxNQUFBLElBQUksRUFBRUEsSUFBbkI7QUFBeUIsTUFBQSxHQUFHLEVBQUcsR0FBRUEsSUFBSSxDQUFDQyxJQUFLLElBQUdELElBQUksQ0FBQ0UsRUFBRztBQUF0RCxNQURjLENBQWhCO0FBR0Esd0JBQU8saUNBQU1KLE9BQU4sQ0FBUDtBQUNEOztBQVBrRDs7QUFVOUMsTUFBTUssbUJBQW1CLEdBQUc7QUFDakNDLEVBQUFBLFdBQVcsRUFBRSxhQURvQjtBQUVqQ0MsRUFBQUEsV0FBVyxFQUNULG1FQUgrQjtBQUlqQ0MsRUFBQUEsUUFBUSxFQUFFLENBQ1I7QUFDRUMsSUFBQUEsS0FBSyxFQUFFLGVBRFQ7QUFFRUMsSUFBQUEsU0FBUyxFQUFFZjtBQUZiLEdBRFE7QUFKdUIsQ0FBNUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgcGFyc2UgZnJvbSAnZGlmZnBhcnNlcic7XHJcbmltcG9ydCBGaWxlQ2hhbmdlcyBmcm9tICcuL0ZpbGVDaGFuZ2VzJztcclxuXHJcbmNvbnN0IHNhbXBsZVVuaWZpZWREaWZmID0gYFxyXG5kaWZmIC0tZ2l0IGEvc29tZS9mb2xkZXIvZmlsZW5hbWUuanMgYi9zb21lL2ZvbGRlci9maWxlbmFtZS5qc1xyXG5pbmRleCBhYmMxMjMuLmNkZTQ1NiAxMDA2NDRcclxuLS0tIGEvc29tZS9mb2xkZXIvZmlsZW5hbWUuanNcclxuKysrIGIvc29tZS9mb2xkZXIvZmlsZW5hbWUuanNcclxuQEAgLTM2LDYgKzM2LDcgQEAgZXhwb3J0IHR5cGUgU29tZUNvbnRleHQgPSB7XHJcbiAgIGZvbzogYmFyLFxyXG4gfTtcclxuXHJcbitpbXBvcnQgbmV3ZGVwIGZyb20gJ25ld2RlcCc7XHJcbiBpbXBvcnQge2JsYX0gZnJvbSAnYmxhJztcclxuIGltcG9ydCB7cXdlfSBmcm9tICdxd2UnO1xyXG4gaW1wb3J0IHtlcnR5dX0gZnJvbSAnZXJ0eXUnO1xyXG5AQCAtOTcsMTEgKzk4LDExIEBAIGV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vcmVDb250ZXh0IGV4dGVuZHMgU29tZXRoaW5nIHtcclxuICAgcHJvcHM6IFByb3BzO1xyXG4gICBzdGF0ZTogU3RhdGU7XHJcblxyXG4tICB0aGluZzogVGhpbmc7XHJcbisgIHRoaW5nOiA/VGhpbmc7XHJcblxyXG4gICBjb25zdHJ1Y3RvcihhLCBiKSB7XHJcbiAgICAgc3VwZXIoYSwgYik7XHJcbi0gICAgdGhpcy50aGluZyA9IG5ldyBUaGluZygpO1xyXG4rICAgIHRoaXMudGhpbmcgPSBudWxsO1xyXG5cclxuICAgICBjb25zdCBmb29iYXIgPVxyXG4gICAgICAgYmFyZm9vO1xyXG5AQCAtMTQ0LDggKzE0NSwyMCBAQCBleHBvcnQgZGVmYXVsdCBjbGFzcyBNb3JlQ29udGV4dCBleHRlbmRzIFNvbWV0aGluZyB7XHJcbiAgIC8qKlxyXG4gICAgKiBQdWJsaWMgQVBJXHJcbiAgICAqL1xyXG4tICBmb2N1cygpOiB2b2lkIHtcclxuLSAgICB0aGlzLl9nZXRGb28oKS5iYXIoKTtcclxuKyAgLy8gY29tbWVudCBjb21tZW50XHJcbisgIC8vIGNvbW1lbnQgY29tbWVudFxyXG4rICAvLyBjb21tZW50IGNvbW1lbnRcclxuKyAgLy8gY29tbWVudCBjb21tZW50XHJcbisgIC8vIGNvbW1lbnQgY29tbWVudFxyXG4rICBzZXR1cCgpOiB2b2lkIHtcclxuKyAgICBpbnZhcmlhbnQoMSA9PT0gMSk7XHJcbisgICAgdGhpcy5mb29iYXIoKTtcclxuKyAgfVxyXG4rXHJcbisgIHRlYXJkb3duKCk6IHZvaWQge1xyXG4rICAgIGludmFyaWFudCh0aGlzLnRoaW5nICE9IG51bGwpO1xyXG4rICAgIHRoaXMudGhpbmcuZm9vKCk7XHJcbisgICAgdGhpcy50aGluZyA9IG51bGw7XHJcbiAgIH1cclxuXHJcbiAgIC8vIGVuZCBvZiBodW5rXHJcbmA7XHJcblxyXG5jbGFzcyBGaWxlQ2hhbmdlc0V4YW1wbGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30+IHtcclxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XHJcbiAgICBjb25zdCBkaWZmID0gcGFyc2Uoc2FtcGxlVW5pZmllZERpZmYpO1xyXG4gICAgY29uc3QgY2hhbmdlcyA9IGRpZmYubWFwKGZpbGUgPT4gKFxyXG4gICAgICA8RmlsZUNoYW5nZXMgZGlmZj17ZmlsZX0ga2V5PXtgJHtmaWxlLmZyb219OiR7ZmlsZS50b31gfSAvPlxyXG4gICAgKSk7XHJcbiAgICByZXR1cm4gPGRpdj57Y2hhbmdlc308L2Rpdj47XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRmlsZUNoYW5nZXNFeGFtcGxlcyA9IHtcclxuICBzZWN0aW9uTmFtZTogJ0ZpbGVDaGFuZ2VzJyxcclxuICBkZXNjcmlwdGlvbjpcclxuICAgICdEaXNwbGF5cyB1bmlmaWVkIGRpZmZzIGluIHNlcGFyYXRlLCBwZXItaHVuayBUZXh0RWRpdG9yIGluc3RhbmNlcycsXHJcbiAgZXhhbXBsZXM6IFtcclxuICAgIHtcclxuICAgICAgdGl0bGU6ICdCYXNpYyBleGFtcGxlJyxcclxuICAgICAgY29tcG9uZW50OiBGaWxlQ2hhbmdlc0V4YW1wbGUsXHJcbiAgICB9LFxyXG4gIF0sXHJcbn07XHJcbiJdfQ==