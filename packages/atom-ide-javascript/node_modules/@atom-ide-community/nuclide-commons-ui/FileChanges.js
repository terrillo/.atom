"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCustomLineNumberGutter = createCustomLineNumberGutter;
exports.LoadingFileChanges = exports.default = exports.HunkDiff = void 0;

var _AtomTextEditor = require("./AtomTextEditor");

var _goToLocation = require("@atom-ide-community/nuclide-commons-atom/go-to-location");

var _LoadingSpinner = require("./LoadingSpinner");

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _string = require("@atom-ide-community/nuclide-commons/string");

var _atom = require("atom");

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _renderReactRoot = require("./renderReactRoot");

var _Section = require("./Section");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const MAX_GUTTER_WIDTH = 5;

function getHighlightClass(type) {
  if (type === 'add') {
    return 'nuclide-ui-hunk-diff-insert';
  }

  if (type === 'del') {
    return 'nuclide-ui-hunk-diff-delete';
  }

  return null;
} // add a gutter to a text editor with line numbers defined by an iterable, as
// opposed to being forced to start at 1 and counting up


function createCustomLineNumberGutter(editor, lineNumbers, gutterWidth, options = {}) {
  const {
    extraName,
    onClick
  } = options; // 'nuclide-ui-file-changes-line-number-gutter-wX' makes a gutter Xem wide.
  // 'nuclide-ui-file-changes-line-number-gutter' makes a gutter 5em wide

  const suffix = gutterWidth > 0 && gutterWidth < MAX_GUTTER_WIDTH ? `-w${gutterWidth}` : '';
  let name = `nuclide-ui-file-changes-line-number-gutter${suffix}`;

  if (extraName != null) {
    name += ` ${extraName}`;
  }

  const gutter = editor.addGutter({
    name
  });
  let index = -1;

  for (const lineNumber of lineNumbers) {
    index++;

    if (lineNumber == null) {
      continue;
    }

    const marker = editor.markBufferPosition([index, 0], {
      invalidate: 'touch'
    });
    const item = createGutterItem(lineNumber, gutterWidth, onClick);
    gutter.decorateMarker(marker, {
      type: 'gutter',
      item
    });
    gutter.onDidDestroy(() => {
      marker.destroy();

      _reactDom.default.unmountComponentAtNode(item);
    });
  }

  return gutter;
}

const NBSP = '\xa0';

function createGutterItem(lineNumber, gutterWidth, onClick) {
  const fillWidth = gutterWidth - String(lineNumber).length; // Paralleling the original line-number implementation,
  // pad the line number with leading spaces.

  const filler = fillWidth > 0 ? new Array(fillWidth).fill(NBSP).join('') : ''; // Attempt to reuse the existing line-number styles.

  return (0, _renderReactRoot.renderReactRoot)( /*#__PURE__*/React.createElement("div", {
    onClick: onClick && (() => onClick(lineNumber)),
    className: (0, _classnames.default)('line-number', {
      clickable: onClick != null
    })
  }, filler, lineNumber));
}

class HunkDiff extends React.Component {
  constructor(props) {
    super(props);
    this.editor = void 0;
    this._disposables = void 0;
    this._disposables = new _UniversalDisposable.default( // enable copying filename
    // core:copy isn't used because it breaks the custom copy behavior below,
    // and this selection doesn't work easily with cmd-c anyway.
    atom.contextMenu.add({
      '.nuclide-ui-file-changes-item': [{
        label: 'Copy',
        command: 'nuclide-ui-file-changes-item:copy'
      }]
    }), atom.commands.add('.nuclide-ui-file-changes-item', 'nuclide-ui-file-changes-item:copy', event => {
      // need to strip out zero-width spaces that were added to the filename
      if (!(event.target instanceof HTMLElement)) {
        return;
      }

      const element = event.target;
      const text = element.innerText;

      if (text == null) {
        return;
      }

      const allSpacesRegex = new RegExp(_string.ZERO_WIDTH_SPACE, 'g');
      atom.clipboard.write(text.replace(allSpacesRegex, ''));
      event.stopPropagation();
    }));
  }

  componentDidMount() {
    const editor = (0, _nullthrows.default)(this.editor);

    this._createLineMarkers(editor);

    this._createLineNumbers(editor);
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    const {
      hunk,
      grammar
    } = nextProps;
    const changes = hunk.changes;
    const prevHunk = this.props.hunk;
    const editor = (0, _nullthrows.default)(this.editor);
    const newText = changes.map(change => change.content.slice(1)).join('\n');
    const oldText = prevHunk.changes.map(change => change.content.slice(1)).join('\n');
    const oldGrammar = this.props.grammar;

    if (newText === oldText && grammar === oldGrammar) {
      return;
    }

    if (newText !== oldText) {
      editor.setText(newText);
    }

    if (grammar !== oldGrammar) {
      editor.setGrammar(grammar);
    }

    this._disposables.dispose();

    this._disposables = new _UniversalDisposable.default();

    this._createLineMarkers(editor);

    this._createLineNumbers(editor);
  }

  shouldComponentUpdate(nextProps) {
    return false;
  }

  componentWillUnmount() {
    this._disposables.dispose();
  } // Line numbers are contiguous, but have a random starting point, so we can't use the
  // default line-number gutter.


  _createLineNumbers(editor) {
    const {
      changes,
      newStart: initialOffset
    } = this.props.hunk;
    const changeCount = changes.length;
    const maxDisplayLineNumber = initialOffset + changeCount - 1; // The maximum required gutter width for this hunk, in characters:

    const gutterWidth = String(maxDisplayLineNumber).length;
    let deletedLinesInSection = 0;
    let deletedLines = 0; // use a generator to avoid having to precalculate and store an array of
    // line numbers

    function* lineNumberGenerator() {
      for (let line = 0; line < changeCount; line++) {
        if (changes[line].type === 'del') {
          deletedLinesInSection++;
        } else {
          deletedLines += deletedLinesInSection;
          deletedLinesInSection = 0;
        }

        yield line + initialOffset - deletedLines;
      }
    }

    const gutter = createCustomLineNumberGutter(editor, lineNumberGenerator(), gutterWidth, {
      onClick: this.props.onClickLine
    });

    this._disposables.add(() => {
      gutter.destroy();
    });
  }
  /**
   * @param lineNumber A buffer line number to be highlighted.
   * @param type The type of highlight to be applied to the line.
   *             Could be a value of: ['insert', 'delete'].
   */


  _createLineMarkers(editor) {
    let hunkIndex = 0;

    for (const hunkChanges of this.props.hunk.changes) {
      const lineNumber = hunkIndex++;
      const range = new _atom.Range([lineNumber, 0], [lineNumber + 1, 0]);
      const marker = editor.markBufferRange(range, {
        invalidate: 'never'
      });
      const className = getHighlightClass(hunkChanges.type);

      if (className == null) {
        // No need to highlight normal lines.
        continue;
      }

      const decoration = editor.decorateMarker(marker, {
        type: 'highlight',
        class: className
      });

      this._disposables.add(() => {
        decoration.destroy();
      });
    }
  }

  render() {
    const {
      hunk,
      grammar,
      softWrapped
    } = this.props;
    const {
      changes
    } = hunk; // Remove the first character in each line (/[+- ]/) which indicates addition / deletion

    const text = changes.map(change => change.content.slice(1)).join('\n');
    const textBuffer = new _atom.TextBuffer();
    textBuffer.setText(text);
    return /*#__PURE__*/React.createElement(_AtomTextEditor.AtomTextEditor, {
      autoGrow: true,
      className: "nuclide-ui-hunk-diff-text-editor",
      correctContainerWidth: false,
      grammar: grammar,
      gutterHidden: true,
      readOnly: true,
      softWrapped: softWrapped,
      ref: editorRef => {
        // $FlowFixMe(>=0.53.0) Flow suppress
        this.editor = editorRef && editorRef.getModel();
      },
      textBuffer: textBuffer
    });
  }

}

exports.HunkDiff = HunkDiff;

function handleFilenameClick(fullPath, event) {
  if (fullPath == null) {
    return;
  }

  (0, _goToLocation.goToLocation)(fullPath);
  event.stopPropagation();
}

function renderFileChangeContainer(content, isPreview, collapsable, fullPath, displayPath, collapsedByDefault, hideHeadline, diff) {
  const {
    additions,
    annotation,
    deletions,
    from: fromFileName,
    to: toFileName
  } = diff != null ? diff : {
    additions: null,
    annotation: null,
    deletions: null,
    from: fullPath,
    to: fullPath
  };

  if (toFileName == null || fromFileName == null) {
    // sanity check: toFileName & fromFileName should always be given
    return null;
  }

  const fileName = displayPath != null ? displayPath : toFileName !== '/dev/null' ? toFileName : fromFileName;
  let annotationComponent;

  if (!isPreview && annotation != null) {
    annotationComponent = /*#__PURE__*/React.createElement("span", null, annotation.split('\n').map((line, index) => /*#__PURE__*/React.createElement("span", {
      key: index
    }, line, /*#__PURE__*/React.createElement("br", null))));
  }

  let addedOrDeletedString = '';

  if (toFileName === '/dev/null') {
    addedOrDeletedString = 'file deleted - ';
  } else if (fromFileName === '/dev/null') {
    addedOrDeletedString = 'file added - ';
  }

  const diffDetails = isPreview ? null : /*#__PURE__*/React.createElement("span", {
    className: "nuclide-ui-file-changes-details"
  }, annotationComponent, " (", addedOrDeletedString, additions + deletions, " ", (0, _string.pluralize)('line', additions + deletions), ")"); // insert zero-width spaces so filenames are wrapped at '/'

  const breakableFilename = fileName.replace(/\//g, '/' + _string.ZERO_WIDTH_SPACE);
  const renderedFilename = fullPath != null ? /*#__PURE__*/React.createElement("a", {
    className: "nuclide-ui-file-changes-name",
    onClick: handleFilenameClick.bind(null, fullPath)
  }, breakableFilename) : breakableFilename;

  if (hideHeadline) {
    return content;
  }

  const headline = /*#__PURE__*/React.createElement("span", {
    className: (0, _classnames.default)('nuclide-ui-file-changes-item', 'native-key-bindings'),
    tabIndex: -1
  }, renderedFilename, " ", diffDetails);
  return /*#__PURE__*/React.createElement(_Section.Section, {
    collapsable: collapsable === true,
    collapsedByDefault: collapsedByDefault === true,
    headline: headline,
    title: "Click to open"
  }, content);
}
/* Renders changes to a single file. */


class FileChanges extends React.Component {
  render() {
    const {
      collapsable,
      fullPath,
      displayPath,
      collapsedByDefault,
      hideHeadline,
      diff,
      grammar,
      softWrapped
    } = this.props;
    const {
      chunks,
      from: fromFileName,
      to: toFileName
    } = diff;

    if (toFileName == null || fromFileName == null) {
      // sanity check: toFileName & fromFileName should always be given
      return null;
    }

    const fileName = toFileName !== '/dev/null' ? toFileName : fromFileName;
    const hunks = [];
    let i = 0;

    for (const chunk of chunks) {
      if (i > 0) {
        hunks.push( /*#__PURE__*/React.createElement("div", {
          className: "nuclide-ui-hunk-diff-spacer",
          key: `spacer-${i}`
        }));
      }

      hunks.push(
      /*#__PURE__*/
      // $FlowFixMe(>=0.53.0) Flow suppress
      React.createElement(this.props.hunkComponentClass, {
        extraData: this.props.extraData,
        key: chunk.oldStart,
        grammar: grammar != null ? grammar : atom.grammars.selectGrammar(fileName, ''),
        hunk: chunk,
        onClickLine: line => {
          if (fullPath != null) {
            (0, _goToLocation.goToLocation)(fullPath, {
              line
            });
          }
        },
        softWrapped: softWrapped
      }));
      i++;
    }

    return renderFileChangeContainer(hunks,
    /* isPreview */
    false, collapsable, fullPath, displayPath, collapsedByDefault, hideHeadline, diff);
  }

}

exports.default = FileChanges;
FileChanges.defaultProps = {
  hunkComponentClass: HunkDiff
};

class LoadingFileChanges extends React.Component {
  constructor(...args) {
    super(...args);

    this._handleFilenameClick = event => {
      const {
        fullPath
      } = this.props;

      if (fullPath == null) {
        return;
      }

      (0, _goToLocation.goToLocation)(fullPath);
      event.stopPropagation();
    };
  }

  render() {
    const spinner = /*#__PURE__*/React.createElement(_LoadingSpinner.LoadingSpinner, {
      size: _LoadingSpinner.LoadingSpinnerSizes.EXTRA_SMALL,
      className: "nuclide-ui-file-changes-file-spinner"
    });
    const {
      collapsable,
      fullPath,
      displayPath,
      collapsedByDefault,
      hideHeadline
    } = this.props;
    return renderFileChangeContainer(spinner,
    /* isPreview */
    true, collapsable, fullPath, displayPath, collapsedByDefault, hideHeadline,
    /* diff */
    null);
  }

}

exports.LoadingFileChanges = LoadingFileChanges;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,