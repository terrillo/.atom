"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HighlightedCodeExamples = void 0;

var React = _interopRequireWildcard(require("react"));

var _Button = require("./Button");

var _HighlightedCode = require("./HighlightedCode");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global requestAnimationFrame */
class HighlightedCodeExample extends React.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      count: 1
    };

    this._addOneMore = () => {
      // TODO(pelmers): Use react deferred update API when facebook/react/issues/13306 is ready
      requestAnimationFrame(() => {
        // TODO: (wbinnssmith) T30771435 this setState depends on current state
        // and should use an updater function rather than an object
        // eslint-disable-next-line react/no-access-state-in-setstate
        this.setState({
          count: this.state.count + 1
        });
      });
    };
  }

  render() {
    const jsGrammar = atom.grammars.grammarForScopeName('source.js');

    if (jsGrammar == null) {
      return null;
    } // Use our own source code as an example!


    const code = (HighlightedCodeExample.toString() + '\n').repeat(this.state.count); // $FlowIgnore: Not an official API yet.

    const ConcurrentMode = React.unstable_ConcurrentMode;
    return /*#__PURE__*/React.createElement("div", null, "The code below is rendered with async React, so highlighting does not block (no matter how many lines have to be tokenized).", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(_Button.Button, {
      onClick: this._addOneMore
    }, "Add more code!"), /*#__PURE__*/React.createElement(ConcurrentMode, null, /*#__PURE__*/React.createElement(_HighlightedCode.HighlightedCode, {
      grammar: jsGrammar,
      code: code,
      style: {
        marginTop: '8px'
      }
    })));
  }

}

const HighlightedCodeExamples = {
  sectionName: 'HighlightedCode',
  description: 'HighlightedCode provides a lighter-weight syntax highlighter for code.\n' + 'It uses the same tokenizer as Atom text editors but ditches the editor.',
  examples: [{
    title: 'HighlightedCode',
    component: HighlightedCodeExample
  }]
};
exports.HighlightedCodeExamples = HighlightedCodeExamples;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0hpZ2hsaWdodGVkQ29kZS5leGFtcGxlLmpzIl0sIm5hbWVzIjpbIkhpZ2hsaWdodGVkQ29kZUV4YW1wbGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsInN0YXRlIiwiY291bnQiLCJfYWRkT25lTW9yZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFN0YXRlIiwicmVuZGVyIiwianNHcmFtbWFyIiwiYXRvbSIsImdyYW1tYXJzIiwiZ3JhbW1hckZvclNjb3BlTmFtZSIsImNvZGUiLCJ0b1N0cmluZyIsInJlcGVhdCIsIkNvbmN1cnJlbnRNb2RlIiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJtYXJnaW5Ub3AiLCJIaWdobGlnaHRlZENvZGVFeGFtcGxlcyIsInNlY3Rpb25OYW1lIiwiZGVzY3JpcHRpb24iLCJleGFtcGxlcyIsInRpdGxlIiwiY29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQWhCQTs7Ozs7Ozs7Ozs7O0FBWUE7QUFNQSxNQUFNQSxzQkFBTixTQUFxQ0MsS0FBSyxDQUFDQyxTQUEzQyxDQUE0RTtBQUFBO0FBQUE7QUFBQSxTQUMxRUMsS0FEMEUsR0FDbEU7QUFDTkMsTUFBQUEsS0FBSyxFQUFFO0FBREQsS0FEa0U7O0FBQUEsU0FLMUVDLFdBTDBFLEdBSzVELE1BQU07QUFDbEI7QUFDQUMsTUFBQUEscUJBQXFCLENBQUMsTUFBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxhQUFLQyxRQUFMLENBQWM7QUFBQ0gsVUFBQUEsS0FBSyxFQUFFLEtBQUtELEtBQUwsQ0FBV0MsS0FBWCxHQUFtQjtBQUEzQixTQUFkO0FBQ0QsT0FMb0IsQ0FBckI7QUFNRCxLQWJ5RTtBQUFBOztBQWUxRUksRUFBQUEsTUFBTSxHQUFlO0FBQ25CLFVBQU1DLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxRQUFMLENBQWNDLG1CQUFkLENBQWtDLFdBQWxDLENBQWxCOztBQUNBLFFBQUlILFNBQVMsSUFBSSxJQUFqQixFQUF1QjtBQUNyQixhQUFPLElBQVA7QUFDRCxLQUprQixDQUtuQjs7O0FBQ0EsVUFBTUksSUFBSSxHQUFHLENBQUNiLHNCQUFzQixDQUFDYyxRQUF2QixLQUFvQyxJQUFyQyxFQUEyQ0MsTUFBM0MsQ0FDWCxLQUFLWixLQUFMLENBQVdDLEtBREEsQ0FBYixDQU5tQixDQVNuQjs7QUFDQSxVQUFNWSxjQUFjLEdBQUdmLEtBQUssQ0FBQ2dCLHVCQUE3QjtBQUNBLHdCQUNFLDhLQUdFLCtCQUhGLGVBSUUsb0JBQUMsY0FBRDtBQUFRLE1BQUEsT0FBTyxFQUFFLEtBQUtaO0FBQXRCLHdCQUpGLGVBS0Usb0JBQUMsY0FBRCxxQkFDRSxvQkFBQyxnQ0FBRDtBQUNFLE1BQUEsT0FBTyxFQUFFSSxTQURYO0FBRUUsTUFBQSxJQUFJLEVBQUVJLElBRlI7QUFHRSxNQUFBLEtBQUssRUFBRTtBQUFDSyxRQUFBQSxTQUFTLEVBQUU7QUFBWjtBQUhULE1BREYsQ0FMRixDQURGO0FBZUQ7O0FBekN5RTs7QUE0Q3JFLE1BQU1DLHVCQUF1QixHQUFHO0FBQ3JDQyxFQUFBQSxXQUFXLEVBQUUsaUJBRHdCO0FBRXJDQyxFQUFBQSxXQUFXLEVBQ1QsNkVBQ0EseUVBSm1DO0FBS3JDQyxFQUFBQSxRQUFRLEVBQUUsQ0FDUjtBQUNFQyxJQUFBQSxLQUFLLEVBQUUsaUJBRFQ7QUFFRUMsSUFBQUEsU0FBUyxFQUFFeEI7QUFGYixHQURRO0FBTDJCLENBQWhDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbi8qIGdsb2JhbCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtCdXR0b259IGZyb20gJy4vQnV0dG9uJztcclxuaW1wb3J0IHtIaWdobGlnaHRlZENvZGV9IGZyb20gJy4vSGlnaGxpZ2h0ZWRDb2RlJztcclxuXHJcbmNsYXNzIEhpZ2hsaWdodGVkQ29kZUV4YW1wbGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30sIHt8Y291bnQ6IG51bWJlcnx9PiB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICBjb3VudDogMSxcclxuICB9O1xyXG5cclxuICBfYWRkT25lTW9yZSA9ICgpID0+IHtcclxuICAgIC8vIFRPRE8ocGVsbWVycyk6IFVzZSByZWFjdCBkZWZlcnJlZCB1cGRhdGUgQVBJIHdoZW4gZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzMzA2IGlzIHJlYWR5XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAvLyBUT0RPOiAod2Jpbm5zc21pdGgpIFQzMDc3MTQzNSB0aGlzIHNldFN0YXRlIGRlcGVuZHMgb24gY3VycmVudCBzdGF0ZVxyXG4gICAgICAvLyBhbmQgc2hvdWxkIHVzZSBhbiB1cGRhdGVyIGZ1bmN0aW9uIHJhdGhlciB0aGFuIGFuIG9iamVjdFxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYWNjZXNzLXN0YXRlLWluLXNldHN0YXRlXHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2NvdW50OiB0aGlzLnN0YXRlLmNvdW50ICsgMX0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgY29uc3QganNHcmFtbWFyID0gYXRvbS5ncmFtbWFycy5ncmFtbWFyRm9yU2NvcGVOYW1lKCdzb3VyY2UuanMnKTtcclxuICAgIGlmIChqc0dyYW1tYXIgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIC8vIFVzZSBvdXIgb3duIHNvdXJjZSBjb2RlIGFzIGFuIGV4YW1wbGUhXHJcbiAgICBjb25zdCBjb2RlID0gKEhpZ2hsaWdodGVkQ29kZUV4YW1wbGUudG9TdHJpbmcoKSArICdcXG4nKS5yZXBlYXQoXHJcbiAgICAgIHRoaXMuc3RhdGUuY291bnQsXHJcbiAgICApO1xyXG4gICAgLy8gJEZsb3dJZ25vcmU6IE5vdCBhbiBvZmZpY2lhbCBBUEkgeWV0LlxyXG4gICAgY29uc3QgQ29uY3VycmVudE1vZGUgPSBSZWFjdC51bnN0YWJsZV9Db25jdXJyZW50TW9kZTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgVGhlIGNvZGUgYmVsb3cgaXMgcmVuZGVyZWQgd2l0aCBhc3luYyBSZWFjdCwgc28gaGlnaGxpZ2h0aW5nIGRvZXMgbm90XHJcbiAgICAgICAgYmxvY2sgKG5vIG1hdHRlciBob3cgbWFueSBsaW5lcyBoYXZlIHRvIGJlIHRva2VuaXplZCkuXHJcbiAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLl9hZGRPbmVNb3JlfT5BZGQgbW9yZSBjb2RlITwvQnV0dG9uPlxyXG4gICAgICAgIDxDb25jdXJyZW50TW9kZT5cclxuICAgICAgICAgIDxIaWdobGlnaHRlZENvZGVcclxuICAgICAgICAgICAgZ3JhbW1hcj17anNHcmFtbWFyfVxyXG4gICAgICAgICAgICBjb2RlPXtjb2RlfVxyXG4gICAgICAgICAgICBzdHlsZT17e21hcmdpblRvcDogJzhweCd9fVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L0NvbmN1cnJlbnRNb2RlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgSGlnaGxpZ2h0ZWRDb2RlRXhhbXBsZXMgPSB7XHJcbiAgc2VjdGlvbk5hbWU6ICdIaWdobGlnaHRlZENvZGUnLFxyXG4gIGRlc2NyaXB0aW9uOlxyXG4gICAgJ0hpZ2hsaWdodGVkQ29kZSBwcm92aWRlcyBhIGxpZ2h0ZXItd2VpZ2h0IHN5bnRheCBoaWdobGlnaHRlciBmb3IgY29kZS5cXG4nICtcclxuICAgICdJdCB1c2VzIHRoZSBzYW1lIHRva2VuaXplciBhcyBBdG9tIHRleHQgZWRpdG9ycyBidXQgZGl0Y2hlcyB0aGUgZWRpdG9yLicsXHJcbiAgZXhhbXBsZXM6IFtcclxuICAgIHtcclxuICAgICAgdGl0bGU6ICdIaWdobGlnaHRlZENvZGUnLFxyXG4gICAgICBjb21wb25lbnQ6IEhpZ2hsaWdodGVkQ29kZUV4YW1wbGUsXHJcbiAgICB9LFxyXG4gIF0sXHJcbn07XHJcbiJdfQ==