"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Icon = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Renders an icon with optional text next to it.
 */
const Icon = props => {
  const {
    icon,
    children,
    className,
    ...remainingProps
  } = props;
  const newClassName = (0, _classnames.default)(className, icon == null ? null : `icon icon-${icon}`);
  return /*#__PURE__*/React.createElement("span", _extends({
    className: newClassName
  }, remainingProps), children);
};

exports.Icon = Icon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0ljb24uanMiXSwibmFtZXMiOlsiSWNvbiIsInByb3BzIiwiaWNvbiIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwicmVtYWluaW5nUHJvcHMiLCJuZXdDbGFzc05hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTs7QUFDQTs7Ozs7Ozs7OztBQStEQTs7O0FBR08sTUFBTUEsSUFBSSxHQUFJQyxLQUFELElBQWtCO0FBQ3BDLFFBQU07QUFBQ0MsSUFBQUEsSUFBRDtBQUFPQyxJQUFBQSxRQUFQO0FBQWlCQyxJQUFBQSxTQUFqQjtBQUE0QixPQUFHQztBQUEvQixNQUFpREosS0FBdkQ7QUFDQSxRQUFNSyxZQUFZLEdBQUcseUJBQ25CRixTQURtQixFQUVuQkYsSUFBSSxJQUFJLElBQVIsR0FBZSxJQUFmLEdBQXVCLGFBQVlBLElBQUssRUFGckIsQ0FBckI7QUFJQSxzQkFDRTtBQUFNLElBQUEsU0FBUyxFQUFFSTtBQUFqQixLQUFtQ0QsY0FBbkMsR0FDR0YsUUFESCxDQURGO0FBS0QsQ0FYTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3cgc3RyaWN0XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IHR5cGUgTnVjbGljb24gPVxyXG4gIHwgJ251Y2xpY29uLW51Y2xpZGUnXHJcbiAgfCAnbnVjbGljb24tcmVhY3QnXHJcbiAgfCAnbnVjbGljb24tYnVjaydcclxuICB8ICdudWNsaWNvbi1oaHZtJ1xyXG4gIHwgJ251Y2xpY29uLWhhY2snXHJcbiAgfCAnbnVjbGljb24tcmVsYXknXHJcbiAgfCAnbnVjbGljb24tc3dpZnQnXHJcbiAgfCAnbnVjbGljb24tZmlsZS1kaXJlY3RvcnknXHJcbiAgfCAnbnVjbGljb24tZmlsZS1kaXJlY3Rvcnktc3RhcnJlZCdcclxuICB8ICdudWNsaWNvbi1kZWJ1Z2dlcidcclxuICB8ICdudWNsaWNvbi1hcnJvdy1kb3duJ1xyXG4gIHwgJ251Y2xpY29uLWJ1ZydcclxuICB8ICdudWNsaWNvbi1ncmFwaHFsJ1xyXG4gIHwgJ251Y2xpY29uLWNvbW1lbnQtZGlzY3Vzc2lvbidcclxuICB8ICdudWNsaWNvbi1jb21tZW50J1xyXG4gIHwgJ251Y2xpY29uLWplc3Qtb3V0bGluZSdcclxuICB8ICdudWNsaWNvbi1mbG93J1xyXG4gIHwgJ251Y2xpY29uLXJlYWN0LWRldnRvb2xzJ1xyXG4gIHwgJ251Y2xpY29uLWZ1bm5lbCdcclxuICB8ICdudWNsaWNvbi1lcnJvcidcclxuICAvLyBDdXJyZW50bHksIFwibnVjbGljb24td2FybmluZ1wiIGlzIHRoZSBzYW1lIGFzIE9jdGljb24ncyBcImFsZXJ0XCIgYnV0IHdlIGR1cGxpY2F0ZSBpdCBiZWNhdXNlIHRoZVxyXG4gIC8vIE9jdGljb25zIGFyZW4ndCB2ZXJ0aWNhbGx5IGNlbnRlcmVkIGFuZCB0aGUgZmFjdCB0aGF0IHRoaXMgb25lJ3MgZnJlcXVlbnRseSBzaG93biBuZXh0IHRvXHJcbiAgLy8gbnVjbGljb24tZXJyb3IgbWFrZXMgaXQgd2F5eXl5IG1vcmUgb2J2aW91cy5cclxuICB8ICdudWNsaWNvbi13YXJuaW5nJ1xyXG4gIHwgJ251Y2xpY29uLWtlYmFiLWhvcml6b250YWwnXHJcbiAgfCAnbnVjbGljb24tY3MnXHJcbiAgfCAnbnVjbGljb24tbWV0cm8nXHJcbiAgfCAnbnVjbGljb24tY29ubmVjdGVkJ1xyXG4gIHwgJ251Y2xpY29uLWRpc2Nvbm5lY3RlZCdcclxuICB8ICdudWNsaWNvbi1lamVjdCdcclxuICB8ICdudWNsaWNvbi1hbGwtaXRlbXMnXHJcbiAgfCAnbnVjbGljb24tbG9jYWwnXHJcbiAgfCAnbnVjbGljb24tcmVtb3RlJ1xyXG4gIHwgJ251Y2xpY29uLWNvbmZpZydcclxuICB8ICdudWNsaWNvbi1zbmFwc2hvdCdcclxuICB8ICdudWNsaWNvbi1zdWNjZXNzJ1xyXG4gIHwgJ251Y2xpY29uLXRpbWUtc3RhcnQnXHJcbiAgfCAnbnVjbGljb24tdGltZS1lbmQnXHJcbiAgfCAnbnVjbGljb24tbWV0cm8tZGlzYWJsZWQnXHJcbiAgfCAnbnVjbGljb24tbWV0cm8td2FpdGluZydcclxuICB8ICdudWNsaWNvbi1saWdodGJ1bGItZmlsbGVkJ1xyXG4gIHwgJ251Y2xpY29uLW50J1xyXG4gIHwgJ251Y2xpY29uLWFyY2hpdmUnXHJcbiAgfCAnbnVjbGljb24taW5maW5pdHknXHJcbiAgfCAnbnVjbGljb24tZGVza3RvcCdcclxuICB8ICdudWNsaWNvbi1tb2JpbGUnXHJcbiAgfCAnbnVjbGljb24tbGlnaHRuaW5nJ1xyXG4gIHwgJ251Y2xpY29uLWhhc2tlbGwnXHJcbiAgfCAnbnVjbGljb24tb24tZGVtYW5kJztcclxuXHJcbmV4cG9ydCB0eXBlIEljb25OYW1lID0gTnVjbGljb24gfCBhdG9tJE9jdGljb247XHJcblxyXG50eXBlIFByb3BzID0ge1xyXG4gIC8qKiBJY29uIG5hbWUsIHdpdGhvdXQgdGhlIGBpY29uLWAgcHJlZml4LiBFLmcuIGAnYXJyb3ctdXAnYCAqL1xyXG4gIGljb246IEljb25OYW1lLFxyXG4gIGNsYXNzTmFtZT86IHN0cmluZyxcclxuICAvKiogT3B0aW9uYWwgdGV4dCBjb250ZW50IHRvIHJlbmRlciBuZXh0IHRvIHRoZSBpY29uLiAqL1xyXG4gIGNoaWxkcmVuPzogUmVhY3QuTm9kZSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW5kZXJzIGFuIGljb24gd2l0aCBvcHRpb25hbCB0ZXh0IG5leHQgdG8gaXQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSWNvbiA9IChwcm9wczogUHJvcHMpID0+IHtcclxuICBjb25zdCB7aWNvbiwgY2hpbGRyZW4sIGNsYXNzTmFtZSwgLi4ucmVtYWluaW5nUHJvcHN9ID0gcHJvcHM7XHJcbiAgY29uc3QgbmV3Q2xhc3NOYW1lID0gY2xhc3NuYW1lcyhcclxuICAgIGNsYXNzTmFtZSxcclxuICAgIGljb24gPT0gbnVsbCA/IG51bGwgOiBgaWNvbiBpY29uLSR7aWNvbn1gLFxyXG4gICk7XHJcbiAgcmV0dXJuIChcclxuICAgIDxzcGFuIGNsYXNzTmFtZT17bmV3Q2xhc3NOYW1lfSB7Li4ucmVtYWluaW5nUHJvcHN9PlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L3NwYW4+XHJcbiAgKTtcclxufTtcclxuIl19