"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListView = exports.ListViewItem = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _ignoreTextSelectionEvents = _interopRequireDefault(require("./ignoreTextSelectionEvents"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Use ListViewItem in conjunction with ListView.
 */
class ListViewItem extends React.Component {
  _select(value, index, event) {
    if (this.props.onSelect != null) {
      this.props.onSelect(value, index);
    }
  }

  render() {
    const {
      children,
      index,
      value,
      ...remainingProps
    } = this.props;
    return /*#__PURE__*/React.createElement("div", _extends({
      className: "nuclide-ui-listview-item"
    }, remainingProps, {
      onClick: (0, _ignoreTextSelectionEvents.default)(this._select.bind(this, value, index))
    }), children);
  }

}

exports.ListViewItem = ListViewItem;

class ListView extends React.Component {
  constructor(...args) {
    super(...args);

    this._handleSelect = (value, index, event) => {
      if (this.props.selectable && this.props.onSelect != null) {
        this.props.onSelect(index, value);
      }
    };
  }

  render() {
    const {
      children,
      alternateBackground,
      selectable
    } = this.props;
    const renderedItems = React.Children.map(children, (child, index) => /*#__PURE__*/React.cloneElement(child, {
      index,
      onSelect: this._handleSelect
    }));
    const className = (0, _classnames.default)({
      'native-key-bindings': true,
      'nuclide-ui-listview': true,
      'nuclide-ui-listview-highlight-odd': alternateBackground,
      'nuclide-ui-listview-selectable': selectable
    });
    return /*#__PURE__*/React.createElement("div", {
      className: className,
      tabIndex: -1
    }, renderedItems);
  }

}

exports.ListView = ListView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0xpc3RWaWV3LmpzIl0sIm5hbWVzIjpbIkxpc3RWaWV3SXRlbSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX3NlbGVjdCIsInZhbHVlIiwiaW5kZXgiLCJldmVudCIsInByb3BzIiwib25TZWxlY3QiLCJyZW5kZXIiLCJjaGlsZHJlbiIsInJlbWFpbmluZ1Byb3BzIiwiYmluZCIsIkxpc3RWaWV3IiwiX2hhbmRsZVNlbGVjdCIsInNlbGVjdGFibGUiLCJhbHRlcm5hdGVCYWNrZ3JvdW5kIiwicmVuZGVyZWRJdGVtcyIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJjbG9uZUVsZW1lbnQiLCJjbGFzc05hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7OztBQVNBOzs7QUFHTyxNQUFNQSxZQUFOLFNBQTJCQyxLQUFLLENBQUNDLFNBQWpDLENBQThEO0FBQ25FQyxFQUFBQSxPQUFPLENBQUNDLEtBQUQsRUFBaUJDLEtBQWpCLEVBQWdDQyxLQUFoQyxFQUFvRTtBQUN6RSxRQUFJLEtBQUtDLEtBQUwsQ0FBV0MsUUFBWCxJQUF1QixJQUEzQixFQUFpQztBQUMvQixXQUFLRCxLQUFMLENBQVdDLFFBQVgsQ0FBb0JKLEtBQXBCLEVBQTJCQyxLQUEzQjtBQUNEO0FBQ0Y7O0FBRURJLEVBQUFBLE1BQU0sR0FBZTtBQUNuQixVQUFNO0FBQUNDLE1BQUFBLFFBQUQ7QUFBV0wsTUFBQUEsS0FBWDtBQUFrQkQsTUFBQUEsS0FBbEI7QUFBeUIsU0FBR087QUFBNUIsUUFBOEMsS0FBS0osS0FBekQ7QUFDQSx3QkFDRTtBQUNFLE1BQUEsU0FBUyxFQUFDO0FBRFosT0FFTUksY0FGTjtBQUdFLE1BQUEsT0FBTyxFQUFFLHdDQUNQLEtBQUtSLE9BQUwsQ0FBYVMsSUFBYixDQUFrQixJQUFsQixFQUF3QlIsS0FBeEIsRUFBK0JDLEtBQS9CLENBRE87QUFIWCxRQU1HSyxRQU5ILENBREY7QUFVRDs7QUFuQmtFOzs7O0FBdUM5RCxNQUFNRyxRQUFOLFNBQXVCWixLQUFLLENBQUNDLFNBQTdCLENBQXNEO0FBQUE7QUFBQTs7QUFBQSxTQUMzRFksYUFEMkQsR0FDM0MsQ0FDZFYsS0FEYyxFQUVkQyxLQUZjLEVBR2RDLEtBSGMsS0FJTDtBQUNULFVBQUksS0FBS0MsS0FBTCxDQUFXUSxVQUFYLElBQXlCLEtBQUtSLEtBQUwsQ0FBV0MsUUFBWCxJQUF1QixJQUFwRCxFQUEwRDtBQUN4RCxhQUFLRCxLQUFMLENBQVdDLFFBQVgsQ0FBb0JILEtBQXBCLEVBQTJCRCxLQUEzQjtBQUNEO0FBQ0YsS0FUMEQ7QUFBQTs7QUFXM0RLLEVBQUFBLE1BQU0sR0FBZTtBQUNuQixVQUFNO0FBQUNDLE1BQUFBLFFBQUQ7QUFBV00sTUFBQUEsbUJBQVg7QUFBZ0NELE1BQUFBO0FBQWhDLFFBQThDLEtBQUtSLEtBQXpEO0FBQ0EsVUFBTVUsYUFBYSxHQUFHaEIsS0FBSyxDQUFDaUIsUUFBTixDQUFlQyxHQUFmLENBQ3BCVCxRQURvQixFQUVwQixDQUFDVSxLQUFELEVBQTRCZixLQUE1QixrQkFDRUosS0FBSyxDQUFDb0IsWUFBTixDQUFtQkQsS0FBbkIsRUFBMEI7QUFDeEJmLE1BQUFBLEtBRHdCO0FBRXhCRyxNQUFBQSxRQUFRLEVBQUUsS0FBS007QUFGUyxLQUExQixDQUhrQixDQUF0QjtBQVFBLFVBQU1RLFNBQVMsR0FBRyx5QkFBVztBQUMzQiw2QkFBdUIsSUFESTtBQUUzQiw2QkFBdUIsSUFGSTtBQUczQiwyQ0FBcUNOLG1CQUhWO0FBSTNCLHdDQUFrQ0Q7QUFKUCxLQUFYLENBQWxCO0FBTUEsd0JBQ0U7QUFBSyxNQUFBLFNBQVMsRUFBRU8sU0FBaEI7QUFBMkIsTUFBQSxRQUFRLEVBQUUsQ0FBQztBQUF0QyxPQUNHTCxhQURILENBREY7QUFLRDs7QUFoQzBEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBpZ25vcmVUZXh0U2VsZWN0aW9uRXZlbnRzIGZyb20gJy4vaWdub3JlVGV4dFNlbGVjdGlvbkV2ZW50cyc7XHJcblxyXG50eXBlIExpc3RWaWV3SXRlbVByb3BzID0ge1xyXG4gIGluZGV4OiBudW1iZXIsXHJcbiAgdmFsdWU/OiA/T2JqZWN0LFxyXG4gIGNoaWxkcmVuPzogP1JlYWN0LkVsZW1lbnQ8YW55PixcclxuICBvblNlbGVjdD86ICh2YWx1ZTogP09iamVjdCwgaW5kZXg6IG51bWJlcikgPT4gdm9pZCxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVc2UgTGlzdFZpZXdJdGVtIGluIGNvbmp1bmN0aW9uIHdpdGggTGlzdFZpZXcuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGlzdFZpZXdJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PExpc3RWaWV3SXRlbVByb3BzPiB7XHJcbiAgX3NlbGVjdCh2YWx1ZTogP09iamVjdCwgaW5kZXg6IG51bWJlciwgZXZlbnQ6IFN5bnRoZXRpY01vdXNlRXZlbnQ8Pik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMucHJvcHMub25TZWxlY3QgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnByb3BzLm9uU2VsZWN0KHZhbHVlLCBpbmRleCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XHJcbiAgICBjb25zdCB7Y2hpbGRyZW4sIGluZGV4LCB2YWx1ZSwgLi4ucmVtYWluaW5nUHJvcHN9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzc05hbWU9XCJudWNsaWRlLXVpLWxpc3R2aWV3LWl0ZW1cIlxyXG4gICAgICAgIHsuLi5yZW1haW5pbmdQcm9wc31cclxuICAgICAgICBvbkNsaWNrPXtpZ25vcmVUZXh0U2VsZWN0aW9uRXZlbnRzKFxyXG4gICAgICAgICAgdGhpcy5fc2VsZWN0LmJpbmQodGhpcywgdmFsdWUsIGluZGV4KSxcclxuICAgICAgICApfT5cclxuICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbnR5cGUgTGlzdFZpZXdQcm9wcyA9IHtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRvIHNoYWRlIGV2ZW4gYW5kIG9kZCBpdGVtcyBkaWZmZXJlbnRseS5cclxuICAgKi9cclxuICBhbHRlcm5hdGVCYWNrZ3JvdW5kPzogYm9vbGVhbixcclxuICBjaGlsZHJlbj86IEFycmF5PFJlYWN0LkVsZW1lbnQ8YW55Pj4sXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciBpdGVtcyBjYW4gYmUgc2VsZWN0ZWQuXHJcbiAgICogSWYgc3BlY2lmaWVkLCBgb25TZWxlY3RgIG11c3QgYWxzbyBiZSBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgc2VsZWN0YWJsZT86IGJvb2xlYW4sXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlciB0byBiZSBjYWxsZWQgdXBvbiBzZWxlY3Rpb24uIENhbGxlZCBpZmYgYHNlbGVjdGFibGVgIGlzIGB0cnVlYC5cclxuICAgKi9cclxuICBvblNlbGVjdD86IChzZWxlY3RlZEluZGV4OiBudW1iZXIsIHNlbGVjdGVkRGF0YTogP09iamVjdCkgPT4gbWl4ZWQsXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgTGlzdFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TGlzdFZpZXdQcm9wcz4ge1xyXG4gIF9oYW5kbGVTZWxlY3QgPSAoXHJcbiAgICB2YWx1ZTogP09iamVjdCxcclxuICAgIGluZGV4OiBudW1iZXIsXHJcbiAgICBldmVudDogU3ludGhldGljTW91c2VFdmVudDw+LFxyXG4gICk6IHZvaWQgPT4ge1xyXG4gICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0YWJsZSAmJiB0aGlzLnByb3BzLm9uU2VsZWN0ICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5wcm9wcy5vblNlbGVjdChpbmRleCwgdmFsdWUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcclxuICAgIGNvbnN0IHtjaGlsZHJlbiwgYWx0ZXJuYXRlQmFja2dyb3VuZCwgc2VsZWN0YWJsZX0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgcmVuZGVyZWRJdGVtcyA9IFJlYWN0LkNoaWxkcmVuLm1hcChcclxuICAgICAgY2hpbGRyZW4sXHJcbiAgICAgIChjaGlsZDogUmVhY3QuRWxlbWVudDxhbnk+LCBpbmRleDogbnVtYmVyKSA9PlxyXG4gICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xyXG4gICAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgICBvblNlbGVjdDogdGhpcy5faGFuZGxlU2VsZWN0LFxyXG4gICAgICAgIH0pLFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoe1xyXG4gICAgICAnbmF0aXZlLWtleS1iaW5kaW5ncyc6IHRydWUsXHJcbiAgICAgICdudWNsaWRlLXVpLWxpc3R2aWV3JzogdHJ1ZSxcclxuICAgICAgJ251Y2xpZGUtdWktbGlzdHZpZXctaGlnaGxpZ2h0LW9kZCc6IGFsdGVybmF0ZUJhY2tncm91bmQsXHJcbiAgICAgICdudWNsaWRlLXVpLWxpc3R2aWV3LXNlbGVjdGFibGUnOiBzZWxlY3RhYmxlLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB0YWJJbmRleD17LTF9PlxyXG4gICAgICAgIHtyZW5kZXJlZEl0ZW1zfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==