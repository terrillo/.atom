"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modal = void 0;

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Shows a modal dialog when rendered, using Atom's APIs (atom.workspace.addModalPanel).
 */
class Modal extends React.Component {
  constructor(...args) {
    super(...args);
    this._container = void 0;
    this._cancelDisposable = void 0;
    this._innerElement = void 0;
    this._panel = void 0;

    this._handleWindowClick = event => {
      // If the user clicks outside of the modal, and not on a tooltip or
      // notification, close it.
      if (this._innerElement && !this._innerElement.contains(event.target) && event.target.closest('atom-notifications, .tooltip') == null) {
        this.props.onDismiss();
      }
    };

    this._handleContainerInnerElement = el => {
      if (this._cancelDisposable != null) {
        this._cancelDisposable.dispose();
      }

      this._innerElement = el;

      if (el == null) {
        return;
      }

      el.focus();
      this._cancelDisposable = new _UniversalDisposable.default(atom.commands.add(window, 'core:cancel', () => {
        this.props.onDismiss();
      }), _rxjsCompatUmdMin.Observable.fromEvent(window, 'mousedown') // Ignore clicks in the current tick. We don't want to capture the click that showed this
      // modal.
      .skipUntil(_rxjsCompatUmdMin.Observable.interval(0).first()).subscribe(this._handleWindowClick));
    };
  }

  UNSAFE_componentWillMount() {
    this._container = document.createElement('div');
    this._panel = atom.workspace.addModalPanel({
      item: this._container,
      className: this.props.modalClassName
    });
  }

  componentWillUnmount() {
    this._panel.destroy();
  }

  componentDidUpdate(prevProps) {
    const {
      modalClassName
    } = this.props;
    const {
      modalClassName: prevModalClassName
    } = prevProps;

    const panelElement = this._panel.getElement();

    if (prevModalClassName != null) {
      panelElement.classList.remove(...prevModalClassName.split(/\s+/).filter(token => token.length > 0));
    }

    if (modalClassName != null) {
      panelElement.classList.add(...modalClassName.split(/\s+/).filter(token => token.length > 0));
    }
  }

  render() {
    const {
      modalClassName,
      children,
      onDismiss,
      ...props
    } = this.props;
    return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/React.createElement("div", _extends({
      tabIndex: "0"
    }, props, {
      ref: this._handleContainerInnerElement
    }), this.props.children), this._container);
  }

}

exports.Modal = Modal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,