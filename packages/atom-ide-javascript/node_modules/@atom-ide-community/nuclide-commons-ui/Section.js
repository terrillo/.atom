"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Section = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/** A vertical divider with a title.
 * Specifying `collapsable` prop as true will add a clickable chevron icon that
 * collapses the component children. Optionally specify collapsedByDefault
 * (defaults to false)
 */
class Section extends React.Component {
  constructor(props) {
    super(props);

    this._toggleCollapsed = () => {
      if (this.props.collapsed == null) {
        // uncontrolled mode
        // TODO: (wbinnssmith) T30771435 this setState depends on current state
        // and should use an updater function rather than an object
        // eslint-disable-next-line react/no-access-state-in-setstate
        this.setState({
          isCollapsed: !this.state.isCollapsed
        });
      } else {
        // controlled mode
        if (typeof this.props.onChange === 'function') {
          this.props.onChange(!this.props.collapsed);
        }
      }
    };

    const initialIsCollapsed = this.props.collapsable != null && this.props.collapsable && this.props.collapsedByDefault != null && this.props.collapsedByDefault;
    this.state = {
      isCollapsed: initialIsCollapsed
    };
  }

  render() {
    const collapsable = this.props.collapsable != null ? this.props.collapsable : false;
    const collapsed = this.props.collapsed == null ? this.state.isCollapsed : this.props.collapsed; // Only include classes if the component is collapsable

    const iconClass = (0, _classnames.default)({
      icon: collapsable,
      'icon-chevron-down': collapsable && !collapsed,
      'icon-chevron-right': collapsable && collapsed,
      'nuclide-ui-section-collapsable': collapsable
    });
    const conditionalProps = {};

    if (collapsable) {
      conditionalProps.onClick = this._toggleCollapsed;
      conditionalProps.title = collapsed ? 'Click to expand' : 'Click to collapse';
    } // Any custom title prop should override the default title.


    if (this.props.title != null) {
      conditionalProps.title = this.props.title;
    }

    const HeadlineComponent = getHeadlineComponent(this.props.size);
    return /*#__PURE__*/React.createElement("div", {
      className: this.props.className
    }, /*#__PURE__*/React.createElement(HeadlineComponent, _extends({
      className: iconClass
    }, conditionalProps), this.props.headline), /*#__PURE__*/React.createElement("div", {
      style: collapsed ? {
        display: 'none'
      } : {},
      className: "nuclide-ui-section-body"
    }, this.props.children));
  }

}

exports.Section = Section;

function getHeadlineComponent(size) {
  switch (size) {
    case 'small':
      return 'h6';

    case 'medium':
      return 'h5';

    default:
      return 'h3';
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,