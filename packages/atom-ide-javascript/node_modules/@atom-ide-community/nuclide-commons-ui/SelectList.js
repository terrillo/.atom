"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _scrollIntoView = require("./scrollIntoView");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class SelectList extends React.Component {
  constructor(...args) {
    super(...args);
    this._commandsDisposables = void 0;
    this._activeElement = void 0;
  }

  componentDidMount() {
    this._updateCommands();
  }

  componentDidUpdate(prevProps) {
    if (prevProps.commandScope !== this.props.commandScope) {
      this._updateCommands();
    }

    if (prevProps.value !== this.props.value) {
      this._scrollActiveElementIntoView();
    }
  }

  _scrollActiveElementIntoView() {
    if (this._activeElement == null) {
      return;
    }

    (0, _scrollIntoView.scrollIntoViewIfNeeded)(this._activeElement);
  }

  _updateCommands() {
    if (this._commandsDisposables != null) {
      this._commandsDisposables.dispose();
    }

    const el = this.props.commandScope || _reactDom.default.findDOMNode(this);

    this._commandsDisposables = new _UniversalDisposable.default(atom.commands.add( // $FlowFixMe
    el, {
      'core:move-up': () => {
        this._moveSelectionIndex(-1);
      },
      'core:move-down': () => {
        this._moveSelectionIndex(1);
      }
    }));
  }

  _moveSelectionIndex(delta) {
    var _this$props$options$n;

    const currentIndex = this.props.options.findIndex(option => option.value === this.props.value);
    const nextIndex = currentIndex + delta;

    if (nextIndex < 0 || nextIndex >= this.props.options.length) {
      return;
    }

    this.props.onChange((_this$props$options$n = this.props.options[nextIndex]) === null || _this$props$options$n === void 0 ? void 0 : _this$props$options$n.value, nextIndex);
  }

  componentWillUnmount() {
    if (this._commandsDisposables != null) {
      this._commandsDisposables.dispose();
    }
  }

  render() {
    var _this$props$tabIndex;

    return /*#__PURE__*/React.createElement("div", {
      className: "nuclide-select-list select-list block",
      tabIndex: (_this$props$tabIndex = this.props.tabIndex) !== null && _this$props$tabIndex !== void 0 ? _this$props$tabIndex : '0'
    }, /*#__PURE__*/React.createElement("ol", {
      className: "list-group mark-active"
    }, this._renderOptions()));
  }

  _renderOptions() {
    const OptionComponent = this.props.optionComponent || DefaultOptionComponent;
    return this.props.options.map((option, index) => {
      const active = this.props.value === option.value;
      const className = (0, _classnames.default)({
        clearfix: true,
        active
      });
      let ref;

      if (active) {
        ref = el => {
          this._activeElement = el;
        };
      }

      return /*#__PURE__*/React.createElement("li", {
        key: index,
        className: className // eslint-disable-next-line nuclide-internal/jsx-simple-callback-refs
        ,
        ref: ref,
        onClick: () => {
          this.props.onChange(option.value, index);
        }
      }, /*#__PURE__*/React.createElement(OptionComponent, {
        option: option,
        active: active
      }));
    });
  }

}

exports.default = SelectList;
SelectList.defaultProps = {
  onChange: () => {},
  optionComponent: DefaultOptionComponent,
  options: [],
  value: null
};

function DefaultOptionComponent(props) {
  return /*#__PURE__*/React.createElement("span", null, props.option.label);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,