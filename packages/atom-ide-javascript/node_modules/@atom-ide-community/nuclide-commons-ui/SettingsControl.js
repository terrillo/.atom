"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SettingsControl;

var _SettingsCheckbox = _interopRequireDefault(require("./SettingsCheckbox"));

var _SettingsInput = _interopRequireDefault(require("./SettingsInput"));

var _SettingsSelect = _interopRequireDefault(require("./SettingsSelect"));

var _SettingsColorInput = _interopRequireDefault(require("./SettingsColorInput"));

var _assert = _interopRequireDefault(require("assert"));

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function SettingsControl(props) {
  const {
    keyPath,
    value,
    onChange,
    schema,
    title,
    hideDetails
  } = props;
  const {
    description: settingDescription
  } = schema;
  const description = hideDetails === true ? '' : settingDescription;

  if (schema) {
    if (schema.enum) {
      return (
        /*#__PURE__*/
        // $FlowFixMe(>=0.53.0) Flow suppress
        React.createElement(_SettingsSelect.default, {
          description: description,
          keyPath: keyPath,
          onChange: onChange,
          title: title,
          value: value
        })
      );
    } else if (schema.type === 'color') {
      return (
        /*#__PURE__*/
        // $FlowFixMe(>=0.53.0) Flow suppress
        React.createElement(_SettingsColorInput.default, {
          description: description,
          keyPath: keyPath,
          onChange: onChange,
          title: title,
          value: value
        })
      );
    } else if (isBoolean(value) || schema.type === 'boolean') {
      return (
        /*#__PURE__*/
        // $FlowFixMe(>=0.53.0) Flow suppress
        React.createElement(_SettingsCheckbox.default, {
          description: description,
          keyPath: keyPath,
          onChange: onChange,
          title: title,
          value: value
        })
      );
    } else if (Array.isArray(value) || schema.type === 'array') {
      if (isEditableArray(value)) {
        return (
          /*#__PURE__*/
          // $FlowFixMe(>=0.53.0) Flow suppress
          React.createElement(_SettingsInput.default, {
            description: description,
            keyPath: keyPath,
            onChange: onChange,
            title: title,
            value: value,
            type: "array"
          })
        );
      }
    } else if (isObject(value) || schema.type === 'object') {
      (0, _assert.default)(false); // Not implemented.
    } else {
      const type = isNumber(value) ? 'number' : 'string';
      return (
        /*#__PURE__*/
        // $FlowFixMe(>=0.53.0) Flow suppress
        React.createElement(_SettingsInput.default, {
          description: description,
          keyPath: keyPath,
          onChange: onChange,
          title: title,
          value: value,
          type: type
        })
      );
    }
  }

  return null;
}

function isBoolean(obj) {
  return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
}

function isNumber(obj) {
  return toString.call(obj) === '[object Number]';
}

function isObject(obj) {
  const type = typeof obj;
  return type === 'function' || type === 'object' && Boolean(obj);
}

function isEditableArray(array) {
  for (let i = 0, len = array.length; i < len; i++) {
    const item = array[i];

    if (typeof item !== 'string') {
      return false;
    }
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,