"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toggle = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ignoreTextSelectionEvents = _interopRequireDefault(require("./ignoreTextSelectionEvents"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * A toggle component with an input toggle and a label. We restrict the label to a string
 * to ensure this component is pure.
 */
class Toggle extends React.Component {
  constructor(...args) {
    super(...args);

    this._onChange = event => {
      const isToggled = event.target.checked;
      this.props.onChange.call(null, isToggled);
    };
  }

  render() {
    const {
      className,
      disabled,
      label,
      onClick,
      toggled
    } = this.props;
    const text = label === '' ? null : /*#__PURE__*/React.createElement("span", {
      className: "nuclide-ui-toggle-label-text"
    }, " ", label);
    return /*#__PURE__*/React.createElement("label", {
      className: (0, _classnames.default)(className, 'nuclide-ui-toggle-label', {
        'nuclide-ui-toggle-disabled': disabled
      }),
      onClick: onClick && (0, _ignoreTextSelectionEvents.default)(onClick)
    }, /*#__PURE__*/React.createElement("input", {
      checked: toggled,
      className: "input-toggle",
      disabled: disabled,
      onChange: this._onChange,
      type: "checkbox"
    }), text);
  }

}

exports.Toggle = Toggle;
Toggle.defaultProps = {
  disabled: false,

  onClick(event) {}

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1RvZ2dsZS5qcyJdLCJuYW1lcyI6WyJUb2dnbGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsIl9vbkNoYW5nZSIsImV2ZW50IiwiaXNUb2dnbGVkIiwidGFyZ2V0IiwiY2hlY2tlZCIsInByb3BzIiwib25DaGFuZ2UiLCJjYWxsIiwicmVuZGVyIiwiY2xhc3NOYW1lIiwiZGlzYWJsZWQiLCJsYWJlbCIsIm9uQ2xpY2siLCJ0b2dnbGVkIiwidGV4dCIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUNBOztBQUVBOzs7Ozs7OztBQWZBOzs7Ozs7Ozs7Ozs7QUErQkE7Ozs7QUFJTyxNQUFNQSxNQUFOLFNBQXFCQyxLQUFLLENBQUNDLFNBQTNCLENBQTRDO0FBQUE7QUFBQTs7QUFBQSxTQU1qREMsU0FOaUQsR0FNcENDLEtBQUQsSUFBNkI7QUFDdkMsWUFBTUMsU0FBUyxHQUFLRCxLQUFLLENBQUNFLE1BQVIsQ0FBd0NDLE9BQTFEO0FBQ0EsV0FBS0MsS0FBTCxDQUFXQyxRQUFYLENBQW9CQyxJQUFwQixDQUF5QixJQUF6QixFQUErQkwsU0FBL0I7QUFDRCxLQVRnRDtBQUFBOztBQVdqRE0sRUFBQUEsTUFBTSxHQUFlO0FBQ25CLFVBQU07QUFBQ0MsTUFBQUEsU0FBRDtBQUFZQyxNQUFBQSxRQUFaO0FBQXNCQyxNQUFBQSxLQUF0QjtBQUE2QkMsTUFBQUEsT0FBN0I7QUFBc0NDLE1BQUFBO0FBQXRDLFFBQWlELEtBQUtSLEtBQTVEO0FBQ0EsVUFBTVMsSUFBSSxHQUNSSCxLQUFLLEtBQUssRUFBVixHQUFlLElBQWYsZ0JBQ0U7QUFBTSxNQUFBLFNBQVMsRUFBQztBQUFoQixZQUFpREEsS0FBakQsQ0FGSjtBQUlBLHdCQUNFO0FBQ0UsTUFBQSxTQUFTLEVBQUUseUJBQVdGLFNBQVgsRUFBc0IseUJBQXRCLEVBQWlEO0FBQzFELHNDQUE4QkM7QUFENEIsT0FBakQsQ0FEYjtBQUlFLE1BQUEsT0FBTyxFQUFFRSxPQUFPLElBQUksd0NBQTBCQSxPQUExQjtBQUp0QixvQkFLRTtBQUNFLE1BQUEsT0FBTyxFQUFFQyxPQURYO0FBRUUsTUFBQSxTQUFTLEVBQUMsY0FGWjtBQUdFLE1BQUEsUUFBUSxFQUFFSCxRQUhaO0FBSUUsTUFBQSxRQUFRLEVBQUUsS0FBS1YsU0FKakI7QUFLRSxNQUFBLElBQUksRUFBQztBQUxQLE1BTEYsRUFZR2MsSUFaSCxDQURGO0FBZ0JEOztBQWpDZ0Q7OztBQUF0Q2pCLE0sQ0FDSmtCLFksR0FBNkI7QUFDbENMLEVBQUFBLFFBQVEsRUFBRSxLQUR3Qjs7QUFFbENFLEVBQUFBLE9BQU8sQ0FBQ1gsS0FBRCxFQUFRLENBQUU7O0FBRmlCLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxuaW1wb3J0IGlnbm9yZVRleHRTZWxlY3Rpb25FdmVudHMgZnJvbSAnLi9pZ25vcmVUZXh0U2VsZWN0aW9uRXZlbnRzJztcclxuXHJcbnR5cGUgRGVmYXVsdFByb3BzID0ge1xyXG4gIGRpc2FibGVkOiBib29sZWFuLFxyXG4gIG9uQ2xpY2s6IChldmVudDogU3ludGhldGljRXZlbnQ8PikgPT4gbWl4ZWQsXHJcbn07XHJcblxyXG50eXBlIFByb3BzID0ge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZyxcclxuICB0b2dnbGVkOiBib29sZWFuLFxyXG4gIGRpc2FibGVkOiBib29sZWFuLFxyXG4gIGxhYmVsOiA/c3RyaW5nLFxyXG4gIG9uQ2hhbmdlOiAoaXNUb2dnbGVkOiBib29sZWFuKSA9PiBtaXhlZCxcclxuICBvbkNsaWNrOiAoZXZlbnQ6IFN5bnRoZXRpY0V2ZW50PD4pID0+IG1peGVkLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgdG9nZ2xlIGNvbXBvbmVudCB3aXRoIGFuIGlucHV0IHRvZ2dsZSBhbmQgYSBsYWJlbC4gV2UgcmVzdHJpY3QgdGhlIGxhYmVsIHRvIGEgc3RyaW5nXHJcbiAqIHRvIGVuc3VyZSB0aGlzIGNvbXBvbmVudCBpcyBwdXJlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRvZ2dsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHM6IERlZmF1bHRQcm9wcyA9IHtcclxuICAgIGRpc2FibGVkOiBmYWxzZSxcclxuICAgIG9uQ2xpY2soZXZlbnQpIHt9LFxyXG4gIH07XHJcblxyXG4gIF9vbkNoYW5nZSA9IChldmVudDogU3ludGhldGljRXZlbnQ8PikgPT4ge1xyXG4gICAgY29uc3QgaXNUb2dnbGVkID0gKChldmVudC50YXJnZXQ6IGFueSk6IEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQ7XHJcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlLmNhbGwobnVsbCwgaXNUb2dnbGVkKTtcclxuICB9O1xyXG5cclxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XHJcbiAgICBjb25zdCB7Y2xhc3NOYW1lLCBkaXNhYmxlZCwgbGFiZWwsIG9uQ2xpY2ssIHRvZ2dsZWR9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHRleHQgPVxyXG4gICAgICBsYWJlbCA9PT0gJycgPyBudWxsIDogKFxyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm51Y2xpZGUtdWktdG9nZ2xlLWxhYmVsLXRleHRcIj4ge2xhYmVsfTwvc3Bhbj5cclxuICAgICAgKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxsYWJlbFxyXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhjbGFzc05hbWUsICdudWNsaWRlLXVpLXRvZ2dsZS1sYWJlbCcsIHtcclxuICAgICAgICAgICdudWNsaWRlLXVpLXRvZ2dsZS1kaXNhYmxlZCc6IGRpc2FibGVkLFxyXG4gICAgICAgIH0pfVxyXG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2sgJiYgaWdub3JlVGV4dFNlbGVjdGlvbkV2ZW50cyhvbkNsaWNrKX0+XHJcbiAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICBjaGVja2VkPXt0b2dnbGVkfVxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXQtdG9nZ2xlXCJcclxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cclxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLl9vbkNoYW5nZX1cclxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICB7dGV4dH1cclxuICAgICAgPC9sYWJlbD5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==