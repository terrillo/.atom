"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tooltip = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// Our custom ref component invokes a callback after updating
// if the child component has changed. We need a custom ref component
// because stateless functional components can't have refs
class RefWrapper extends React.Component {
  constructor(...args) {
    super(...args);
    this._el = null;
  }

  componentDidMount() {
    this._updateElement();
  }

  componentWillUnmount() {
    if (this._el != null) {
      this._el = null;
      this.props.customRef(null);
    }
  }

  _updateElement() {
    const el = _reactDom.default.findDOMNode(this);

    if (el !== this._el) {
      this._el = el;
      this.props.customRef(null);
      this.props.customRef(el);
    }
  }

  componentDidUpdate(prevProps) {
    if (this.props.children !== prevProps.children) {
      this._updateElement();
    }
  }

  render() {
    return React.Children.only(this.props.children);
  }

}

class Tooltip extends React.Component {
  constructor(props) {
    super(props);
    this._tooltip = void 0;
    this._element = void 0;

    this._displayTooltip = element => {
      if (this._tooltip != null) {
        this._tooltip.dispose();
      }

      if (element != null) {
        this._element = element; // $FlowFixMe - HTMLElement is incompatible with Element

        this._tooltip = atom.tooltips.add(element, {
          title: this.props.title || '',
          delay: this.props.delay
        });
      }
    };

    this._element = null;
  }

  componentDidUpdate(prevProps) {
    if (this._element != null && this.props.title !== prevProps.title) {
      this._displayTooltip(this._element);
    }
  }

  render() {
    return /*#__PURE__*/React.createElement(RefWrapper, {
      customRef: this._displayTooltip
    }, this.props.children);
  }

}

exports.Tooltip = Tooltip;
Tooltip.defaultProps = {
  delay: 0
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1Rvb2x0aXAuanMiXSwibmFtZXMiOlsiUmVmV3JhcHBlciIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX2VsIiwiY29tcG9uZW50RGlkTW91bnQiLCJfdXBkYXRlRWxlbWVudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicHJvcHMiLCJjdXN0b21SZWYiLCJlbCIsIlJlYWN0RE9NIiwiZmluZERPTU5vZGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJjaGlsZHJlbiIsInJlbmRlciIsIkNoaWxkcmVuIiwib25seSIsIlRvb2x0aXAiLCJjb25zdHJ1Y3RvciIsIl90b29sdGlwIiwiX2VsZW1lbnQiLCJfZGlzcGxheVRvb2x0aXAiLCJlbGVtZW50IiwiZGlzcG9zZSIsImF0b20iLCJ0b29sdGlwcyIsImFkZCIsInRpdGxlIiwiZGVsYXkiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTs7QUFDQTs7Ozs7Ozs7QUFiQTs7Ozs7Ozs7Ozs7QUE4QkE7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsVUFBTixTQUF5QkMsS0FBSyxDQUFDQyxTQUEvQixDQUEwRDtBQUFBO0FBQUE7QUFBQSxTQUN4REMsR0FEd0QsR0FDbEQsSUFEa0Q7QUFBQTs7QUFHeERDLEVBQUFBLGlCQUFpQixHQUFTO0FBQ3hCLFNBQUtDLGNBQUw7QUFDRDs7QUFFREMsRUFBQUEsb0JBQW9CLEdBQVM7QUFDM0IsUUFBSSxLQUFLSCxHQUFMLElBQVksSUFBaEIsRUFBc0I7QUFDcEIsV0FBS0EsR0FBTCxHQUFXLElBQVg7QUFDQSxXQUFLSSxLQUFMLENBQVdDLFNBQVgsQ0FBcUIsSUFBckI7QUFDRDtBQUNGOztBQUVESCxFQUFBQSxjQUFjLEdBQVM7QUFDckIsVUFBTUksRUFBRSxHQUFHQyxrQkFBU0MsV0FBVCxDQUFxQixJQUFyQixDQUFYOztBQUNBLFFBQUlGLEVBQUUsS0FBSyxLQUFLTixHQUFoQixFQUFxQjtBQUNuQixXQUFLQSxHQUFMLEdBQVdNLEVBQVg7QUFDQSxXQUFLRixLQUFMLENBQVdDLFNBQVgsQ0FBcUIsSUFBckI7QUFDQSxXQUFLRCxLQUFMLENBQVdDLFNBQVgsQ0FBcUJDLEVBQXJCO0FBQ0Q7QUFDRjs7QUFFREcsRUFBQUEsa0JBQWtCLENBQUNDLFNBQUQsRUFBbUM7QUFDbkQsUUFBSSxLQUFLTixLQUFMLENBQVdPLFFBQVgsS0FBd0JELFNBQVMsQ0FBQ0MsUUFBdEMsRUFBZ0Q7QUFDOUMsV0FBS1QsY0FBTDtBQUNEO0FBQ0Y7O0FBRURVLEVBQUFBLE1BQU0sR0FBZTtBQUNuQixXQUFPZCxLQUFLLENBQUNlLFFBQU4sQ0FBZUMsSUFBZixDQUFvQixLQUFLVixLQUFMLENBQVdPLFFBQS9CLENBQVA7QUFDRDs7QUEvQnVEOztBQWtDbkQsTUFBTUksT0FBTixTQUFzQmpCLEtBQUssQ0FBQ0MsU0FBNUIsQ0FBNkM7QUFJbERpQixFQUFBQSxXQUFXLENBQUNaLEtBQUQsRUFBZTtBQUN4QixVQUFNQSxLQUFOO0FBRHdCLFNBSDFCYSxRQUcwQjtBQUFBLFNBRjFCQyxRQUUwQjs7QUFBQSxTQWdCMUJDLGVBaEIwQixHQWdCUEMsT0FBRCxJQUEwQztBQUMxRCxVQUFJLEtBQUtILFFBQUwsSUFBaUIsSUFBckIsRUFBMkI7QUFDekIsYUFBS0EsUUFBTCxDQUFjSSxPQUFkO0FBQ0Q7O0FBRUQsVUFBSUQsT0FBTyxJQUFJLElBQWYsRUFBcUI7QUFDbkIsYUFBS0YsUUFBTCxHQUFnQkUsT0FBaEIsQ0FEbUIsQ0FFbkI7O0FBQ0EsYUFBS0gsUUFBTCxHQUFnQkssSUFBSSxDQUFDQyxRQUFMLENBQWNDLEdBQWQsQ0FBa0JKLE9BQWxCLEVBQTJCO0FBQ3pDSyxVQUFBQSxLQUFLLEVBQUUsS0FBS3JCLEtBQUwsQ0FBV3FCLEtBQVgsSUFBb0IsRUFEYztBQUV6Q0MsVUFBQUEsS0FBSyxFQUFFLEtBQUt0QixLQUFMLENBQVdzQjtBQUZ1QixTQUEzQixDQUFoQjtBQUlEO0FBQ0YsS0E3QnlCOztBQUd4QixTQUFLUixRQUFMLEdBQWdCLElBQWhCO0FBQ0Q7O0FBTURULEVBQUFBLGtCQUFrQixDQUFDQyxTQUFELEVBQW1CO0FBQ25DLFFBQUksS0FBS1EsUUFBTCxJQUFpQixJQUFqQixJQUF5QixLQUFLZCxLQUFMLENBQVdxQixLQUFYLEtBQXFCZixTQUFTLENBQUNlLEtBQTVELEVBQW1FO0FBQ2pFLFdBQUtOLGVBQUwsQ0FBcUIsS0FBS0QsUUFBMUI7QUFDRDtBQUNGOztBQWlCRE4sRUFBQUEsTUFBTSxHQUFlO0FBQ25CLHdCQUNFLG9CQUFDLFVBQUQ7QUFBWSxNQUFBLFNBQVMsRUFBRSxLQUFLTztBQUE1QixPQUNHLEtBQUtmLEtBQUwsQ0FBV08sUUFEZCxDQURGO0FBS0Q7O0FBekNpRDs7O0FBQXZDSSxPLENBVUpZLFksR0FBNkI7QUFDbENELEVBQUFBLEtBQUssRUFBRTtBQUQyQixDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbnR5cGUgRGVmYXVsdFByb3BzID0ge3xcclxuICBkZWxheTogbnVtYmVyLFxyXG58fTtcclxuXHJcbnR5cGUgUHJvcHMgPSB7fFxyXG4gIHRpdGxlOiBzdHJpbmcsXHJcbiAgZGVsYXk/OiBudW1iZXIsXHJcbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXHJcbnx9O1xyXG5cclxudHlwZSBSZWZXcmFwcGVyUHJvcHMgPSB7fFxyXG4gIGN1c3RvbVJlZjogKGVsZW1lbnQ6IG51bGwgfCBFbGVtZW50IHwgVGV4dCkgPT4gdm9pZCxcclxuICBjaGlsZHJlbjogUmVhY3QuTm9kZSxcclxufH07XHJcblxyXG4vLyBPdXIgY3VzdG9tIHJlZiBjb21wb25lbnQgaW52b2tlcyBhIGNhbGxiYWNrIGFmdGVyIHVwZGF0aW5nXHJcbi8vIGlmIHRoZSBjaGlsZCBjb21wb25lbnQgaGFzIGNoYW5nZWQuIFdlIG5lZWQgYSBjdXN0b20gcmVmIGNvbXBvbmVudFxyXG4vLyBiZWNhdXNlIHN0YXRlbGVzcyBmdW5jdGlvbmFsIGNvbXBvbmVudHMgY2FuJ3QgaGF2ZSByZWZzXHJcbmNsYXNzIFJlZldyYXBwZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UmVmV3JhcHBlclByb3BzPiB7XHJcbiAgX2VsID0gbnVsbDtcclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XHJcbiAgICB0aGlzLl91cGRhdGVFbGVtZW50KCk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9lbCAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX2VsID0gbnVsbDtcclxuICAgICAgdGhpcy5wcm9wcy5jdXN0b21SZWYobnVsbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfdXBkYXRlRWxlbWVudCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IGVsID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XHJcbiAgICBpZiAoZWwgIT09IHRoaXMuX2VsKSB7XHJcbiAgICAgIHRoaXMuX2VsID0gZWw7XHJcbiAgICAgIHRoaXMucHJvcHMuY3VzdG9tUmVmKG51bGwpO1xyXG4gICAgICB0aGlzLnByb3BzLmN1c3RvbVJlZihlbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBSZWZXcmFwcGVyUHJvcHMpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnByb3BzLmNoaWxkcmVuICE9PSBwcmV2UHJvcHMuY2hpbGRyZW4pIHtcclxuICAgICAgdGhpcy5fdXBkYXRlRWxlbWVudCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVG9vbHRpcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIF90b29sdGlwOiBJRGlzcG9zYWJsZTtcclxuICBfZWxlbWVudDogbnVsbCB8IFRleHQgfCBFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHM6IERlZmF1bHRQcm9wcyA9IHtcclxuICAgIGRlbGF5OiAwLFxyXG4gIH07XHJcblxyXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IFByb3BzKSB7XHJcbiAgICBpZiAodGhpcy5fZWxlbWVudCAhPSBudWxsICYmIHRoaXMucHJvcHMudGl0bGUgIT09IHByZXZQcm9wcy50aXRsZSkge1xyXG4gICAgICB0aGlzLl9kaXNwbGF5VG9vbHRpcCh0aGlzLl9lbGVtZW50KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9kaXNwbGF5VG9vbHRpcCA9IChlbGVtZW50OiBudWxsIHwgRWxlbWVudCB8IFRleHQpOiB2b2lkID0+IHtcclxuICAgIGlmICh0aGlzLl90b29sdGlwICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5fdG9vbHRpcC5kaXNwb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVsZW1lbnQgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgLy8gJEZsb3dGaXhNZSAtIEhUTUxFbGVtZW50IGlzIGluY29tcGF0aWJsZSB3aXRoIEVsZW1lbnRcclxuICAgICAgdGhpcy5fdG9vbHRpcCA9IGF0b20udG9vbHRpcHMuYWRkKGVsZW1lbnQsIHtcclxuICAgICAgICB0aXRsZTogdGhpcy5wcm9wcy50aXRsZSB8fCAnJyxcclxuICAgICAgICBkZWxheTogdGhpcy5wcm9wcy5kZWxheSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPFJlZldyYXBwZXIgY3VzdG9tUmVmPXt0aGlzLl9kaXNwbGF5VG9vbHRpcH0+XHJcbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgIDwvUmVmV3JhcHBlcj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==