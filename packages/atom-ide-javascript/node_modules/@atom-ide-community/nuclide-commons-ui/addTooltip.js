"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addTooltip;

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _shallowequal = _interopRequireDefault(require("shallowequal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const REREGISTER_DELAY = 100;

const _tooltipRequests = new Map();

const _createdTooltips = new WeakMap();

const _toDispose = new Set();

let _timeoutHandle;
/**
 * Adds a self-disposing Atom tooltip to a react element.
 *
 * Typical usage:
 * <div ref={addTooltip({title: 'My awesome tooltip', delay: 100, placement: 'top'})} />
 * or, if the ref needs to be preserved:
 * <div ref={c => {
 *   addTooltip({title: 'My awesome tooltip', delay: 100, placement: 'top'})(c);
 *   _myDiv = c;
 * }} />
 */


function addTooltip(options) {
  let node;
  return elementRef => {
    _scheduleTooltipMaintenance();

    if (elementRef == null) {
      if (node != null) {
        if (_tooltipRequests.has(node)) {
          _tooltipRequests.delete(node);
        } else {
          _toDispose.add(node);
        }
      }

      node = null;
      return;
    }

    node = _reactDom.default.findDOMNode(elementRef);

    _tooltipRequests.set(node, options);
  };
}

function _registrationUndoesDisposal(node, options) {
  const created = _createdTooltips.get(node);

  if (created == null) {
    return false;
  }

  return (0, _shallowequal.default)(options, created.options);
}

function _scheduleTooltipMaintenance() {
  if (_timeoutHandle != null) {
    return;
  }

  _timeoutHandle = setTimeout(() => _performMaintenance(), REREGISTER_DELAY);
}

function _performMaintenance() {
  _timeoutHandle = null;

  for (const [node, options] of _tooltipRequests.entries()) {
    if (_registrationUndoesDisposal(node, options)) {
      _toDispose.delete(node);

      _tooltipRequests.delete(node);
    }
  }

  _toDispose.forEach(node => {
    const created = _createdTooltips.get(node);

    if (created != null) {
      created.disposable.dispose();

      _createdTooltips.delete(node);
    }
  });

  _toDispose.clear();

  for (const [node, options] of _tooltipRequests.entries()) {
    // $FlowIgnore
    const disposable = atom.tooltips.add(node, {
      keyBindingTarget: node,
      ...options
    });

    _createdTooltips.set(node, {
      disposable,
      options
    });
  }

  _tooltipRequests.clear();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL2FkZFRvb2x0aXAuanMiXSwibmFtZXMiOlsiUkVSRUdJU1RFUl9ERUxBWSIsIl90b29sdGlwUmVxdWVzdHMiLCJNYXAiLCJfY3JlYXRlZFRvb2x0aXBzIiwiV2Vha01hcCIsIl90b0Rpc3Bvc2UiLCJTZXQiLCJfdGltZW91dEhhbmRsZSIsImFkZFRvb2x0aXAiLCJvcHRpb25zIiwibm9kZSIsImVsZW1lbnRSZWYiLCJfc2NoZWR1bGVUb29sdGlwTWFpbnRlbmFuY2UiLCJoYXMiLCJkZWxldGUiLCJhZGQiLCJSZWFjdERPTSIsImZpbmRET01Ob2RlIiwic2V0IiwiX3JlZ2lzdHJhdGlvblVuZG9lc0Rpc3Bvc2FsIiwiY3JlYXRlZCIsImdldCIsInNldFRpbWVvdXQiLCJfcGVyZm9ybU1haW50ZW5hbmNlIiwiZW50cmllcyIsImZvckVhY2giLCJkaXNwb3NhYmxlIiwiZGlzcG9zZSIsImNsZWFyIiwiYXRvbSIsInRvb2x0aXBzIiwia2V5QmluZGluZ1RhcmdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUNBOztBQUNBOzs7Ozs7OztBQWRBOzs7Ozs7Ozs7OztBQWdCQSxNQUFNQSxnQkFBZ0IsR0FBRyxHQUF6Qjs7QUFFQSxNQUFNQyxnQkFBdUQsR0FBRyxJQUFJQyxHQUFKLEVBQWhFOztBQUNBLE1BQU1DLGdCQUdMLEdBQUcsSUFBSUMsT0FBSixFQUhKOztBQUlBLE1BQU1DLFVBQXdCLEdBQUcsSUFBSUMsR0FBSixFQUFqQzs7QUFDQSxJQUFJQyxjQUFKO0FBRUE7Ozs7Ozs7Ozs7Ozs7QUFXZSxTQUFTQyxVQUFULENBQ2JDLE9BRGEsRUFFZ0M7QUFDN0MsTUFBSUMsSUFBSjtBQUVBLFNBQU9DLFVBQVUsSUFBSTtBQUNuQkMsSUFBQUEsMkJBQTJCOztBQUUzQixRQUFJRCxVQUFVLElBQUksSUFBbEIsRUFBd0I7QUFDdEIsVUFBSUQsSUFBSSxJQUFJLElBQVosRUFBa0I7QUFDaEIsWUFBSVQsZ0JBQWdCLENBQUNZLEdBQWpCLENBQXFCSCxJQUFyQixDQUFKLEVBQWdDO0FBQzlCVCxVQUFBQSxnQkFBZ0IsQ0FBQ2EsTUFBakIsQ0FBd0JKLElBQXhCO0FBQ0QsU0FGRCxNQUVPO0FBQ0xMLFVBQUFBLFVBQVUsQ0FBQ1UsR0FBWCxDQUFlTCxJQUFmO0FBQ0Q7QUFDRjs7QUFDREEsTUFBQUEsSUFBSSxHQUFHLElBQVA7QUFFQTtBQUNEOztBQUVEQSxJQUFBQSxJQUFJLEdBQUtNLGtCQUFTQyxXQUFULENBQXFCTixVQUFyQixDQUFUOztBQUNBVixJQUFBQSxnQkFBZ0IsQ0FBQ2lCLEdBQWpCLENBQXFCUixJQUFyQixFQUEyQkQsT0FBM0I7QUFDRCxHQWxCRDtBQW1CRDs7QUFFRCxTQUFTVSwyQkFBVCxDQUNFVCxJQURGLEVBRUVELE9BRkYsRUFHRTtBQUNBLFFBQU1XLE9BQU8sR0FBR2pCLGdCQUFnQixDQUFDa0IsR0FBakIsQ0FBcUJYLElBQXJCLENBQWhCOztBQUNBLE1BQUlVLE9BQU8sSUFBSSxJQUFmLEVBQXFCO0FBQ25CLFdBQU8sS0FBUDtBQUNEOztBQUVELFNBQU8sMkJBQWFYLE9BQWIsRUFBc0JXLE9BQU8sQ0FBQ1gsT0FBOUIsQ0FBUDtBQUNEOztBQUVELFNBQVNHLDJCQUFULEdBQTZDO0FBQzNDLE1BQUlMLGNBQWMsSUFBSSxJQUF0QixFQUE0QjtBQUMxQjtBQUNEOztBQUVEQSxFQUFBQSxjQUFjLEdBQUdlLFVBQVUsQ0FBQyxNQUFNQyxtQkFBbUIsRUFBMUIsRUFBOEJ2QixnQkFBOUIsQ0FBM0I7QUFDRDs7QUFFRCxTQUFTdUIsbUJBQVQsR0FBcUM7QUFDbkNoQixFQUFBQSxjQUFjLEdBQUcsSUFBakI7O0FBRUEsT0FBSyxNQUFNLENBQUNHLElBQUQsRUFBT0QsT0FBUCxDQUFYLElBQThCUixnQkFBZ0IsQ0FBQ3VCLE9BQWpCLEVBQTlCLEVBQTBEO0FBQ3hELFFBQUlMLDJCQUEyQixDQUFDVCxJQUFELEVBQU9ELE9BQVAsQ0FBL0IsRUFBZ0Q7QUFDOUNKLE1BQUFBLFVBQVUsQ0FBQ1MsTUFBWCxDQUFrQkosSUFBbEI7O0FBQ0FULE1BQUFBLGdCQUFnQixDQUFDYSxNQUFqQixDQUF3QkosSUFBeEI7QUFDRDtBQUNGOztBQUVETCxFQUFBQSxVQUFVLENBQUNvQixPQUFYLENBQW1CZixJQUFJLElBQUk7QUFDekIsVUFBTVUsT0FBTyxHQUFHakIsZ0JBQWdCLENBQUNrQixHQUFqQixDQUFxQlgsSUFBckIsQ0FBaEI7O0FBQ0EsUUFBSVUsT0FBTyxJQUFJLElBQWYsRUFBcUI7QUFDbkJBLE1BQUFBLE9BQU8sQ0FBQ00sVUFBUixDQUFtQkMsT0FBbkI7O0FBQ0F4QixNQUFBQSxnQkFBZ0IsQ0FBQ1csTUFBakIsQ0FBd0JKLElBQXhCO0FBQ0Q7QUFDRixHQU5EOztBQU9BTCxFQUFBQSxVQUFVLENBQUN1QixLQUFYOztBQUVBLE9BQUssTUFBTSxDQUFDbEIsSUFBRCxFQUFPRCxPQUFQLENBQVgsSUFBOEJSLGdCQUFnQixDQUFDdUIsT0FBakIsRUFBOUIsRUFBMEQ7QUFDeEQ7QUFDQSxVQUFNRSxVQUFVLEdBQUdHLElBQUksQ0FBQ0MsUUFBTCxDQUFjZixHQUFkLENBQWtCTCxJQUFsQixFQUF3QjtBQUN6Q3FCLE1BQUFBLGdCQUFnQixFQUFFckIsSUFEdUI7QUFFekMsU0FBR0Q7QUFGc0MsS0FBeEIsQ0FBbkI7O0FBS0FOLElBQUFBLGdCQUFnQixDQUFDZSxHQUFqQixDQUFxQlIsSUFBckIsRUFBMkI7QUFBQ2dCLE1BQUFBLFVBQUQ7QUFBYWpCLE1BQUFBO0FBQWIsS0FBM0I7QUFDRDs7QUFDRFIsRUFBQUEsZ0JBQWdCLENBQUMyQixLQUFqQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICdzaGFsbG93ZXF1YWwnO1xyXG5cclxuY29uc3QgUkVSRUdJU1RFUl9ERUxBWSA9IDEwMDtcclxuXHJcbmNvbnN0IF90b29sdGlwUmVxdWVzdHM6IE1hcDxFbGVtZW50LCBhdG9tJFRvb2x0aXBzQWRkT3B0aW9ucz4gPSBuZXcgTWFwKCk7XHJcbmNvbnN0IF9jcmVhdGVkVG9vbHRpcHM6IFdlYWtNYXA8XHJcbiAgRWxlbWVudCxcclxuICB7b3B0aW9uczogYXRvbSRUb29sdGlwc0FkZE9wdGlvbnMsIGRpc3Bvc2FibGU6IElEaXNwb3NhYmxlfSxcclxuPiA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IF90b0Rpc3Bvc2U6IFNldDxFbGVtZW50PiA9IG5ldyBTZXQoKTtcclxubGV0IF90aW1lb3V0SGFuZGxlOiA/VGltZW91dElEO1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYSBzZWxmLWRpc3Bvc2luZyBBdG9tIHRvb2x0aXAgdG8gYSByZWFjdCBlbGVtZW50LlxyXG4gKlxyXG4gKiBUeXBpY2FsIHVzYWdlOlxyXG4gKiA8ZGl2IHJlZj17YWRkVG9vbHRpcCh7dGl0bGU6ICdNeSBhd2Vzb21lIHRvb2x0aXAnLCBkZWxheTogMTAwLCBwbGFjZW1lbnQ6ICd0b3AnfSl9IC8+XHJcbiAqIG9yLCBpZiB0aGUgcmVmIG5lZWRzIHRvIGJlIHByZXNlcnZlZDpcclxuICogPGRpdiByZWY9e2MgPT4ge1xyXG4gKiAgIGFkZFRvb2x0aXAoe3RpdGxlOiAnTXkgYXdlc29tZSB0b29sdGlwJywgZGVsYXk6IDEwMCwgcGxhY2VtZW50OiAndG9wJ30pKGMpO1xyXG4gKiAgIF9teURpdiA9IGM7XHJcbiAqIH19IC8+XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRUb29sdGlwKFxyXG4gIG9wdGlvbnM6IGF0b20kVG9vbHRpcHNBZGRPcHRpb25zLFxyXG4pOiAoZWxlbWVudFJlZjogUmVhY3QuRWxlbWVudFJlZjxhbnk+KSA9PiB2b2lkIHtcclxuICBsZXQgbm9kZTogP0VsZW1lbnQ7XHJcblxyXG4gIHJldHVybiBlbGVtZW50UmVmID0+IHtcclxuICAgIF9zY2hlZHVsZVRvb2x0aXBNYWludGVuYW5jZSgpO1xyXG5cclxuICAgIGlmIChlbGVtZW50UmVmID09IG51bGwpIHtcclxuICAgICAgaWYgKG5vZGUgIT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChfdG9vbHRpcFJlcXVlc3RzLmhhcyhub2RlKSkge1xyXG4gICAgICAgICAgX3Rvb2x0aXBSZXF1ZXN0cy5kZWxldGUobm9kZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIF90b0Rpc3Bvc2UuYWRkKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBub2RlID0gbnVsbDtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBub2RlID0gKChSZWFjdERPTS5maW5kRE9NTm9kZShlbGVtZW50UmVmKTogYW55KTogRWxlbWVudCk7XHJcbiAgICBfdG9vbHRpcFJlcXVlc3RzLnNldChub2RlLCBvcHRpb25zKTtcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBfcmVnaXN0cmF0aW9uVW5kb2VzRGlzcG9zYWwoXHJcbiAgbm9kZTogRWxlbWVudCxcclxuICBvcHRpb25zOiBhdG9tJFRvb2x0aXBzQWRkT3B0aW9ucyxcclxuKSB7XHJcbiAgY29uc3QgY3JlYXRlZCA9IF9jcmVhdGVkVG9vbHRpcHMuZ2V0KG5vZGUpO1xyXG4gIGlmIChjcmVhdGVkID09IG51bGwpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBzaGFsbG93RXF1YWwob3B0aW9ucywgY3JlYXRlZC5vcHRpb25zKTtcclxufVxyXG5cclxuZnVuY3Rpb24gX3NjaGVkdWxlVG9vbHRpcE1haW50ZW5hbmNlKCk6IHZvaWQge1xyXG4gIGlmIChfdGltZW91dEhhbmRsZSAhPSBudWxsKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBfdGltZW91dEhhbmRsZSA9IHNldFRpbWVvdXQoKCkgPT4gX3BlcmZvcm1NYWludGVuYW5jZSgpLCBSRVJFR0lTVEVSX0RFTEFZKTtcclxufVxyXG5cclxuZnVuY3Rpb24gX3BlcmZvcm1NYWludGVuYW5jZSgpOiB2b2lkIHtcclxuICBfdGltZW91dEhhbmRsZSA9IG51bGw7XHJcblxyXG4gIGZvciAoY29uc3QgW25vZGUsIG9wdGlvbnNdIG9mIF90b29sdGlwUmVxdWVzdHMuZW50cmllcygpKSB7XHJcbiAgICBpZiAoX3JlZ2lzdHJhdGlvblVuZG9lc0Rpc3Bvc2FsKG5vZGUsIG9wdGlvbnMpKSB7XHJcbiAgICAgIF90b0Rpc3Bvc2UuZGVsZXRlKG5vZGUpO1xyXG4gICAgICBfdG9vbHRpcFJlcXVlc3RzLmRlbGV0ZShub2RlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF90b0Rpc3Bvc2UuZm9yRWFjaChub2RlID0+IHtcclxuICAgIGNvbnN0IGNyZWF0ZWQgPSBfY3JlYXRlZFRvb2x0aXBzLmdldChub2RlKTtcclxuICAgIGlmIChjcmVhdGVkICE9IG51bGwpIHtcclxuICAgICAgY3JlYXRlZC5kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcclxuICAgICAgX2NyZWF0ZWRUb29sdGlwcy5kZWxldGUobm9kZSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgX3RvRGlzcG9zZS5jbGVhcigpO1xyXG5cclxuICBmb3IgKGNvbnN0IFtub2RlLCBvcHRpb25zXSBvZiBfdG9vbHRpcFJlcXVlc3RzLmVudHJpZXMoKSkge1xyXG4gICAgLy8gJEZsb3dJZ25vcmVcclxuICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBhdG9tLnRvb2x0aXBzLmFkZChub2RlLCB7XHJcbiAgICAgIGtleUJpbmRpbmdUYXJnZXQ6IG5vZGUsXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9KTtcclxuXHJcbiAgICBfY3JlYXRlZFRvb2x0aXBzLnNldChub2RlLCB7ZGlzcG9zYWJsZSwgb3B0aW9uc30pO1xyXG4gIH1cclxuICBfdG9vbHRpcFJlcXVlc3RzLmNsZWFyKCk7XHJcbn1cclxuIl19