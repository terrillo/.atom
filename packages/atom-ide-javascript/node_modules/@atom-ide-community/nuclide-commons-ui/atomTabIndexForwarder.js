"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global MutationObserver */
// We need a negative tabIndex to mark 'atom-text-editor' as focusable (as focus
// gets forwarded to the underlying input) yet not in the tabOrder so that
// shift-tabbing when the input is focused won't try to focus its own 'atom-text-editor'
// and appear to do nothing.  We can't use '-1' as we want to forward that to
// the underlying input if it is set on atom-text-editor
const FAKE_TAB_INDEX = '-2';

function _default(element) {
  const observer = new MutationObserver(() => {
    const tabIndex = element.getAttribute('tabindex');

    if (tabIndex == null || tabIndex === FAKE_TAB_INDEX) {
      return;
    }

    const input = element.querySelector('input');

    if (input == null) {
      return;
    }

    input.setAttribute('tabindex', tabIndex);
    element.setAttribute('tabindex', FAKE_TAB_INDEX);
  });
  observer.observe(element, {
    attributes: true,
    attributeFilter: ['tabindex']
  });
  return {
    dispose() {
      observer.disconnect();
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL2F0b21UYWJJbmRleEZvcndhcmRlci5qcyJdLCJuYW1lcyI6WyJGQUtFX1RBQl9JTkRFWCIsImVsZW1lbnQiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJ0YWJJbmRleCIsImdldEF0dHJpYnV0ZSIsImlucHV0IiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlRmlsdGVyIiwiZGlzcG9zZSIsImRpc2Nvbm5lY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0FBWUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsY0FBYyxHQUFHLElBQXZCOztBQUVlLGtCQUFTQyxPQUFULEVBQTRDO0FBQ3pELFFBQU1DLFFBQVEsR0FBRyxJQUFJQyxnQkFBSixDQUFxQixNQUFNO0FBQzFDLFVBQU1DLFFBQVEsR0FBR0gsT0FBTyxDQUFDSSxZQUFSLENBQXFCLFVBQXJCLENBQWpCOztBQUNBLFFBQUlELFFBQVEsSUFBSSxJQUFaLElBQW9CQSxRQUFRLEtBQUtKLGNBQXJDLEVBQXFEO0FBQ25EO0FBQ0Q7O0FBQ0QsVUFBTU0sS0FBSyxHQUFHTCxPQUFPLENBQUNNLGFBQVIsQ0FBc0IsT0FBdEIsQ0FBZDs7QUFDQSxRQUFJRCxLQUFLLElBQUksSUFBYixFQUFtQjtBQUNqQjtBQUNEOztBQUNEQSxJQUFBQSxLQUFLLENBQUNFLFlBQU4sQ0FBbUIsVUFBbkIsRUFBK0JKLFFBQS9CO0FBQ0FILElBQUFBLE9BQU8sQ0FBQ08sWUFBUixDQUFxQixVQUFyQixFQUFpQ1IsY0FBakM7QUFDRCxHQVhnQixDQUFqQjtBQWFBRSxFQUFBQSxRQUFRLENBQUNPLE9BQVQsQ0FBaUJSLE9BQWpCLEVBQTBCO0FBQ3hCUyxJQUFBQSxVQUFVLEVBQUUsSUFEWTtBQUV4QkMsSUFBQUEsZUFBZSxFQUFFLENBQUMsVUFBRDtBQUZPLEdBQTFCO0FBS0EsU0FBTztBQUNMQyxJQUFBQSxPQUFPLEdBQVM7QUFDZFYsTUFBQUEsUUFBUSxDQUFDVyxVQUFUO0FBQ0Q7O0FBSEksR0FBUDtBQUtEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbi8qIGdsb2JhbCBNdXRhdGlvbk9ic2VydmVyICovXHJcblxyXG4vLyBXZSBuZWVkIGEgbmVnYXRpdmUgdGFiSW5kZXggdG8gbWFyayAnYXRvbS10ZXh0LWVkaXRvcicgYXMgZm9jdXNhYmxlIChhcyBmb2N1c1xyXG4vLyBnZXRzIGZvcndhcmRlZCB0byB0aGUgdW5kZXJseWluZyBpbnB1dCkgeWV0IG5vdCBpbiB0aGUgdGFiT3JkZXIgc28gdGhhdFxyXG4vLyBzaGlmdC10YWJiaW5nIHdoZW4gdGhlIGlucHV0IGlzIGZvY3VzZWQgd29uJ3QgdHJ5IHRvIGZvY3VzIGl0cyBvd24gJ2F0b20tdGV4dC1lZGl0b3InXHJcbi8vIGFuZCBhcHBlYXIgdG8gZG8gbm90aGluZy4gIFdlIGNhbid0IHVzZSAnLTEnIGFzIHdlIHdhbnQgdG8gZm9yd2FyZCB0aGF0IHRvXHJcbi8vIHRoZSB1bmRlcmx5aW5nIGlucHV0IGlmIGl0IGlzIHNldCBvbiBhdG9tLXRleHQtZWRpdG9yXHJcbmNvbnN0IEZBS0VfVEFCX0lOREVYID0gJy0yJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogSURpc3Bvc2FibGUge1xyXG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xyXG4gICAgY29uc3QgdGFiSW5kZXggPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcclxuICAgIGlmICh0YWJJbmRleCA9PSBudWxsIHx8IHRhYkluZGV4ID09PSBGQUtFX1RBQl9JTkRFWCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbnB1dCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcclxuICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCB0YWJJbmRleCk7XHJcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCBGQUtFX1RBQl9JTkRFWCk7XHJcbiAgfSk7XHJcblxyXG4gIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwge1xyXG4gICAgYXR0cmlidXRlczogdHJ1ZSxcclxuICAgIGF0dHJpYnV0ZUZpbHRlcjogWyd0YWJpbmRleCddLFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcbiJdfQ==