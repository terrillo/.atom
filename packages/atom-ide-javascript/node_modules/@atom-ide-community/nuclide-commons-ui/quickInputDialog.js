"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quickInputDialog;

var _AtomInput = require("./AtomInput");

var _Button = require("./Button");

var _ButtonGroup = require("./ButtonGroup");

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _assert = _interopRequireDefault(require("assert"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global Node */
function quickInputDialog(title, inputLabel, onConfirm, validateInput, initialValue = '') {
  const item = document.createElement('div');
  const panel = atom.workspace.addModalPanel({
    item
  });
  return new Promise((resolve, reject) => {
    const cancel = () => {
      panel.destroy();
      resolve(null);
    };

    _reactDom.default.render( /*#__PURE__*/React.createElement(QuickInputDialog, {
      validateInput: validateInput,
      initialValue: initialValue,
      inputLabel: inputLabel,
      onCancel: cancel,
      onConfirm: content => {
        if (onConfirm) {
          onConfirm(content);
        }

        resolve(content);
        panel.destroy();
      },
      title: title
    }), item);

    panel.onDidDestroy(() => _reactDom.default.unmountComponentAtNode(item));
  });
}

class QuickInputDialog extends React.Component {
  constructor(props) {
    super(props);
    this._disposables = void 0;
    this._rootNode = void 0;

    this._handleOutsideClick = event => {
      const domNode = this._rootNode;
      (0, _assert.default)(event.target instanceof Node);

      if (!domNode || !domNode.contains(event.target)) {
        this.props.onCancel();
      }
    };

    this._handleConfirmClick = () => {
      this.props.onConfirm(this.state.content);
    };

    this._handleInputChange = content => {
      this.setState({
        content
      });
    };

    this.state = {
      content: props.initialValue
    };
    this._disposables = new _UniversalDisposable.default();
  }

  componentDidMount() {
    document.addEventListener('click', this._handleOutsideClick);
    const rootNode = (0, _nullthrows.default)(this._rootNode);

    this._disposables.add(() => document.removeEventListener('click', this._handleOutsideClick), atom.commands.add(rootNode, 'core:confirm', this._handleConfirmClick), atom.commands.add(rootNode, 'core:cancel', this.props.onCancel));
  }

  componentWillUnmount() {
    this._disposables.dispose();
  }

  render() {
    const errorMessage = this.props.validateInput(this.state.content);
    return /*#__PURE__*/React.createElement("div", {
      ref: rootNode => this._rootNode = rootNode
    }, /*#__PURE__*/React.createElement("h6", null, /*#__PURE__*/React.createElement("strong", null, this.props.title)), /*#__PURE__*/React.createElement("label", null, this.props.inputLabel), /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
      autofocus: true,
      initialValue: this.props.initialValue,
      onDidChange: this._handleInputChange,
      startSelected: true
    }), /*#__PURE__*/React.createElement("div", {
      style: {
        display: 'flex',
        justifyContent: 'space-between'
      }
    }, /*#__PURE__*/React.createElement("span", null, errorMessage), /*#__PURE__*/React.createElement(_ButtonGroup.ButtonGroup, {
      size: _ButtonGroup.ButtonGroupSizes.SMALL
    }, /*#__PURE__*/React.createElement(_Button.Button, {
      onClick: this.props.onCancel
    }, "Cancel"), /*#__PURE__*/React.createElement(_Button.Button, {
      buttonType: _Button.ButtonTypes.PRIMARY,
      disabled: errorMessage != null,
      onClick: this._handleConfirmClick
    }, "Confirm"))));
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,