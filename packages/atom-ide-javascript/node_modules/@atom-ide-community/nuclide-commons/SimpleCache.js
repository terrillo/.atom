"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleCache = void 0;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// TODO: Merge this class with @atom-ide-community/nuclide-commons/cache.js because they probably do
//   very similar things

/**
 * Tiny class that is useful to cache simple values.
 * It's quite useful for promises with a SimpleCache<Promise<T>> which allows reusing the same promise.
 */
class SimpleCache {
  constructor(config = {}) {
    this.store = new Map();
    this._dispose = void 0;
    this._keyFactory = void 0;

    if (config.dispose != null) {
      this._dispose = config.dispose;
    }

    this._keyFactory = config.keyFactory != null ? config.keyFactory : keyArgs => keyArgs;
  }

  _getUnsafe(key) {
    return this.store.get(key);
  }

  getOrCreate(keyArgs, factory) {
    const key = this._keyFactory(keyArgs);

    if (this.store.has(key)) {
      return this._getUnsafe(key);
    }

    const value = factory(keyArgs, key);
    this.store.set(key, value);
    return value;
  }

  delete(keyArgs) {
    const key = this._keyFactory(keyArgs);

    if (this._dispose != null) {
      this._ifHas(key, this._dispose);
    }

    this.store.delete(key);
  }

  clear() {
    if (this._dispose != null) {
      this.store.forEach(this._dispose);
    }

    this.store.clear();
  }

  get(keyArgs) {
    return this.store.get(this._keyFactory(keyArgs));
  }

  set(keyArgs, value) {
    this.store.set(this._keyFactory(keyArgs), value);
  }

  ifHas(keyArgs, callback) {
    this._ifHas(this._keyFactory(keyArgs), callback);
  }

  _ifHas(key, callback) {
    if (this.store.has(key)) {
      callback(this._getUnsafe(key));
    }
  }

  keyForArgs(keyArgs) {
    return this._keyFactory(keyArgs);
  }

}

exports.SimpleCache = SimpleCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL1NpbXBsZUNhY2hlLmpzIl0sIm5hbWVzIjpbIlNpbXBsZUNhY2hlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJzdG9yZSIsIk1hcCIsIl9kaXNwb3NlIiwiX2tleUZhY3RvcnkiLCJkaXNwb3NlIiwia2V5RmFjdG9yeSIsImtleUFyZ3MiLCJfZ2V0VW5zYWZlIiwia2V5IiwiZ2V0IiwiZ2V0T3JDcmVhdGUiLCJmYWN0b3J5IiwiaGFzIiwidmFsdWUiLCJzZXQiLCJkZWxldGUiLCJfaWZIYXMiLCJjbGVhciIsImZvckVhY2giLCJpZkhhcyIsImNhbGxiYWNrIiwia2V5Rm9yQXJncyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Ozs7OztBQVlBO0FBQ0E7O0FBRUE7Ozs7QUFhTyxNQUFNQSxXQUFOLENBQThCO0FBS25DQyxFQUFBQSxXQUFXLENBQUNDLE1BQStCLEdBQUcsRUFBbkMsRUFBdUM7QUFBQSxTQUpsREMsS0FJa0QsR0FKM0IsSUFBSUMsR0FBSixFQUkyQjtBQUFBLFNBSGxEQyxRQUdrRDtBQUFBLFNBRmxEQyxXQUVrRDs7QUFDaEQsUUFBSUosTUFBTSxDQUFDSyxPQUFQLElBQWtCLElBQXRCLEVBQTRCO0FBQzFCLFdBQUtGLFFBQUwsR0FBZ0JILE1BQU0sQ0FBQ0ssT0FBdkI7QUFDRDs7QUFDRCxTQUFLRCxXQUFMLEdBQ0VKLE1BQU0sQ0FBQ00sVUFBUCxJQUFxQixJQUFyQixHQUNJTixNQUFNLENBQUNNLFVBRFgsR0FFS0MsT0FBRCxJQUFzQkEsT0FINUI7QUFJRDs7QUFFREMsRUFBQUEsVUFBVSxDQUFDQyxHQUFELEVBQWdCO0FBQ3hCLFdBQVMsS0FBS1IsS0FBTCxDQUFXUyxHQUFYLENBQWVELEdBQWYsQ0FBVDtBQUNEOztBQUVERSxFQUFBQSxXQUFXLENBQUNKLE9BQUQsRUFBbUJLLE9BQW5CLEVBQXNEO0FBQy9ELFVBQU1ILEdBQUcsR0FBRyxLQUFLTCxXQUFMLENBQWlCRyxPQUFqQixDQUFaOztBQUNBLFFBQUksS0FBS04sS0FBTCxDQUFXWSxHQUFYLENBQWVKLEdBQWYsQ0FBSixFQUF5QjtBQUN2QixhQUFPLEtBQUtELFVBQUwsQ0FBZ0JDLEdBQWhCLENBQVA7QUFDRDs7QUFDRCxVQUFNSyxLQUFLLEdBQUdGLE9BQU8sQ0FBQ0wsT0FBRCxFQUFVRSxHQUFWLENBQXJCO0FBQ0EsU0FBS1IsS0FBTCxDQUFXYyxHQUFYLENBQWVOLEdBQWYsRUFBb0JLLEtBQXBCO0FBQ0EsV0FBT0EsS0FBUDtBQUNEOztBQUVERSxFQUFBQSxNQUFNLENBQUNULE9BQUQsRUFBeUI7QUFDN0IsVUFBTUUsR0FBRyxHQUFHLEtBQUtMLFdBQUwsQ0FBaUJHLE9BQWpCLENBQVo7O0FBQ0EsUUFBSSxLQUFLSixRQUFMLElBQWlCLElBQXJCLEVBQTJCO0FBQ3pCLFdBQUtjLE1BQUwsQ0FBWVIsR0FBWixFQUFpQixLQUFLTixRQUF0QjtBQUNEOztBQUNELFNBQUtGLEtBQUwsQ0FBV2UsTUFBWCxDQUFrQlAsR0FBbEI7QUFDRDs7QUFFRFMsRUFBQUEsS0FBSyxHQUFTO0FBQ1osUUFBSSxLQUFLZixRQUFMLElBQWlCLElBQXJCLEVBQTJCO0FBQ3pCLFdBQUtGLEtBQUwsQ0FBV2tCLE9BQVgsQ0FBbUIsS0FBS2hCLFFBQXhCO0FBQ0Q7O0FBQ0QsU0FBS0YsS0FBTCxDQUFXaUIsS0FBWDtBQUNEOztBQUVEUixFQUFBQSxHQUFHLENBQUNILE9BQUQsRUFBdUI7QUFDeEIsV0FBTyxLQUFLTixLQUFMLENBQVdTLEdBQVgsQ0FBZSxLQUFLTixXQUFMLENBQWlCRyxPQUFqQixDQUFmLENBQVA7QUFDRDs7QUFFRFEsRUFBQUEsR0FBRyxDQUFDUixPQUFELEVBQW1CTyxLQUFuQixFQUFtQztBQUNwQyxTQUFLYixLQUFMLENBQVdjLEdBQVgsQ0FBZSxLQUFLWCxXQUFMLENBQWlCRyxPQUFqQixDQUFmLEVBQTBDTyxLQUExQztBQUNEOztBQUVETSxFQUFBQSxLQUFLLENBQUNiLE9BQUQsRUFBbUJjLFFBQW5CLEVBQWlEO0FBQ3BELFNBQUtKLE1BQUwsQ0FBWSxLQUFLYixXQUFMLENBQWlCRyxPQUFqQixDQUFaLEVBQXVDYyxRQUF2QztBQUNEOztBQUVESixFQUFBQSxNQUFNLENBQUNSLEdBQUQsRUFBYVksUUFBYixFQUEyQztBQUMvQyxRQUFJLEtBQUtwQixLQUFMLENBQVdZLEdBQVgsQ0FBZUosR0FBZixDQUFKLEVBQXlCO0FBQ3ZCWSxNQUFBQSxRQUFRLENBQUMsS0FBS2IsVUFBTCxDQUFnQkMsR0FBaEIsQ0FBRCxDQUFSO0FBQ0Q7QUFDRjs7QUFFRGEsRUFBQUEsVUFBVSxDQUFDZixPQUFELEVBQTBCO0FBQ2xDLFdBQU8sS0FBS0gsV0FBTCxDQUFpQkcsT0FBakIsQ0FBUDtBQUNEOztBQWhFa0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG4vLyBUT0RPOiBNZXJnZSB0aGlzIGNsYXNzIHdpdGggQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvY2FjaGUuanMgYmVjYXVzZSB0aGV5IHByb2JhYmx5IGRvXHJcbi8vICAgdmVyeSBzaW1pbGFyIHRoaW5nc1xyXG5cclxuLyoqXHJcbiAqIFRpbnkgY2xhc3MgdGhhdCBpcyB1c2VmdWwgdG8gY2FjaGUgc2ltcGxlIHZhbHVlcy5cclxuICogSXQncyBxdWl0ZSB1c2VmdWwgZm9yIHByb21pc2VzIHdpdGggYSBTaW1wbGVDYWNoZTxQcm9taXNlPFQ+PiB3aGljaCBhbGxvd3MgcmV1c2luZyB0aGUgc2FtZSBwcm9taXNlLlxyXG4gKi9cclxuXHJcbnR5cGUgRGlzcG9zZUNhbGxiYWNrPFQ+ID0gKHZhbHVlOiBUKSA9PiB2b2lkO1xyXG50eXBlIEtleUZhY3Rvcnk8S2V5QXJncz4gPSAoYXJnczogS2V5QXJncykgPT4gbWl4ZWQ7XHJcblxyXG50eXBlIENhY2hlQ29uZmlnPEtleUFyZ3MsIFQ+ID0ge1xyXG4gIGtleUZhY3Rvcnk/OiBLZXlGYWN0b3J5PEtleUFyZ3M+LFxyXG4gIGRpc3Bvc2U/OiBEaXNwb3NlQ2FsbGJhY2s8VD4sXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgU2ltcGxlQ2FjaGU8S2V5QXJncywgVD4ge1xyXG4gIHN0b3JlOiBNYXA8bWl4ZWQsIFQ+ID0gbmV3IE1hcCgpO1xyXG4gIF9kaXNwb3NlOiA/RGlzcG9zZUNhbGxiYWNrPFQ+O1xyXG4gIF9rZXlGYWN0b3J5OiBLZXlGYWN0b3J5PEtleUFyZ3M+O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb25maWc6IENhY2hlQ29uZmlnPEtleUFyZ3MsIFQ+ID0ge30pIHtcclxuICAgIGlmIChjb25maWcuZGlzcG9zZSAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX2Rpc3Bvc2UgPSBjb25maWcuZGlzcG9zZTtcclxuICAgIH1cclxuICAgIHRoaXMuX2tleUZhY3RvcnkgPVxyXG4gICAgICBjb25maWcua2V5RmFjdG9yeSAhPSBudWxsXHJcbiAgICAgICAgPyBjb25maWcua2V5RmFjdG9yeVxyXG4gICAgICAgIDogKGtleUFyZ3M6IEtleUFyZ3MpID0+IGtleUFyZ3M7XHJcbiAgfVxyXG5cclxuICBfZ2V0VW5zYWZlKGtleTogbWl4ZWQpOiBUIHtcclxuICAgIHJldHVybiAoKHRoaXMuc3RvcmUuZ2V0KGtleSk6IGFueSk6IFQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0T3JDcmVhdGUoa2V5QXJnczogS2V5QXJncywgZmFjdG9yeTogKEtleUFyZ3MsIG1peGVkKSA9PiBUKTogVCB7XHJcbiAgICBjb25zdCBrZXkgPSB0aGlzLl9rZXlGYWN0b3J5KGtleUFyZ3MpO1xyXG4gICAgaWYgKHRoaXMuc3RvcmUuaGFzKGtleSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2dldFVuc2FmZShrZXkpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmFsdWUgPSBmYWN0b3J5KGtleUFyZ3MsIGtleSk7XHJcbiAgICB0aGlzLnN0b3JlLnNldChrZXksIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZShrZXlBcmdzOiBLZXlBcmdzKTogdm9pZCB7XHJcbiAgICBjb25zdCBrZXkgPSB0aGlzLl9rZXlGYWN0b3J5KGtleUFyZ3MpO1xyXG4gICAgaWYgKHRoaXMuX2Rpc3Bvc2UgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9pZkhhcyhrZXksIHRoaXMuX2Rpc3Bvc2UpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdG9yZS5kZWxldGUoa2V5KTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2Rpc3Bvc2UgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnN0b3JlLmZvckVhY2godGhpcy5fZGlzcG9zZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnN0b3JlLmNsZWFyKCk7XHJcbiAgfVxyXG5cclxuICBnZXQoa2V5QXJnczogS2V5QXJncyk6ID9UIHtcclxuICAgIHJldHVybiB0aGlzLnN0b3JlLmdldCh0aGlzLl9rZXlGYWN0b3J5KGtleUFyZ3MpKTtcclxuICB9XHJcblxyXG4gIHNldChrZXlBcmdzOiBLZXlBcmdzLCB2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgdGhpcy5zdG9yZS5zZXQodGhpcy5fa2V5RmFjdG9yeShrZXlBcmdzKSwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgaWZIYXMoa2V5QXJnczogS2V5QXJncywgY2FsbGJhY2s6ICh2YWx1ZTogVCkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5faWZIYXModGhpcy5fa2V5RmFjdG9yeShrZXlBcmdzKSwgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgX2lmSGFzKGtleTogbWl4ZWQsIGNhbGxiYWNrOiAodmFsdWU6IFQpID0+IHZvaWQpIHtcclxuICAgIGlmICh0aGlzLnN0b3JlLmhhcyhrZXkpKSB7XHJcbiAgICAgIGNhbGxiYWNrKHRoaXMuX2dldFVuc2FmZShrZXkpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGtleUZvckFyZ3Moa2V5QXJnczogS2V5QXJncyk6IG1peGVkIHtcclxuICAgIHJldHVybiB0aGlzLl9rZXlGYWN0b3J5KGtleUFyZ3MpO1xyXG4gIH1cclxufVxyXG4iXX0=