"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DISPOSE_VALUE = exports.Cache = void 0;

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// A Cache mapping keys to values which creates entries as they are requested.
class Cache {
  constructor(factory, disposeValue = value => {}) {
    this._values = void 0;
    this._factory = void 0;
    this._disposeValue = void 0;
    this._entriesSubject = void 0;
    this._values = new Map();
    this._factory = factory;
    this._disposeValue = disposeValue;
    this._entriesSubject = new _rxjsCompatUmdMin.Subject();
  }

  has(key) {
    return this._values.has(key);
  }

  get(key) {
    if (!this._values.has(key)) {
      const newValue = this._factory(key);

      this._values.set(key, newValue);

      this._entriesSubject.next([key, newValue]);

      return newValue;
    } else {
      // Cannot use invariant as ValueType may include null/undefined.
      return this._values.get(key);
    }
  } // After this method this._values.keys() === newKeys.
  // deletes all keys not in newKeys
  // gets all keys in newKeys


  setKeys(newKeys) {
    for (const existingKey of this._values.keys()) {
      if (!newKeys.has(existingKey)) {
        this.delete(existingKey);
      }
    }

    for (const newKey of newKeys) {
      this.get(newKey);
    }
  }

  entries() {
    return this._values.entries();
  }

  keys() {
    return this._values.keys();
  }

  values() {
    return this._values.values();
  }

  observeValues() {
    return this.observeEntries().map(entry => entry[1]);
  }

  observeEntries() {
    return _rxjsCompatUmdMin.Observable.concat(_rxjsCompatUmdMin.Observable.from(this._values.entries()), this._entriesSubject);
  }

  observeKeys() {
    return this.observeEntries().map(entry => entry[0]);
  }

  delete(key) {
    if (this.has(key)) {
      const value = this.get(key);

      this._values.delete(key);

      this._disposeValue(value);

      return true;
    } else {
      return false;
    }
  }

  clear() {
    // Defend against a dispose call removing elements from the Cache.
    const values = this._values;
    this._values = new Map();

    for (const value of values.values()) {
      this._disposeValue(value);
    }
  }

  dispose() {
    this.clear();

    this._entriesSubject.complete();
  }

} // Useful for optional second parameter to Cache constructor.


exports.Cache = Cache;

const DISPOSE_VALUE = value => {
  value.dispose();
};

exports.DISPOSE_VALUE = DISPOSE_VALUE;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL2NhY2hlLmpzIl0sIm5hbWVzIjpbIkNhY2hlIiwiY29uc3RydWN0b3IiLCJmYWN0b3J5IiwiZGlzcG9zZVZhbHVlIiwidmFsdWUiLCJfdmFsdWVzIiwiX2ZhY3RvcnkiLCJfZGlzcG9zZVZhbHVlIiwiX2VudHJpZXNTdWJqZWN0IiwiTWFwIiwiU3ViamVjdCIsImhhcyIsImtleSIsImdldCIsIm5ld1ZhbHVlIiwic2V0IiwibmV4dCIsInNldEtleXMiLCJuZXdLZXlzIiwiZXhpc3RpbmdLZXkiLCJrZXlzIiwiZGVsZXRlIiwibmV3S2V5IiwiZW50cmllcyIsInZhbHVlcyIsIm9ic2VydmVWYWx1ZXMiLCJvYnNlcnZlRW50cmllcyIsIm1hcCIsImVudHJ5IiwiT2JzZXJ2YWJsZSIsImNvbmNhdCIsImZyb20iLCJvYnNlcnZlS2V5cyIsImNsZWFyIiwiZGlzcG9zZSIsImNvbXBsZXRlIiwiRElTUE9TRV9WQUxVRSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQVpBOzs7Ozs7Ozs7OztBQWNBO0FBQ08sTUFBTUEsS0FBTixDQUFnQztBQU1yQ0MsRUFBQUEsV0FBVyxDQUNUQyxPQURTLEVBRVRDLFlBQXlDLEdBQUdDLEtBQUssSUFBSSxDQUFFLENBRjlDLEVBR1Q7QUFBQSxTQVJGQyxPQVFFO0FBQUEsU0FQRkMsUUFPRTtBQUFBLFNBTkZDLGFBTUU7QUFBQSxTQUxGQyxlQUtFO0FBQ0EsU0FBS0gsT0FBTCxHQUFlLElBQUlJLEdBQUosRUFBZjtBQUNBLFNBQUtILFFBQUwsR0FBZ0JKLE9BQWhCO0FBQ0EsU0FBS0ssYUFBTCxHQUFxQkosWUFBckI7QUFDQSxTQUFLSyxlQUFMLEdBQXVCLElBQUlFLHlCQUFKLEVBQXZCO0FBQ0Q7O0FBRURDLEVBQUFBLEdBQUcsQ0FBQ0MsR0FBRCxFQUF3QjtBQUN6QixXQUFPLEtBQUtQLE9BQUwsQ0FBYU0sR0FBYixDQUFpQkMsR0FBakIsQ0FBUDtBQUNEOztBQUVEQyxF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QUEsS0FBSyxDQUFDOEIsT0FBTjtBQUNELENBRk0iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gJ3J4anMtY29tcGF0L2J1bmRsZXMvcnhqcy1jb21wYXQudW1kLm1pbi5qcyc7XHJcblxyXG4vLyBBIENhY2hlIG1hcHBpbmcga2V5cyB0byB2YWx1ZXMgd2hpY2ggY3JlYXRlcyBlbnRyaWVzIGFzIHRoZXkgYXJlIHJlcXVlc3RlZC5cclxuZXhwb3J0IGNsYXNzIENhY2hlPEtleVR5cGUsIFZhbHVlVHlwZT4ge1xyXG4gIF92YWx1ZXM6IE1hcDxLZXlUeXBlLCBWYWx1ZVR5cGU+O1xyXG4gIF9mYWN0b3J5OiAoa2V5OiBLZXlUeXBlKSA9PiBWYWx1ZVR5cGU7XHJcbiAgX2Rpc3Bvc2VWYWx1ZTogKHZhbHVlOiBWYWx1ZVR5cGUpID0+IG1peGVkO1xyXG4gIF9lbnRyaWVzU3ViamVjdDogU3ViamVjdDxbS2V5VHlwZSwgVmFsdWVUeXBlXT47XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgZmFjdG9yeTogKGtleTogS2V5VHlwZSkgPT4gVmFsdWVUeXBlLFxyXG4gICAgZGlzcG9zZVZhbHVlOiAodmFsdWU6IFZhbHVlVHlwZSkgPT4gbWl4ZWQgPSB2YWx1ZSA9PiB7fSxcclxuICApIHtcclxuICAgIHRoaXMuX3ZhbHVlcyA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMuX2ZhY3RvcnkgPSBmYWN0b3J5O1xyXG4gICAgdGhpcy5fZGlzcG9zZVZhbHVlID0gZGlzcG9zZVZhbHVlO1xyXG4gICAgdGhpcy5fZW50cmllc1N1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xyXG4gIH1cclxuXHJcbiAgaGFzKGtleTogS2V5VHlwZSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcy5oYXMoa2V5KTtcclxuICB9XHJcblxyXG4gIGdldChrZXk6IEtleVR5cGUpOiBWYWx1ZVR5cGUge1xyXG4gICAgaWYgKCF0aGlzLl92YWx1ZXMuaGFzKGtleSkpIHtcclxuICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLl9mYWN0b3J5KGtleSk7XHJcbiAgICAgIHRoaXMuX3ZhbHVlcy5zZXQoa2V5LCBuZXdWYWx1ZSk7XHJcbiAgICAgIHRoaXMuX2VudHJpZXNTdWJqZWN0Lm5leHQoW2tleSwgbmV3VmFsdWVdKTtcclxuICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ2Fubm90IHVzZSBpbnZhcmlhbnQgYXMgVmFsdWVUeXBlIG1heSBpbmNsdWRlIG51bGwvdW5kZWZpbmVkLlxyXG4gICAgICByZXR1cm4gKHRoaXMuX3ZhbHVlcy5nZXQoa2V5KTogYW55KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEFmdGVyIHRoaXMgbWV0aG9kIHRoaXMuX3ZhbHVlcy5rZXlzKCkgPT09IG5ld0tleXMuXHJcbiAgLy8gZGVsZXRlcyBhbGwga2V5cyBub3QgaW4gbmV3S2V5c1xyXG4gIC8vIGdldHMgYWxsIGtleXMgaW4gbmV3S2V5c1xyXG4gIHNldEtleXMobmV3S2V5czogU2V0PEtleVR5cGU+KTogdm9pZCB7XHJcbiAgICBmb3IgKGNvbnN0IGV4aXN0aW5nS2V5IG9mIHRoaXMuX3ZhbHVlcy5rZXlzKCkpIHtcclxuICAgICAgaWYgKCFuZXdLZXlzLmhhcyhleGlzdGluZ0tleSkpIHtcclxuICAgICAgICB0aGlzLmRlbGV0ZShleGlzdGluZ0tleSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IG5ld0tleSBvZiBuZXdLZXlzKSB7XHJcbiAgICAgIHRoaXMuZ2V0KG5ld0tleSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbnRyaWVzKCk6IEl0ZXJhdG9yPFtLZXlUeXBlLCBWYWx1ZVR5cGVdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmVudHJpZXMoKTtcclxuICB9XHJcblxyXG4gIGtleXMoKTogSXRlcmF0b3I8S2V5VHlwZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcy5rZXlzKCk7XHJcbiAgfVxyXG5cclxuICB2YWx1ZXMoKTogSXRlcmF0b3I8VmFsdWVUeXBlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzLnZhbHVlcygpO1xyXG4gIH1cclxuXHJcbiAgb2JzZXJ2ZVZhbHVlcygpOiBPYnNlcnZhYmxlPFZhbHVlVHlwZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZUVudHJpZXMoKS5tYXAoZW50cnkgPT4gZW50cnlbMV0pO1xyXG4gIH1cclxuXHJcbiAgb2JzZXJ2ZUVudHJpZXMoKTogT2JzZXJ2YWJsZTxbS2V5VHlwZSwgVmFsdWVUeXBlXT4ge1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGUuY29uY2F0KFxyXG4gICAgICBPYnNlcnZhYmxlLmZyb20odGhpcy5fdmFsdWVzLmVudHJpZXMoKSksXHJcbiAgICAgIHRoaXMuX2VudHJpZXNTdWJqZWN0LFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9ic2VydmVLZXlzKCk6IE9ic2VydmFibGU8S2V5VHlwZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZUVudHJpZXMoKS5tYXAoZW50cnkgPT4gZW50cnlbMF0pO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGtleTogS2V5VHlwZSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldChrZXkpO1xyXG4gICAgICB0aGlzLl92YWx1ZXMuZGVsZXRlKGtleSk7XHJcbiAgICAgIHRoaXMuX2Rpc3Bvc2VWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xlYXIoKTogdm9pZCB7XHJcbiAgICAvLyBEZWZlbmQgYWdhaW5zdCBhIGRpc3Bvc2UgY2FsbCByZW1vdmluZyBlbGVtZW50cyBmcm9tIHRoZSBDYWNoZS5cclxuICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMuX3ZhbHVlcztcclxuICAgIHRoaXMuX3ZhbHVlcyA9IG5ldyBNYXAoKTtcclxuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzLnZhbHVlcygpKSB7XHJcbiAgICAgIHRoaXMuX2Rpc3Bvc2VWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jbGVhcigpO1xyXG4gICAgdGhpcy5fZW50cmllc1N1YmplY3QuY29tcGxldGUoKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIFVzZWZ1bCBmb3Igb3B0aW9uYWwgc2Vjb25kIHBhcmFtZXRlciB0byBDYWNoZSBjb25zdHJ1Y3Rvci5cclxuZXhwb3J0IGNvbnN0IERJU1BPU0VfVkFMVUUgPSAodmFsdWU6IElEaXNwb3NhYmxlKSA9PiB7XHJcbiAgdmFsdWUuZGlzcG9zZSgpO1xyXG59O1xyXG4iXX0=