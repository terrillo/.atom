"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = debounce;

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function debounce(func, wait, immediate = false) {
  // Taken from: https://github.com/jashkenas/underscore/blob/b10b2e6d72/underscore.js#L815.
  let timeout;
  let args;
  let context;
  let timestamp = 0;
  let result;

  const later = function () {
    const last = Date.now() - timestamp;

    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;

      if (!immediate) {
        (0, _assert.default)(args != null);
        result = func.apply(context, args);

        if (!timeout) {
          context = args = null;
        }
      }
    }
  };

  const debounced = function (...args_) {
    context = this;
    args = args_;
    timestamp = Date.now();
    const callNow = immediate && !timeout;

    if (!timeout) {
      timeout = setTimeout(later, wait);
    }

    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }

    return result;
  };

  debounced.dispose = () => {
    if (timeout) {
      clearTimeout(timeout);
      timeout = context = args = null;
    }
  };

  return debounced;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL2RlYm91bmNlLmpzIl0sIm5hbWVzIjpbImRlYm91bmNlIiwiZnVuYyIsIndhaXQiLCJpbW1lZGlhdGUiLCJ0aW1lb3V0IiwiYXJncyIsImNvbnRleHQiLCJ0aW1lc3RhbXAiLCJyZXN1bHQiLCJsYXRlciIsImxhc3QiLCJEYXRlIiwibm93Iiwic2V0VGltZW91dCIsImFwcGx5IiwiZGVib3VuY2VkIiwiYXJnc18iLCJjYWxsTm93IiwiZGlzcG9zZSIsImNsZWFyVGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOzs7O0FBWkE7Ozs7Ozs7Ozs7O0FBY2UsU0FBU0EsUUFBVCxDQU1iQyxJQU5hLEVBT2JDLElBUGEsRUFRYkMsU0FBbUIsR0FBRyxLQVJULEVBWWI7QUFDQTtBQUNBLE1BQUlDLE9BQUo7QUFDQSxNQUFJQyxJQUFKO0FBQ0EsTUFBSUMsT0FBSjtBQUNBLE1BQUlDLFNBQVMsR0FBRyxDQUFoQjtBQUNBLE1BQUlDLE1BQUo7O0FBRUEsUUFBTUMsS0FBSyxHQUFHLFlBQVc7QUFDdkIsVUFBTUMsSUFBSSxHQUFHQyxJQUFJLENBQUNDLEdBQUwsS0FBYUwsU0FBMUI7O0FBRUEsUUFBSUcsSUFBSSxHQUFHUixJQUFQLElBQWVRLElBQUksSUFBSSxDQUEzQixFQUE4QjtBQUM1Qk4sTUFBQUEsT0FBTyxHQUFHUyxVQUFVLENBQUNKLEtBQUQsRUFBUVAsSUFBSSxHQUFHUSxJQUFmLENBQXBCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xOLE1BQUFBLE9BQU8sR0FBRyxJQUFWOztBQUNBLFVBQUksQ0FBQ0QsU0FBTCxFQUFnQjtBQUNkLDZCQUFVRSxJQUFJLElBQUksSUFBbEI7QUFDQUcsUUFBQUEsTUFBTSxHQUFHUCxJQUFJLENBQUNhLEtBQUwsQ0FBV1IsT0FBWCxFQUFvQkQsSUFBcEIsQ0FBVDs7QUFDQSxZQUFJLENBQUNELE9BQUwsRUFBYztBQUNaRSxVQUFBQSxPQUFPLEdBQUdELElBQUksR0FBRyxJQUFqQjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLEdBZkQ7O0FBaUJBLFFBQU1VLFNBQVMsR0FBRyxVQUFTLEdBQUdDLEtBQVosRUFBMEM7QUFDMURWLElBQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0FELElBQUFBLElBQUksR0FBR1csS0FBUDtBQUNBVCxJQUFBQSxTQUFTLEdBQUdJLElBQUksQ0FBQ0MsR0FBTCxFQUFaO0FBQ0EsVUFBTUssT0FBTyxHQUFHZCxTQUFTLElBQUksQ0FBQ0MsT0FBOUI7O0FBQ0EsUUFBSSxDQUFDQSxPQUFMLEVBQWM7QUFDWkEsTUFBQUEsT0FBTyxHQUFHUyxVQUFVLENBQUNKLEtBQUQsRUFBUVAsSUFBUixDQUFwQjtBQUNEOztBQUNELFFBQUllLE9BQUosRUFBYTtBQUNYVCxNQUFBQSxNQUFNLEdBQUdQLElBQUksQ0FBQ2EsS0FBTCxDQUFXUixPQUFYLEVBQW9CRCxJQUFwQixDQUFUO0FBQ0FDLE1BQUFBLE9BQU8sR0FBR0QsSUFBSSxHQUFHLElBQWpCO0FBQ0Q7O0FBRUQsV0FBT0csTUFBUDtBQUNELEdBZEQ7O0FBZ0JBTyxFQUFBQSxTQUFTLENBQUNHLE9BQVYsR0FBb0IsTUFBTTtBQUN4QixRQUFJZCxPQUFKLEVBQWE7QUFDWGUsTUFBQUEsWUFBWSxDQUFDZixPQUFELENBQVo7QUFDQUEsTUFBQUEsT0FBTyxHQUFHRSxPQUFPLEdBQUdELElBQUksR0FBRyxJQUEzQjtBQUNEO0FBQ0YsR0FMRDs7QUFPQSxTQUFPVSxTQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2Fzc2VydCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZTxcclxuICBULFxyXG4gIFRBcmdzOiBBcnJheTxUPixcclxuICBUUmV0dXJuLFxyXG4gIFRGdW5jOiAoLi4uVEFyZ3MpID0+IFRSZXR1cm4sIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgc3BhY2UtYmVmb3JlLWZ1bmN0aW9uLXBhcmVuXHJcbj4oXHJcbiAgZnVuYzogVEZ1bmMsXHJcbiAgd2FpdDogbnVtYmVyLFxyXG4gIGltbWVkaWF0ZT86IGJvb2xlYW4gPSBmYWxzZSxcclxuKToge1xyXG4gICguLi5UQXJncyk6IFRSZXR1cm4gfCB2b2lkLFxyXG4gIGRpc3Bvc2UoKTogdm9pZCxcclxufSB7XHJcbiAgLy8gVGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2Jsb2IvYjEwYjJlNmQ3Mi91bmRlcnNjb3JlLmpzI0w4MTUuXHJcbiAgbGV0IHRpbWVvdXQ6ID9UaW1lb3V0SUQ7XHJcbiAgbGV0IGFyZ3M6ID9UQXJncztcclxuICBsZXQgY29udGV4dDogYW55O1xyXG4gIGxldCB0aW1lc3RhbXAgPSAwO1xyXG4gIGxldCByZXN1bHQ6IFRSZXR1cm4gfCB2b2lkO1xyXG5cclxuICBjb25zdCBsYXRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgbGFzdCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXA7XHJcblxyXG4gICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xyXG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGltZW91dCA9IG51bGw7XHJcbiAgICAgIGlmICghaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgaW52YXJpYW50KGFyZ3MgIT0gbnVsbCk7XHJcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICBpZiAoIXRpbWVvdXQpIHtcclxuICAgICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBkZWJvdW5jZWQgPSBmdW5jdGlvbiguLi5hcmdzXzogVEFyZ3MpOiBUUmV0dXJuIHwgdm9pZCB7XHJcbiAgICBjb250ZXh0ID0gdGhpcztcclxuICAgIGFyZ3MgPSBhcmdzXztcclxuICAgIHRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICBjb25zdCBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xyXG4gICAgaWYgKCF0aW1lb3V0KSB7XHJcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcclxuICAgIH1cclxuICAgIGlmIChjYWxsTm93KSB7XHJcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XHJcbiAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH07XHJcblxyXG4gIGRlYm91bmNlZC5kaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgaWYgKHRpbWVvdXQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICB0aW1lb3V0ID0gY29udGV4dCA9IGFyZ3MgPSBudWxsO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiBkZWJvdW5jZWQ7XHJcbn1cclxuIl19