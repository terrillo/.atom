"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortLabelValue = sortLabelValue;
exports.sortSubmenuGroup = sortSubmenuGroup;
exports.sortMenuGroups = sortMenuGroups;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function sortLabelValue(label) {
  // Ignore the Windows accelerator key hint when sorting, the & doesn't
  // actually appear in the UX so it shouldn't affect the sort.
  return String(label).replace('&', '');
}

function sortSubmenuGroup(menuItems, startIndex, itemCount) {
  // Sort a subset of the items in the menu of length itemCount beginning
  // at startIndex.
  const itemsToSort = menuItems.splice(startIndex, itemCount);
  itemsToSort.sort((a, b) => {
    // Always put the "Version" label up top.
    if (sortLabelValue(a.label).startsWith('Version')) {
      return -1;
    } else {
      return sortLabelValue(a.label).localeCompare(sortLabelValue(b.label));
    }
  });
  menuItems.splice(startIndex, 0, ...itemsToSort);
}

function sortMenuGroups(menuNames) {
  for (const menuName of menuNames) {
    // Sorts the items in a menu alphabetically. If the menu contains one or more
    // separators, then the items within each separator subgroup will be sorted
    // with respect to each other, but items will remain in the same groups, and
    // the separators will not be moved.
    const menu = atom.menu.template.find(m => sortLabelValue(m.label) === menuName);

    if (menu == null) {
      continue;
    } // Sort each group of items (separated by a separator) individually.


    let sortStart = 0;

    for (let i = 0; i < menu.submenu.length; i++) {
      if (menu.submenu[i].type === 'separator') {
        sortSubmenuGroup(menu.submenu, sortStart, i - sortStart);
        sortStart = i + 1;
      }
    } // Sort any remaining items after the last separator.


    if (sortStart < menu.submenu.length) {
      sortSubmenuGroup(menu.submenu, sortStart, menu.submenu.length - sortStart);
    }
  }

  atom.menu.update();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL21lbnVVdGlscy5qcyJdLCJuYW1lcyI6WyJzb3J0TGFiZWxWYWx1ZSIsImxhYmVsIiwiU3RyaW5nIiwicmVwbGFjZSIsInNvcnRTdWJtZW51R3JvdXAiLCJtZW51SXRlbXMiLCJzdGFydEluZGV4IiwiaXRlbUNvdW50IiwiaXRlbXNUb1NvcnQiLCJzcGxpY2UiLCJzb3J0IiwiYSIsImIiLCJzdGFydHNXaXRoIiwibG9jYWxlQ29tcGFyZSIsInNvcnRNZW51R3JvdXBzIiwibWVudU5hbWVzIiwibWVudU5hbWUiLCJtZW51IiwiYXRvbSIsInRlbXBsYXRlIiwiZmluZCIsIm0iLCJzb3J0U3RhcnQiLCJpIiwic3VibWVudSIsImxlbmd0aCIsInR5cGUiLCJ1cGRhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7OztBQVlPLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQXdDO0FBQzdDO0FBQ0E7QUFDQSxTQUFPQyxNQUFNLENBQUNELEtBQUQsQ0FBTixDQUFjRSxPQUFkLENBQXNCLEdBQXRCLEVBQTJCLEVBQTNCLENBQVA7QUFDRDs7QUFFTSxTQUFTQyxnQkFBVCxDQUNMQyxTQURLLEVBSUxDLFVBSkssRUFLTEMsU0FMSyxFQU1MO0FBQ0E7QUFDQTtBQUNBLFFBQU1DLFdBQVcsR0FBR0gsU0FBUyxDQUFDSSxNQUFWLENBQWlCSCxVQUFqQixFQUE2QkMsU0FBN0IsQ0FBcEI7QUFDQUMsRUFBQUEsV0FBVyxDQUFDRSxJQUFaLENBQWlCLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVO0FBQ3pCO0FBQ0EsUUFBSVosY0FBYyxDQUFDVyxDQUFDLENBQUNWLEtBQUgsQ0FBZCxDQUF3QlksVUFBeEIsQ0FBbUMsU0FBbkMsQ0FBSixFQUFtRDtBQUNqRCxhQUFPLENBQUMsQ0FBUjtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU9iLGNBQWMsQ0FBQ1csQ0FBQyxDQUFDVixLQUFILENBQWQsQ0FBd0JhLGFBQXhCLENBQXNDZCxjQUFjLENBQUNZLENBQUMsQ0FBQ1gsS0FBSCxDQUFwRCxDQUFQO0FBQ0Q7QUFDRixHQVBEO0FBU0FJLEVBQUFBLFNBQVMsQ0FBQ0ksTUFBVixDQUFpQkgsVUFBakIsRUFBNkIsQ0FBN0IsRUFBZ0MsR0FBR0UsV0FBbkM7QUFDRDs7QUFFTSxTQUFTTyxjQUFULENBQXdCQyxTQUF4QixFQUFrRDtBQUN2RCxPQUFLLE1BQU1DLFFBQVgsSUFBdUJELFNBQXZCLEVBQWtDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBTUUsSUFBSSxHQUFHQyxJQUFJLENBQUNELElBQUwsQ0FBVUUsUUFBVixDQUFtQkMsSUFBbkIsQ0FDWEMsQ0FBQyxJQUFJdEIsY0FBYyxDQUFDc0IsQ0FBQyxDQUFDckIsS0FBSCxDQUFkLEtBQTRCZ0IsUUFEdEIsQ0FBYjs7QUFHQSxRQUFJQyxJQUFJLElBQUksSUFBWixFQUFrQjtBQUNoQjtBQUNELEtBVitCLENBWWhDOzs7QUFDQSxRQUFJSyxTQUFTLEdBQUcsQ0FBaEI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTixJQUFJLENBQUNPLE9BQUwsQ0FBYUMsTUFBakMsRUFBeUNGLENBQUMsRUFBMUMsRUFBOEM7QUFDNUMsVUFBSU4sSUFBSSxDQUFDTyxPQUFMLENBQWFELENBQWIsRUFBZ0JHLElBQWhCLEtBQXlCLFdBQTdCLEVBQTBDO0FBQ3hDdkIsUUFBQUEsZ0JBQWdCLENBQUNjLElBQUksQ0FBQ08sT0FBTixFQUFlRixTQUFmLEVBQTBCQyxDQUFDLEdBQUdELFNBQTlCLENBQWhCO0FBQ0FBLFFBQUFBLFNBQVMsR0FBR0MsQ0FBQyxHQUFHLENBQWhCO0FBQ0Q7QUFDRixLQW5CK0IsQ0FxQmhDOzs7QUFDQSxRQUFJRCxTQUFTLEdBQUdMLElBQUksQ0FBQ08sT0FBTCxDQUFhQyxNQUE3QixFQUFxQztBQUNuQ3RCLE1BQUFBLGdCQUFnQixDQUNkYyxJQUFJLENBQUNPLE9BRFMsRUFFZEYsU0FGYyxFQUdkTCxJQUFJLENBQUNPLE9BQUwsQ0FBYUMsTUFBYixHQUFzQkgsU0FIUixDQUFoQjtBQUtEO0FBQ0Y7O0FBRURKLEVBQUFBLElBQUksQ0FBQ0QsSUFBTCxDQUFVVSxNQUFWO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93IHN0cmljdFxyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRMYWJlbFZhbHVlKGxhYmVsOiA/c3RyaW5nKSB7XHJcbiAgLy8gSWdub3JlIHRoZSBXaW5kb3dzIGFjY2VsZXJhdG9yIGtleSBoaW50IHdoZW4gc29ydGluZywgdGhlICYgZG9lc24ndFxyXG4gIC8vIGFjdHVhbGx5IGFwcGVhciBpbiB0aGUgVVggc28gaXQgc2hvdWxkbid0IGFmZmVjdCB0aGUgc29ydC5cclxuICByZXR1cm4gU3RyaW5nKGxhYmVsKS5yZXBsYWNlKCcmJywgJycpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc29ydFN1Ym1lbnVHcm91cChcclxuICBtZW51SXRlbXM6IEFycmF5PHtcclxuICAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgfT4sXHJcbiAgc3RhcnRJbmRleDogbnVtYmVyLFxyXG4gIGl0ZW1Db3VudDogbnVtYmVyLFxyXG4pIHtcclxuICAvLyBTb3J0IGEgc3Vic2V0IG9mIHRoZSBpdGVtcyBpbiB0aGUgbWVudSBvZiBsZW5ndGggaXRlbUNvdW50IGJlZ2lubmluZ1xyXG4gIC8vIGF0IHN0YXJ0SW5kZXguXHJcbiAgY29uc3QgaXRlbXNUb1NvcnQgPSBtZW51SXRlbXMuc3BsaWNlKHN0YXJ0SW5kZXgsIGl0ZW1Db3VudCk7XHJcbiAgaXRlbXNUb1NvcnQuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgLy8gQWx3YXlzIHB1dCB0aGUgXCJWZXJzaW9uXCIgbGFiZWwgdXAgdG9wLlxyXG4gICAgaWYgKHNvcnRMYWJlbFZhbHVlKGEubGFiZWwpLnN0YXJ0c1dpdGgoJ1ZlcnNpb24nKSkge1xyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gc29ydExhYmVsVmFsdWUoYS5sYWJlbCkubG9jYWxlQ29tcGFyZShzb3J0TGFiZWxWYWx1ZShiLmxhYmVsKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIG1lbnVJdGVtcy5zcGxpY2Uoc3RhcnRJbmRleCwgMCwgLi4uaXRlbXNUb1NvcnQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc29ydE1lbnVHcm91cHMobWVudU5hbWVzOiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgZm9yIChjb25zdCBtZW51TmFtZSBvZiBtZW51TmFtZXMpIHtcclxuICAgIC8vIFNvcnRzIHRoZSBpdGVtcyBpbiBhIG1lbnUgYWxwaGFiZXRpY2FsbHkuIElmIHRoZSBtZW51IGNvbnRhaW5zIG9uZSBvciBtb3JlXHJcbiAgICAvLyBzZXBhcmF0b3JzLCB0aGVuIHRoZSBpdGVtcyB3aXRoaW4gZWFjaCBzZXBhcmF0b3Igc3ViZ3JvdXAgd2lsbCBiZSBzb3J0ZWRcclxuICAgIC8vIHdpdGggcmVzcGVjdCB0byBlYWNoIG90aGVyLCBidXQgaXRlbXMgd2lsbCByZW1haW4gaW4gdGhlIHNhbWUgZ3JvdXBzLCBhbmRcclxuICAgIC8vIHRoZSBzZXBhcmF0b3JzIHdpbGwgbm90IGJlIG1vdmVkLlxyXG4gICAgY29uc3QgbWVudSA9IGF0b20ubWVudS50ZW1wbGF0ZS5maW5kKFxyXG4gICAgICBtID0+IHNvcnRMYWJlbFZhbHVlKG0ubGFiZWwpID09PSBtZW51TmFtZSxcclxuICAgICk7XHJcbiAgICBpZiAobWVudSA9PSBudWxsKSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNvcnQgZWFjaCBncm91cCBvZiBpdGVtcyAoc2VwYXJhdGVkIGJ5IGEgc2VwYXJhdG9yKSBpbmRpdmlkdWFsbHkuXHJcbiAgICBsZXQgc29ydFN0YXJ0ID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVudS5zdWJtZW51Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChtZW51LnN1Ym1lbnVbaV0udHlwZSA9PT0gJ3NlcGFyYXRvcicpIHtcclxuICAgICAgICBzb3J0U3VibWVudUdyb3VwKG1lbnUuc3VibWVudSwgc29ydFN0YXJ0LCBpIC0gc29ydFN0YXJ0KTtcclxuICAgICAgICBzb3J0U3RhcnQgPSBpICsgMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNvcnQgYW55IHJlbWFpbmluZyBpdGVtcyBhZnRlciB0aGUgbGFzdCBzZXBhcmF0b3IuXHJcbiAgICBpZiAoc29ydFN0YXJ0IDwgbWVudS5zdWJtZW51Lmxlbmd0aCkge1xyXG4gICAgICBzb3J0U3VibWVudUdyb3VwKFxyXG4gICAgICAgIG1lbnUuc3VibWVudSxcclxuICAgICAgICBzb3J0U3RhcnQsXHJcbiAgICAgICAgbWVudS5zdWJtZW51Lmxlbmd0aCAtIHNvcnRTdGFydCxcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGF0b20ubWVudS51cGRhdGUoKTtcclxufVxyXG4iXX0=