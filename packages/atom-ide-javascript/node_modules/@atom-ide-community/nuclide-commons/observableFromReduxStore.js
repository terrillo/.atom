"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = observableFromReduxStore;

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _event = require("./event");

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/*
 * Use this rather than Observable.from(store). While Redux properly implements
 * `Symbol.observable`, Flow doesn't know about it, and `Symbol.observable` requires
 * a polyfill that RxJS no longer provides.
 *
 * Matches the behavioral differences between Redux's vanilla `subscribe` and
 * its `Symbol.observable` implementation: yield the store's state to subscribers,
 * and emit on the initial subscription.
 */
function observableFromReduxStore(store) {
  return (0, _event.observableFromSubscribeFunction)(store.subscribe).startWith(null) // emit the current state on subscribe
  .map(() => store.getState());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL29ic2VydmFibGVGcm9tUmVkdXhTdG9yZS5qcyJdLCJuYW1lcyI6WyJvYnNlcnZhYmxlRnJvbVJlZHV4U3RvcmUiLCJzdG9yZSIsInN1YnNjcmliZSIsInN0YXJ0V2l0aCIsIm1hcCIsImdldFN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBWUE7O0FBQ0E7O0FBYkE7Ozs7Ozs7Ozs7OztBQW9CQTs7Ozs7Ozs7O0FBU2UsU0FBU0Esd0JBQVQsQ0FDYkMsS0FEYSxFQUVFO0FBQ2YsU0FBTyw0Q0FBZ0NBLEtBQUssQ0FBQ0MsU0FBdEMsRUFDSkMsU0FESSxDQUNNLElBRE4sRUFDWTtBQURaLEdBRUpDLEdBRkksQ0FFQSxNQUFNSCxLQUFLLENBQUNJLFFBQU4sRUFGTixDQUFQO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzLWNvbXBhdC9idW5kbGVzL3J4anMtY29tcGF0LnVtZC5taW4uanMnO1xyXG5pbXBvcnQge29ic2VydmFibGVGcm9tU3Vic2NyaWJlRnVuY3Rpb259IGZyb20gJy4vZXZlbnQnO1xyXG5cclxudHlwZSBTdG9yZTxTPiA9IHtcclxuICBnZXRTdGF0ZSgpOiBTLFxyXG4gIHN1YnNjcmliZShsaXN0ZW5lcjogKCkgPT4gdm9pZCk6ICgpID0+IHZvaWQsXHJcbn07XHJcblxyXG4vKlxyXG4gKiBVc2UgdGhpcyByYXRoZXIgdGhhbiBPYnNlcnZhYmxlLmZyb20oc3RvcmUpLiBXaGlsZSBSZWR1eCBwcm9wZXJseSBpbXBsZW1lbnRzXHJcbiAqIGBTeW1ib2wub2JzZXJ2YWJsZWAsIEZsb3cgZG9lc24ndCBrbm93IGFib3V0IGl0LCBhbmQgYFN5bWJvbC5vYnNlcnZhYmxlYCByZXF1aXJlc1xyXG4gKiBhIHBvbHlmaWxsIHRoYXQgUnhKUyBubyBsb25nZXIgcHJvdmlkZXMuXHJcbiAqXHJcbiAqIE1hdGNoZXMgdGhlIGJlaGF2aW9yYWwgZGlmZmVyZW5jZXMgYmV0d2VlbiBSZWR1eCdzIHZhbmlsbGEgYHN1YnNjcmliZWAgYW5kXHJcbiAqIGl0cyBgU3ltYm9sLm9ic2VydmFibGVgIGltcGxlbWVudGF0aW9uOiB5aWVsZCB0aGUgc3RvcmUncyBzdGF0ZSB0byBzdWJzY3JpYmVycyxcclxuICogYW5kIGVtaXQgb24gdGhlIGluaXRpYWwgc3Vic2NyaXB0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb2JzZXJ2YWJsZUZyb21SZWR1eFN0b3JlPFM+KFxyXG4gIHN0b3JlOiBTdG9yZTxTPixcclxuKTogT2JzZXJ2YWJsZTxTPiB7XHJcbiAgcmV0dXJuIG9ic2VydmFibGVGcm9tU3Vic2NyaWJlRnVuY3Rpb24oc3RvcmUuc3Vic2NyaWJlKVxyXG4gICAgLnN0YXJ0V2l0aChudWxsKSAvLyBlbWl0IHRoZSBjdXJyZW50IHN0YXRlIG9uIHN1YnNjcmliZVxyXG4gICAgLm1hcCgoKSA9PiBzdG9yZS5nZXRTdGF0ZSgpKTtcclxufVxyXG4iXX0=