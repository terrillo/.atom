"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = processTimed;

var _performanceNow = _interopRequireDefault(require("./performanceNow"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* eslint-env browser */

/**
 * Splits tasks that would normally block for a long time across several tasks
 * using `setTimeout`.
 * @param process        - A generator function that does work in chunks, after each
 *                         yield is called.
 * @param options.limit  - A budget limiting the time (in ms) that can be spent
 *                         synchronously processing chunks. Chunks are processed
 *                         until this limit is reached, after which a new task
 *                         will be scheduled asynchronously.
 * @param options.delay  - The time (in ms) between processing tasks.
 * @param options.signal - An `AbortSignal` that can be used to cancel processing.
 */
function processTimed(process, options) {
  // Begin work in the next free tick. We could do this right away, but we don't
  // know how much work has preceeded this in this task, and we want to keep every
  // iteration, including the first one, to `limit` ms.
  requestIdleCallback(() => {
    // Kick off the generator once and hand a stateful iterator to
    // `processTimedIterator`.
    processTimedIterator(process(), options);
  });
}

function processTimedIterator(processIterator, {
  limit,
  delay,
  signal
}) {
  if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
    return;
  }

  let done;
  const before = (0, _performanceNow.default)();

  do {
    ({
      done
    } = processIterator.next());
  } while (!done && (0, _performanceNow.default)() - before < limit); // Schedule another batch after `delay` if we're not done yet.


  if (!done) {
    setTimeout(() => {
      processTimedIterator(processIterator, {
        limit,
        delay,
        signal
      });
    }, delay);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL3Byb2Nlc3NUaW1lZC5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzVGltZWQiLCJwcm9jZXNzIiwib3B0aW9ucyIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJwcm9jZXNzVGltZWRJdGVyYXRvciIsInByb2Nlc3NJdGVyYXRvciIsImxpbWl0IiwiZGVsYXkiLCJzaWduYWwiLCJhYm9ydGVkIiwiZG9uZSIsImJlZm9yZSIsIm5leHQiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZ0JBOzs7O0FBaEJBOzs7Ozs7Ozs7Ozs7QUFZQTs7QUFZQTs7Ozs7Ozs7Ozs7O0FBWWUsU0FBU0EsWUFBVCxDQUNiQyxPQURhLEVBRWJDLE9BRmEsRUFHUDtBQUNOO0FBQ0E7QUFDQTtBQUNBQyxFQUFBQSxtQkFBbUIsQ0FBQyxNQUFNO0FBQ3hCO0FBQ0E7QUFDQUMsSUFBQUEsb0JBQW9CLENBQUNILE9BQU8sRUFBUixFQUFZQyxPQUFaLENBQXBCO0FBQ0QsR0FKa0IsQ0FBbkI7QUFLRDs7QUFFRCxTQUFTRSxvQkFBVCxDQUNFQyxlQURGLEVBRUU7QUFBQ0MsRUFBQUEsS0FBRDtBQUFRQyxFQUFBQSxLQUFSO0FBQWVDLEVBQUFBO0FBQWYsQ0FGRixFQUdRO0FBQ04sTUFBSUEsTUFBSixhQUFJQSxNQUFKLHVCQUFJQSxNQUFNLENBQUVDLE9BQVosRUFBcUI7QUFDbkI7QUFDRDs7QUFFRCxNQUFJQyxJQUFKO0FBQ0EsUUFBTUMsTUFBTSxHQUFHLDhCQUFmOztBQUNBLEtBQUc7QUFDRCxLQUFDO0FBQUNELE1BQUFBO0FBQUQsUUFBU0wsZUFBZSxDQUFDTyxJQUFoQixFQUFWO0FBQ0QsR0FGRCxRQUVTLENBQUNGLElBQUQsSUFBUyxpQ0FBbUJDLE1BQW5CLEdBQTRCTCxLQUY5QyxFQVBNLENBV047OztBQUNBLE1BQUksQ0FBQ0ksSUFBTCxFQUFXO0FBQ1RHLElBQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZULE1BQUFBLG9CQUFvQixDQUFDQyxlQUFELEVBQWtCO0FBQUNDLFFBQUFBLEtBQUQ7QUFBUUMsUUFBQUEsS0FBUjtBQUFlQyxRQUFBQTtBQUFmLE9BQWxCLENBQXBCO0FBQ0QsS0FGUyxFQUVQRCxLQUZPLENBQVY7QUFHRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xyXG5cclxuaW1wb3J0IHR5cGUge0Fib3J0U2lnbmFsfSBmcm9tICcuL0Fib3J0Q29udHJvbGxlcic7XHJcblxyXG5pbXBvcnQgcGVyZm9ybWFuY2VOb3cgZnJvbSAnLi9wZXJmb3JtYW5jZU5vdyc7XHJcblxyXG50eXBlIE9wdGlvbnMgPSB7fFxyXG4gIGxpbWl0OiBudW1iZXIsXHJcbiAgZGVsYXk6IG51bWJlcixcclxuICBzaWduYWw/OiBBYm9ydFNpZ25hbCxcclxufH07XHJcblxyXG4vKipcclxuICogU3BsaXRzIHRhc2tzIHRoYXQgd291bGQgbm9ybWFsbHkgYmxvY2sgZm9yIGEgbG9uZyB0aW1lIGFjcm9zcyBzZXZlcmFsIHRhc2tzXHJcbiAqIHVzaW5nIGBzZXRUaW1lb3V0YC5cclxuICogQHBhcmFtIHByb2Nlc3MgICAgICAgIC0gQSBnZW5lcmF0b3IgZnVuY3Rpb24gdGhhdCBkb2VzIHdvcmsgaW4gY2h1bmtzLCBhZnRlciBlYWNoXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIGlzIGNhbGxlZC5cclxuICogQHBhcmFtIG9wdGlvbnMubGltaXQgIC0gQSBidWRnZXQgbGltaXRpbmcgdGhlIHRpbWUgKGluIG1zKSB0aGF0IGNhbiBiZSBzcGVudFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBzeW5jaHJvbm91c2x5IHByb2Nlc3NpbmcgY2h1bmtzLiBDaHVua3MgYXJlIHByb2Nlc3NlZFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB1bnRpbCB0aGlzIGxpbWl0IGlzIHJlYWNoZWQsIGFmdGVyIHdoaWNoIGEgbmV3IHRhc2tcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBzY2hlZHVsZWQgYXN5bmNocm9ub3VzbHkuXHJcbiAqIEBwYXJhbSBvcHRpb25zLmRlbGF5ICAtIFRoZSB0aW1lIChpbiBtcykgYmV0d2VlbiBwcm9jZXNzaW5nIHRhc2tzLlxyXG4gKiBAcGFyYW0gb3B0aW9ucy5zaWduYWwgLSBBbiBgQWJvcnRTaWduYWxgIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FuY2VsIHByb2Nlc3NpbmcuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9jZXNzVGltZWQoXHJcbiAgcHJvY2VzczogKCkgPT4gSXRlcmF0b3I8dm9pZD4sXHJcbiAgb3B0aW9uczogT3B0aW9ucyxcclxuKTogdm9pZCB7XHJcbiAgLy8gQmVnaW4gd29yayBpbiB0aGUgbmV4dCBmcmVlIHRpY2suIFdlIGNvdWxkIGRvIHRoaXMgcmlnaHQgYXdheSwgYnV0IHdlIGRvbid0XHJcbiAgLy8ga25vdyBob3cgbXVjaCB3b3JrIGhhcyBwcmVjZWVkZWQgdGhpcyBpbiB0aGlzIHRhc2ssIGFuZCB3ZSB3YW50IHRvIGtlZXAgZXZlcnlcclxuICAvLyBpdGVyYXRpb24sIGluY2x1ZGluZyB0aGUgZmlyc3Qgb25lLCB0byBgbGltaXRgIG1zLlxyXG4gIHJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgLy8gS2ljayBvZmYgdGhlIGdlbmVyYXRvciBvbmNlIGFuZCBoYW5kIGEgc3RhdGVmdWwgaXRlcmF0b3IgdG9cclxuICAgIC8vIGBwcm9jZXNzVGltZWRJdGVyYXRvcmAuXHJcbiAgICBwcm9jZXNzVGltZWRJdGVyYXRvcihwcm9jZXNzKCksIG9wdGlvbnMpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzVGltZWRJdGVyYXRvcihcclxuICBwcm9jZXNzSXRlcmF0b3I6IEl0ZXJhdG9yPHZvaWQ+LFxyXG4gIHtsaW1pdCwgZGVsYXksIHNpZ25hbH06IE9wdGlvbnMsXHJcbik6IHZvaWQge1xyXG4gIGlmIChzaWduYWw/LmFib3J0ZWQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGxldCBkb25lO1xyXG4gIGNvbnN0IGJlZm9yZSA9IHBlcmZvcm1hbmNlTm93KCk7XHJcbiAgZG8ge1xyXG4gICAgKHtkb25lfSA9IHByb2Nlc3NJdGVyYXRvci5uZXh0KCkpO1xyXG4gIH0gd2hpbGUgKCFkb25lICYmIHBlcmZvcm1hbmNlTm93KCkgLSBiZWZvcmUgPCBsaW1pdCk7XHJcblxyXG4gIC8vIFNjaGVkdWxlIGFub3RoZXIgYmF0Y2ggYWZ0ZXIgYGRlbGF5YCBpZiB3ZSdyZSBub3QgZG9uZSB5ZXQuXHJcbiAgaWYgKCFkb25lKSB7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgcHJvY2Vzc1RpbWVkSXRlcmF0b3IocHJvY2Vzc0l0ZXJhdG9yLCB7bGltaXQsIGRlbGF5LCBzaWduYWx9KTtcclxuICAgIH0sIGRlbGF5KTtcclxuICB9XHJcbn1cclxuIl19