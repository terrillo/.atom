"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRuntimeInformation = getRuntimeInformation;
Object.defineProperty(exports, "__DEV__", {
  enumerable: true,
  get: function () {
    return _env.__DEV__;
  }
});

var _systemInfo = require("./system-info");

var _os = _interopRequireDefault(require("os"));

var _uuid = _interopRequireDefault(require("uuid"));

var _env = require("@atom-ide-community/nuclide-node-transpiler/lib/env");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
let cachedInformation = null;

function getCacheableRuntimeInformation() {
  // eslint-disable-next-line eqeqeq
  if (cachedInformation !== null) {
    return cachedInformation;
  }

  cachedInformation = {
    sessionId: _uuid.default.v4(),
    user: _os.default.userInfo().username,
    osType: (0, _systemInfo.getOsType)(),
    timestamp: 0,
    isClient: !(0, _systemInfo.isRunningInServer)(),
    isDevelopment: _env.__DEV__,
    atomVersion: typeof atom === 'object' ? (0, _systemInfo.getAtomVersion)() : '',
    nuclideVersion: (0, _systemInfo.getNuclideVersion)(),
    installerPackageVersion: 0,
    uptime: 0,
    // TODO (chenshen) fill following information.
    serverVersion: 0
  };
  return cachedInformation;
}

function getRuntimeInformation() {
  const runtimeInformation = { ...getCacheableRuntimeInformation(),
    timestamp: Date.now(),
    uptime: Math.floor(process.uptime() * 1000)
  };
  return runtimeInformation;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL3J1bnRpbWUtaW5mby5qcyJdLCJuYW1lcyI6WyJjYWNoZWRJbmZvcm1hdGlvbiIsImdldENhY2hlYWJsZVJ1bnRpbWVJbmZvcm1hdGlvbiIsInNlc3Npb25JZCIsInV1aWQiLCJ2NCIsInVzZXIiLCJvcyIsInVzZXJJbmZvIiwidXNlcm5hbWUiLCJvc1R5cGUiLCJ0aW1lc3RhbXAiLCJpc0NsaWVudCIsImlzRGV2ZWxvcG1lbnQiLCJfX0RFVl9fIiwiYXRvbVZlcnNpb24iLCJhdG9tIiwibnVjbGlkZVZlcnNpb24iLCJpbnN0YWxsZXJQYWNrYWdlVmVyc2lvbiIsInVwdGltZSIsInNlcnZlclZlcnNpb24iLCJnZXRSdW50aW1lSW5mb3JtYXRpb24iLCJydW50aW1lSW5mb3JtYXRpb24iLCJEYXRlIiwibm93IiwiTWF0aCIsImZsb29yIiwicHJvY2VzcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVlBOztBQU1BOztBQUNBOztBQUNBOzs7O0FBcEJBOzs7Ozs7Ozs7OztBQW9DQSxJQUFJQSxpQkFBaUIsR0FBRyxJQUF4Qjs7QUFFQSxTQUFTQyw4QkFBVCxHQUE4RDtBQUM1RDtBQUNBLE1BQUlELGlCQUFpQixLQUFLLElBQTFCLEVBQWdDO0FBQzlCLFdBQU9BLGlCQUFQO0FBQ0Q7O0FBRURBLEVBQUFBLGlCQUFpQixHQUFHO0FBQ2xCRSxJQUFBQSxTQUFTLEVBQUVDLGNBQUtDLEVBQUwsRUFETztBQUVsQkMsSUFBQUEsSUFBSSxFQUFFQyxZQUFHQyxRQUFILEdBQWNDLFFBRkY7QUFHbEJDLElBQUFBLE1BQU0sRUFBRSw0QkFIVTtBQUlsQkMsSUFBQUEsU0FBUyxFQUFFLENBSk87QUFLbEJDLElBQUFBLFFBQVEsRUFBRSxDQUFDLG9DQUxPO0FBTWxCQyxJQUFBQSxhQUFhLEVBQUVDLFlBTkc7QUFPbEJDLElBQUFBLFdBQVcsRUFBRSxPQUFPQyxJQUFQLEtBQWdCLFFBQWhCLEdBQTJCLGlDQUEzQixHQUE4QyxFQVB6QztBQVFsQkMsSUFBQUEsY0FBYyxFQUFFLG9DQVJFO0FBU2xCQyxJQUFBQSx1QkFBdUIsRUFBRSxDQVRQO0FBVWxCQyxJQUFBQSxNQUFNLEVBQUUsQ0FWVTtBQVdsQjtBQUNBQyxJQUFBQSxhQUFhLEVBQUU7QUFaRyxHQUFwQjtBQWVBLFNBQU9uQixpQkFBUDtBQUNEOztBQUVNLFNBQVNvQixxQkFBVCxHQUFxRDtBQUMxRCxRQUFNQyxrQkFBa0IsR0FBRyxFQUN6QixHQUFHcEIsOEJBQThCLEVBRFI7QUFFekJTLElBQUFBLFNBQVMsRUFBRVksSUFBSSxDQUFDQyxHQUFMLEVBRmM7QUFHekJMLElBQUFBLE1BQU0sRUFBRU0sSUFBSSxDQUFDQyxLQUFMLENBQVdDLE9BQU8sQ0FBQ1IsTUFBUixLQUFtQixJQUE5QjtBQUhpQixHQUEzQjtBQUtBLFNBQU9HLGtCQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHtcclxuICBnZXRPc1R5cGUsXHJcbiAgZ2V0QXRvbVZlcnNpb24sXHJcbiAgZ2V0TnVjbGlkZVZlcnNpb24sXHJcbiAgaXNSdW5uaW5nSW5TZXJ2ZXIsXHJcbn0gZnJvbSAnLi9zeXN0ZW0taW5mbyc7XHJcbmltcG9ydCBvcyBmcm9tICdvcyc7XHJcbmltcG9ydCB1dWlkIGZyb20gJ3V1aWQnO1xyXG5pbXBvcnQge19fREVWX199IGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1ub2RlLXRyYW5zcGlsZXIvbGliL2Vudic7XHJcblxyXG5leHBvcnQgdHlwZSBSdW50aW1lSW5mb3JtYXRpb24gPSB7XHJcbiAgc2Vzc2lvbklkOiBzdHJpbmcsXHJcbiAgdXNlcjogc3RyaW5nLFxyXG4gIG9zVHlwZTogc3RyaW5nLFxyXG4gIHRpbWVzdGFtcDogbnVtYmVyLFxyXG4gIGlzQ2xpZW50OiBib29sZWFuLFxyXG4gIGlzRGV2ZWxvcG1lbnQ6IGJvb2xlYW4sXHJcbiAgYXRvbVZlcnNpb246IHN0cmluZyxcclxuICBudWNsaWRlVmVyc2lvbjogc3RyaW5nLFxyXG4gIGluc3RhbGxlclBhY2thZ2VWZXJzaW9uOiBudW1iZXIsXHJcbiAgc2VydmVyVmVyc2lvbjogbnVtYmVyLFxyXG4gIHVwdGltZTogbnVtYmVyLFxyXG59O1xyXG5cclxubGV0IGNhY2hlZEluZm9ybWF0aW9uID0gbnVsbDtcclxuXHJcbmZ1bmN0aW9uIGdldENhY2hlYWJsZVJ1bnRpbWVJbmZvcm1hdGlvbigpOiBSdW50aW1lSW5mb3JtYXRpb24ge1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcclxuICBpZiAoY2FjaGVkSW5mb3JtYXRpb24gIT09IG51bGwpIHtcclxuICAgIHJldHVybiBjYWNoZWRJbmZvcm1hdGlvbjtcclxuICB9XHJcblxyXG4gIGNhY2hlZEluZm9ybWF0aW9uID0ge1xyXG4gICAgc2Vzc2lvbklkOiB1dWlkLnY0KCksXHJcbiAgICB1c2VyOiBvcy51c2VySW5mbygpLnVzZXJuYW1lLFxyXG4gICAgb3NUeXBlOiBnZXRPc1R5cGUoKSxcclxuICAgIHRpbWVzdGFtcDogMCxcclxuICAgIGlzQ2xpZW50OiAhaXNSdW5uaW5nSW5TZXJ2ZXIoKSxcclxuICAgIGlzRGV2ZWxvcG1lbnQ6IF9fREVWX18sXHJcbiAgICBhdG9tVmVyc2lvbjogdHlwZW9mIGF0b20gPT09ICdvYmplY3QnID8gZ2V0QXRvbVZlcnNpb24oKSA6ICcnLFxyXG4gICAgbnVjbGlkZVZlcnNpb246IGdldE51Y2xpZGVWZXJzaW9uKCksXHJcbiAgICBpbnN0YWxsZXJQYWNrYWdlVmVyc2lvbjogMCxcclxuICAgIHVwdGltZTogMCxcclxuICAgIC8vIFRPRE8gKGNoZW5zaGVuKSBmaWxsIGZvbGxvd2luZyBpbmZvcm1hdGlvbi5cclxuICAgIHNlcnZlclZlcnNpb246IDAsXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGNhY2hlZEluZm9ybWF0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UnVudGltZUluZm9ybWF0aW9uKCk6IFJ1bnRpbWVJbmZvcm1hdGlvbiB7XHJcbiAgY29uc3QgcnVudGltZUluZm9ybWF0aW9uID0ge1xyXG4gICAgLi4uZ2V0Q2FjaGVhYmxlUnVudGltZUluZm9ybWF0aW9uKCksXHJcbiAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICB1cHRpbWU6IE1hdGguZmxvb3IocHJvY2Vzcy51cHRpbWUoKSAqIDEwMDApLFxyXG4gIH07XHJcbiAgcmV0dXJuIHJ1bnRpbWVJbmZvcm1hdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IHtfX0RFVl9ffTtcclxuIl19