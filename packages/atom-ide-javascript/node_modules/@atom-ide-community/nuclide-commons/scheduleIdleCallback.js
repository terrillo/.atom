"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global requestIdleCallback, cancelIdleCallback */

/**
 * `scheduleIdleCallback` is a wrapper around `requestIdleCallback` that:
 *   - Returns a disposable.
 *   - Manages checking `timeRemaining`.
 *
 * `timeRemaining` is how much time the system thinks is available for your
 * work. `50` is the maximum allowed value. By choosing `49` for
 * `afterRemainingTime`, you're saying: "only invoke the callback when there
 * are 49ms available for me to do work". It was can take multiple loops around
 * `requestIdleCallback` for so much time to become available.
 */
var _default = typeof requestIdleCallback !== 'undefined' ? // Using Browser API
// Is guaranteed to resolve after `timeout` milliseconds.
function scheduleIdleCallback(callback_, options = {}) {
  const afterRemainingTime = options.afterRemainingTime || 49; // flowlint-next-line sketchy-null-number:off

  const timeout = options.timeout || 500;
  let callback = callback_;
  let id;
  const startTime = Date.now();

  function fn(deadline) {
    if (deadline.timeRemaining() >= afterRemainingTime || Date.now() - startTime >= timeout) {
      (0, _assert.default)(callback != null);
      callback();
      id = callback = null;
    } else {
      id = requestIdleCallback(fn, {
        timeout: timeout - (Date.now() - startTime)
      });
    }
  }

  id = requestIdleCallback(fn, {
    timeout
  });
  return {
    dispose() {
      if (id != null) {
        cancelIdleCallback(id);
        id = callback = null;
      }
    }

  };
} : // Using Node API
function scheduleIdleCallback(callback, options) {
  const id = setImmediate(callback);
  return {
    dispose() {
      clearImmediate(id);
    }

  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL3NjaGVkdWxlSWRsZUNhbGxiYWNrLmpzIl0sIm5hbWVzIjpbInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJzY2hlZHVsZUlkbGVDYWxsYmFjayIsImNhbGxiYWNrXyIsIm9wdGlvbnMiLCJhZnRlclJlbWFpbmluZ1RpbWUiLCJ0aW1lb3V0IiwiY2FsbGJhY2siLCJpZCIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJmbiIsImRlYWRsaW5lIiwidGltZVJlbWFpbmluZyIsImRpc3Bvc2UiLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhckltbWVkaWF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQTBCQTs7OztBQTFCQTs7Ozs7Ozs7Ozs7O0FBWUE7O0FBRUE7Ozs7Ozs7Ozs7O2VBb0JnQixPQUFPQSxtQkFBUCxLQUErQixXQUEvQixHQUNaO0FBQ0E7QUFDQSxTQUFTQyxvQkFBVCxDQUNFQyxTQURGLEVBRUVDLE9BQWtCLEdBQUcsRUFGdkIsRUFHZTtBQUNiLFFBQU1DLGtCQUFrQixHQUFHRCxPQUFPLENBQUNDLGtCQUFSLElBQThCLEVBQXpELENBRGEsQ0FFYjs7QUFDQSxRQUFNQyxPQUFPLEdBQUdGLE9BQU8sQ0FBQ0UsT0FBUixJQUFtQixHQUFuQztBQUNBLE1BQUlDLFFBQVEsR0FBR0osU0FBZjtBQUNBLE1BQUlLLEVBQUo7QUFDQSxRQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxFQUFsQjs7QUFDQSxXQUFTQyxFQUFULENBQVlDLFFBQVosRUFBc0I7QUFDcEIsUUFDRUEsUUFBUSxDQUFDQyxhQUFULE1BQTRCVCxrQkFBNUIsSUFDQUssSUFBSSxDQUFDQyxHQUFMLEtBQWFGLFNBQWIsSUFBMEJILE9BRjVCLEVBR0U7QUFDQSwyQkFBVUMsUUFBUSxJQUFJLElBQXRCO0FBQ0FBLE1BQUFBLFFBQVE7QUFDUkMsTUFBQUEsRUFBRSxHQUFHRCxRQUFRLEdBQUcsSUFBaEI7QUFDRCxLQVBELE1BT087QUFDTEMsTUFBQUEsRUFBRSxHQUFHUCxtQkFBbUIsQ0FBQ1csRUFBRCxFQUFLO0FBQzNCTixRQUFBQSxPQUFPLEVBQUVBLE9BQU8sSUFBSUksSUFBSSxDQUFDQyxHQUFMLEtBQWFGLFNBQWpCO0FBRFcsT0FBTCxDQUF4QjtBQUdEO0FBQ0Y7O0FBQ0RELEVBQUFBLEVBQUUsR0FBR1AsbUJBQW1CLENBQUNXLEVBQUQsRUFBSztBQUFDTixJQUFBQTtBQUFELEdBQUwsQ0FBeEI7QUFDQSxTQUFPO0FBQ0xTLElBQUFBLE9BQU8sR0FBRztBQUNSLFVBQUlQLEVBQUUsSUFBSSxJQUFWLEVBQWdCO0FBQ2RRLFFBQUFBLGtCQUFrQixDQUFDUixFQUFELENBQWxCO0FBQ0FBLFFBQUFBLEVBQUUsR0FBR0QsUUFBUSxHQUFHLElBQWhCO0FBQ0Q7QUFDRjs7QUFOSSxHQUFQO0FBUUQsQ0FwQ1csR0FxQ1o7QUFDQSxTQUFTTCxvQkFBVCxDQUNFSyxRQURGLEVBRUVILE9BRkYsRUFHZTtBQUNiLFFBQU1JLEVBQUUsR0FBR1MsWUFBWSxDQUFDVixRQUFELENBQXZCO0FBQ0EsU0FBTztBQUNMUSxJQUFBQSxPQUFPLEdBQUc7QUFDUkcsTUFBQUEsY0FBYyxDQUFDVixFQUFELENBQWQ7QUFDRDs7QUFISSxHQUFQO0FBS0QsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3cgc3RyaWN0XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG4vKiBnbG9iYWwgcmVxdWVzdElkbGVDYWxsYmFjaywgY2FuY2VsSWRsZUNhbGxiYWNrICovXHJcblxyXG4vKipcclxuICogYHNjaGVkdWxlSWRsZUNhbGxiYWNrYCBpcyBhIHdyYXBwZXIgYXJvdW5kIGByZXF1ZXN0SWRsZUNhbGxiYWNrYCB0aGF0OlxyXG4gKiAgIC0gUmV0dXJucyBhIGRpc3Bvc2FibGUuXHJcbiAqICAgLSBNYW5hZ2VzIGNoZWNraW5nIGB0aW1lUmVtYWluaW5nYC5cclxuICpcclxuICogYHRpbWVSZW1haW5pbmdgIGlzIGhvdyBtdWNoIHRpbWUgdGhlIHN5c3RlbSB0aGlua3MgaXMgYXZhaWxhYmxlIGZvciB5b3VyXHJcbiAqIHdvcmsuIGA1MGAgaXMgdGhlIG1heGltdW0gYWxsb3dlZCB2YWx1ZS4gQnkgY2hvb3NpbmcgYDQ5YCBmb3JcclxuICogYGFmdGVyUmVtYWluaW5nVGltZWAsIHlvdSdyZSBzYXlpbmc6IFwib25seSBpbnZva2UgdGhlIGNhbGxiYWNrIHdoZW4gdGhlcmVcclxuICogYXJlIDQ5bXMgYXZhaWxhYmxlIGZvciBtZSB0byBkbyB3b3JrXCIuIEl0IHdhcyBjYW4gdGFrZSBtdWx0aXBsZSBsb29wcyBhcm91bmRcclxuICogYHJlcXVlc3RJZGxlQ2FsbGJhY2tgIGZvciBzbyBtdWNoIHRpbWUgdG8gYmVjb21lIGF2YWlsYWJsZS5cclxuICovXHJcblxyXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2Fzc2VydCc7XHJcblxyXG50eXBlIENhbGxiYWNrVCA9ICgpID0+IHZvaWQ7XHJcbnR5cGUgT3B0aW9uc1QgPSB7XHJcbiAgYWZ0ZXJSZW1haW5pbmdUaW1lPzogMzAgfCA0MCB8IDQ5LFxyXG4gIHRpbWVvdXQ/OiBudW1iZXIsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAodHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2sgIT09ICd1bmRlZmluZWQnXHJcbiAgPyAvLyBVc2luZyBCcm93c2VyIEFQSVxyXG4gICAgLy8gSXMgZ3VhcmFudGVlZCB0byByZXNvbHZlIGFmdGVyIGB0aW1lb3V0YCBtaWxsaXNlY29uZHMuXHJcbiAgICBmdW5jdGlvbiBzY2hlZHVsZUlkbGVDYWxsYmFjayhcclxuICAgICAgY2FsbGJhY2tfOiBDYWxsYmFja1QsXHJcbiAgICAgIG9wdGlvbnM/OiBPcHRpb25zVCA9IHt9LFxyXG4gICAgKTogSURpc3Bvc2FibGUge1xyXG4gICAgICBjb25zdCBhZnRlclJlbWFpbmluZ1RpbWUgPSBvcHRpb25zLmFmdGVyUmVtYWluaW5nVGltZSB8fCA0OTtcclxuICAgICAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHNrZXRjaHktbnVsbC1udW1iZXI6b2ZmXHJcbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgfHwgNTAwO1xyXG4gICAgICBsZXQgY2FsbGJhY2sgPSBjYWxsYmFja187XHJcbiAgICAgIGxldCBpZDtcclxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgZnVuY3Rpb24gZm4oZGVhZGxpbmUpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBkZWFkbGluZS50aW1lUmVtYWluaW5nKCkgPj0gYWZ0ZXJSZW1haW5pbmdUaW1lIHx8XHJcbiAgICAgICAgICBEYXRlLm5vdygpIC0gc3RhcnRUaW1lID49IHRpbWVvdXRcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGludmFyaWFudChjYWxsYmFjayAhPSBudWxsKTtcclxuICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICBpZCA9IGNhbGxiYWNrID0gbnVsbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWQgPSByZXF1ZXN0SWRsZUNhbGxiYWNrKGZuLCB7XHJcbiAgICAgICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSksXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWQgPSByZXF1ZXN0SWRsZUNhbGxiYWNrKGZuLCB7dGltZW91dH0pO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjYW5jZWxJZGxlQ2FsbGJhY2soaWQpO1xyXG4gICAgICAgICAgICBpZCA9IGNhbGxiYWNrID0gbnVsbDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIDogLy8gVXNpbmcgTm9kZSBBUElcclxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlSWRsZUNhbGxiYWNrKFxyXG4gICAgICBjYWxsYmFjazogQ2FsbGJhY2tULFxyXG4gICAgICBvcHRpb25zPzogT3B0aW9uc1QsXHJcbiAgICApOiBJRGlzcG9zYWJsZSB7XHJcbiAgICAgIGNvbnN0IGlkID0gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuIl19