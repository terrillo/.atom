"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _idx = _interopRequireDefault(require("idx"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _Checkbox = require("@atom-ide-community/nuclide-commons-ui/Checkbox");

var _Dropdown = require("@atom-ide-community/nuclide-commons-ui/Dropdown");

var _AtomInput = require("@atom-ide-community/nuclide-commons-ui/AtomInput");

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

var _string = require("@atom-ide-community/nuclide-commons/string");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _debugger = require("@atom-ide-community/nuclide-commons-atom/debugger");

var _DebuggerConfigSerializer = require("./DebuggerConfigSerializer");

var _DeviceAndPackage = require("./DeviceAndPackage");

var _DeviceAndProcess = require("./DeviceAndProcess");

var _SelectableFilterableProcessTable = _interopRequireDefault(require("./SelectableFilterableProcessTable"));

var _SourceSelector = require("./SourceSelector");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// extension must be a string starting with a '.' like '.js' or '.py'
function getActiveScriptPath(extension) {
  const center = atom.workspace.getCenter ? atom.workspace.getCenter() : atom.workspace;
  const activeEditor = center.getActiveTextEditor();

  if (activeEditor == null || !activeEditor.getPath() || !(0, _nullthrows.default)(activeEditor.getPath()).endsWith(extension)) {
    return '';
  }

  return _nuclideUri.default.getPath((0, _nullthrows.default)(activeEditor.getPath()));
}

class AutoGenLaunchAttachUiComponent extends React.Component {
  constructor(props) {
    super(props);
    this._disposables = void 0;

    this._handleDebugButtonClick = async () => {
      const {
        targetUri,
        config
      } = this.props;
      const {
        atomInputValues,
        booleanValues,
        enumValues,
        processTableValues,
        deviceAndPackageValues,
        deviceAndProcessValues,
        selectSourcesValues
      } = this.state;
      const {
        launch,
        vsAdapterType,
        getProcessName,
        adapterExecutable
      } = config;
      const stringValues = new Map();
      const stringArrayValues = new Map();
      const objectValues = new Map();
      const numberValues = new Map();
      const jsonValues = new Map();
      await Promise.all(Array.from(this._getConfigurationProperties().filter(property => property.visible && atomInputValues.has(property.name)).map(async property => {
        const {
          name,
          type
        } = property;
        const itemType = (0, _idx.default)(property, _ => _.itemType);
        const value = atomInputValues.get(name) || '';

        if (type === 'path') {
          try {
            const trimmedValue = value.trim();
            const resolvedPath = this.props.pathResolver == null ? trimmedValue : await this.props.pathResolver(targetUri, trimmedValue);
            stringValues.set(name, resolvedPath);
          } catch (_) {
            stringValues.set(name, value);
          }
        } else if (type === 'string') {
          stringValues.set(name, value);
        } else if (type === 'array' && itemType === 'string') {
          stringArrayValues.set(name, (0, _string.shellParseWithGlobs)(value));
        } else if (type === 'object') {
          const objectValue = {};
          (0, _string.shellParseWithGlobs)(value).forEach(variable => {
            const [lhs, rhs] = variable.split('=');
            objectValue[lhs] = rhs;
          });
          objectValues.set(name, objectValue);
        } else if (type === 'number') {
          numberValues.set(name, Number(value));
        } else if (type === 'json') {
          jsonValues.set(name, JSON.parse(value));
        }

        return value;
      })));
      const packageValues = new Map();

      this._getConfigurationProperties().filter(property => property.visible && deviceAndPackageValues.has(property.name)).forEach(property => {
        const deviceAndPackage = deviceAndPackageValues.get(property.name);

        if (deviceAndPackage != null) {
          packageValues.set(property.name, deviceAndPackage.selectedPackage);
        }
      });

      const processValues = new Map();

      this._getConfigurationProperties().filter(property => property.visible && deviceAndProcessValues.has(property.name)).forEach(property => {
        const deviceAndProcess = deviceAndProcessValues.get(property.name);
        const processName = (0, _idx.default)(deviceAndProcess, _ => _.selectedProcess.name);

        if (deviceAndProcess != null && processName != null) {
          processValues.set(property.name, processName);
        }
      });

      const values = {};
      [booleanValues, enumValues, stringValues, stringArrayValues, objectValues, numberValues, processTableValues, jsonValues, deviceAndPackageValues, deviceAndProcessValues, selectSourcesValues].forEach(map => {
        map.forEach((value, key) => {
          values[key] = value;
        });
      });

      this._getConfigurationProperties().filter(property => !property.visible && !atomInputValues.has(property.name)).forEach(property => {
        const {
          name
        } = property;
        values[name] = (0, _idx.default)(property, _ => _.defaultValue);
      });

      const debuggerService = await (0, _debugger.getDebuggerService)();
      debuggerService.startVspDebugging({
        targetUri,
        debugMode: launch ? 'launch' : 'attach',
        adapterType: vsAdapterType,
        adapterExecutable,
        config: values,
        customControlButtons: [],
        processName: getProcessName(values),
        isRestartable: true
      });
      (0, _DebuggerConfigSerializer.serializeDebuggerConfig)(...this._getSerializationArgs(this.props), {
        atomInputValues: Array.from(atomInputValues),
        booleanValues: Array.from(booleanValues),
        enumValues: Array.from(enumValues),
        packageValues: Array.from(packageValues),
        processValues: Array.from(processValues),
        selectSourcesValues: Array.from(selectSourcesValues)
      });
    };

    this._disposables = new _UniversalDisposable.default();
    this.state = {
      atomInputValues: new Map(),
      booleanValues: new Map(),
      enumValues: new Map(),
      processTableValues: new Map(),
      deviceAndPackageValues: new Map(),
      deviceAndProcessValues: new Map(),
      selectSourcesValues: new Map()
    };
  }

  _atomInputType(type, itemType) {
    return type === 'string' || type === 'path' || type === 'array' && itemType === 'string' || type === 'object' || type === 'number' || type === 'json';
  }

  _getConfigurationProperties() {
    const {
      config
    } = this.props;
    return config.properties;
  }

  _populateDefaultValues(config, atomInputValues, booleanValues, enumValues) {
    const ignorePreviousParams = config.ignorePreviousParams !== undefined ? config.ignorePreviousParams : false;
    config.properties.filter(property => property.visible).map(property => {
      const {
        name,
        type
      } = property;
      const itemType = (0, _idx.default)(property, _ => _.itemType);

      if (this._atomInputType(type, itemType)) {
        const existingValue = atomInputValues.get(name);

        if ((ignorePreviousParams || existingValue == null) && typeof property.defaultValue !== 'undefined') {
          // String(propertyDescription.default) deals with both strings and numbers and arrays
          // JSON.stringify for JSON
          // empty string otherwise
          const defaultValue = type === 'string' || type === 'number' || type === 'array' ? String(property.defaultValue) : type === 'json' ? JSON.stringify(property.defaultValue) : '';
          atomInputValues.set(name, defaultValue);
        }
      } else if (type === 'boolean') {
        const existingValue = booleanValues.get(name);

        if ((ignorePreviousParams || existingValue == null) && typeof property.defaultValue !== 'undefined' && property.defaultValue != null && typeof property.defaultValue === 'boolean') {
          booleanValues.set(name, property.defaultValue);
        } else {
          booleanValues.set(name, false);
        }
      } else if (type === 'enum' && property.enums != null) {
        const existingValue = enumValues.get(name);

        if ((ignorePreviousParams || existingValue == null) && typeof property.defaultValue !== 'undefined' && property.defaultValue != null && typeof property.defaultValue === 'string') {
          enumValues.set(name, property.defaultValue);
        }
      }
    });
  }

  _getSerializationArgs(props) {
    const {
      targetUri,
      config,
      debuggerTypeName
    } = props;
    const args = [_nuclideUri.default.isRemote(targetUri) ? _nuclideUri.default.getHostname(targetUri) : 'local', config.launch ? 'launch' : 'attach', debuggerTypeName];
    return args;
  }

  _deserializeDebuggerConfig(props) {
    (0, _DebuggerConfigSerializer.deserializeDebuggerConfig)(...this._getSerializationArgs(props), (transientSettings, savedSettings) => {
      const {
        config
      } = props;
      const {
        cwdPropertyName,
        scriptPropertyName,
        launch,
        scriptExtension
      } = config;
      const atomInputValues = new Map(savedSettings.atomInputValues || []);
      const scriptPath = scriptPropertyName != null && atomInputValues.get(scriptPropertyName) || scriptExtension != null && getActiveScriptPath(scriptExtension) || '';

      if (cwdPropertyName != null) {
        const cwd = atomInputValues.get(cwdPropertyName) || (scriptPath !== '' ? _nuclideUri.default.dirname(scriptPath) : '');

        if (cwd !== '') {
          atomInputValues.set(cwdPropertyName, cwd);
        }
      }

      if (launch) {
        if (scriptPath !== '' && scriptPropertyName != null) {
          atomInputValues.set(scriptPropertyName, scriptPath);
        }
      }

      const booleanValues = new Map(savedSettings.booleanValues || []);
      const enumValues = new Map(savedSettings.enumValues || []);

      this._populateDefaultValues(config, atomInputValues, booleanValues, enumValues); // do not serialize and deserialize these values:


      const processTableValues = new Map();
      const deviceAndPackageValues = new Map();
      const deviceAndProcessValues = new Map();
      this.setState({
        atomInputValues,
        booleanValues,
        enumValues,
        processTableValues,
        deviceAndPackageValues,
        deviceAndProcessValues
      });
    });
  }

  setState(newState) {
    super.setState(newState, () => this.props.configIsValidChanged(this._debugButtonShouldEnable()));
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.debuggerTypeName !== this.props.debuggerTypeName) {
      this._deserializeDebuggerConfig(nextProps);
    }
  }

  UNSAFE_componentWillMount() {
    this._deserializeDebuggerConfig(this.props);
  }

  componentDidMount() {
    this._disposables.add(atom.commands.add('atom-workspace', {
      'core:confirm': async () => {
        if (this._debugButtonShouldEnable()) {
          await this._handleDebugButtonClick();
        }
      }
    }));
  }

  componentWillUnmount() {
    this._disposables.dispose();
  }

  _valueExists(property) {
    const {
      name,
      type
    } = property;

    if (type === 'string' || type === 'path' || type === 'array' && property.itemType === 'string') {
      const value = this.state.atomInputValues.get(name);
      return value != null && value !== '';
    } else if (type === 'number') {
      const value = this.state.atomInputValues.get(name);
      return value != null && !isNaN(value);
    } else if (type === 'boolean') {
      const value = this.state.booleanValues.get(name);
      return value != null;
    } else if (type === 'enum') {
      const value = this.state.enumValues.get(name);
      return value != null;
    } else if (type === 'process') {
      const value = this.state.processTableValues.get(name);
      return value != null;
    } else if (type === 'deviceAndPackage') {
      const deviceAndPackageValue = this.state.deviceAndPackageValues.get(name);
      return deviceAndPackageValue != null;
    } else if (type === 'deviceAndProcess') {
      const deviceAndProcessValue = this.state.deviceAndProcessValues.get(name);
      return deviceAndProcessValue != null;
    } else if (type === 'selectSources') {
      const selectSourcesValue = this.state.selectSourcesValues.get(name);
      return selectSourcesValue != null;
    }

    return false;
  }

  _debugButtonShouldEnable() {
    return this._getConfigurationProperties().filter(p => p.required).every(p => this._valueExists(p));
  }

  _getComponentForProperty(property) {
    const {
      name,
      type,
      description,
      required
    } = property;
    const formattedName = (0, _string.capitalize)(name.replace(/([A-Z])/g, ' $1')) + (required ? ' (Required)' : '');
    const nameLabel = type === 'boolean' ? formattedName : formattedName + ':';
    const itemType = (0, _idx.default)(property, _ => _.itemType);

    if (this._atomInputType(type, itemType)) {
      const value = this.state.atomInputValues.get(name) || '';
      return /*#__PURE__*/React.createElement("div", null, nameLabel, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
        key: this.props.debuggerTypeName + ':' + name,
        placeholderText: description,
        value: value,
        onDidChange: newValue => {
          this.state.atomInputValues.set(name, newValue);
          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      }));
    } else if (type === 'boolean') {
      const checked = this.state.booleanValues.get(name) || false;
      return /*#__PURE__*/React.createElement("div", {
        className: "inline-block"
      }, /*#__PURE__*/React.createElement(_Checkbox.Checkbox, {
        checked: checked,
        label: nameLabel,
        title: description,
        onChange: newValue => {
          this.state.booleanValues.set(name, newValue);
          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      }));
    } else if (type === 'enum' && property.enums != null) {
      const enums = property.enums;
      const selectedValue = this.state.enumValues.get(name) || null;
      return /*#__PURE__*/React.createElement("div", null, nameLabel, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, description)), /*#__PURE__*/React.createElement(_Dropdown.Dropdown, {
        options: enums.map(enumValue => ({
          value: enumValue,
          label: (0, _string.capitalize)(enumValue.replace(/([A-Z])/g, ' $1'))
        })),
        onChange: enumValue => {
          this.state.enumValues.set(name, enumValue);
          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        },
        value: selectedValue
      }));
    } else if (type === 'process') {
      return /*#__PURE__*/React.createElement("div", null, nameLabel, /*#__PURE__*/React.createElement(_SelectableFilterableProcessTable.default, {
        targetUri: this.props.targetUri,
        onSelect: selectedProcess => {
          if (selectedProcess != null) {
            this.state.processTableValues.set(name, selectedProcess.pid);
          } else {
            this.state.processTableValues.delete(name);
          }

          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      }));
    } else if (type === 'deviceAndPackage') {
      return /*#__PURE__*/React.createElement(_DeviceAndPackage.DeviceAndPackage, {
        targetUri: this.props.targetUri,
        deserialize: () => {
          let packageValuesArray = [];
          (0, _DebuggerConfigSerializer.deserializeDebuggerConfig)(...this._getSerializationArgs(this.props), (transientSettings, savedSettings) => {
            packageValuesArray = savedSettings.packageValues || [];
          });
          const packageValues = new Map(packageValuesArray);
          return packageValues.get(name) || null;
        },
        onSelect: (deviceSerial, javaPackage) => {
          if (deviceSerial != null) {
            this.state.deviceAndPackageValues.set(name, {
              deviceSerial,
              selectedPackage: javaPackage
            });
          } else {
            this.state.deviceAndPackageValues.delete(name);
          }

          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      });
    } else if (type === 'deviceAndProcess') {
      return /*#__PURE__*/React.createElement(_DeviceAndProcess.DeviceAndProcess, {
        targetUri: this.props.targetUri,
        deserialize: () => {
          let processValuesArray = [];
          (0, _DebuggerConfigSerializer.deserializeDebuggerConfig)(...this._getSerializationArgs(this.props), (transientSettings, savedSettings) => {
            processValuesArray = savedSettings.processValues || [];
          });
          const processValues = new Map(processValuesArray);
          return processValues.get(name) || null;
        },
        onSelect: (deviceSerial, javaProcess) => {
          if (deviceSerial != null && javaProcess != null) {
            this.state.deviceAndProcessValues.set(name, {
              deviceSerial,
              selectedProcess: javaProcess
            });
          } else {
            this.state.deviceAndProcessValues.delete(name);
          }

          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      });
    } else if (type === 'selectSources') {
      return /*#__PURE__*/React.createElement("div", null, nameLabel, /*#__PURE__*/React.createElement(_SourceSelector.SourceSelector, {
        deserialize: () => {
          let selectSourcesValuesArray = [];
          (0, _DebuggerConfigSerializer.deserializeDebuggerConfig)(...this._getSerializationArgs(this.props), (transientSettings, savedSettings) => {
            selectSourcesValuesArray = savedSettings.selectSourcesValues || [];
          });
          const selectSourcesValues = new Map(selectSourcesValuesArray);
          return selectSourcesValues.get(name) || null;
        },
        onSelect: selectedSource => {
          this.state.selectSourcesValues.set(name, selectedSource);
          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      }));
    }

    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "NO TRANSLATION YET FOR: ", (0, _string.capitalize)(name)), /*#__PURE__*/React.createElement("hr", null));
  }

  render() {
    const {
      debuggerTypeName,
      config
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      className: "block"
    }, config.header, this._getConfigurationProperties().filter(property => property.visible).map(property => /*#__PURE__*/React.createElement("div", {
      key: debuggerTypeName + ':' + property.name
    }, this._getComponentForProperty(property))));
  }

}

exports.default = AutoGenLaunchAttachUiComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1kZWJ1Z2dlci1jb21tb24vQXV0b0dlbkxhdW5jaEF0dGFjaFVpQ29tcG9uZW50LmpzIl0sIm5hbWVzIjpbImdldEFjdGl2ZVNjcmlwdFBhdGgiLCJleHRlbnNpb24iLCJjZW50ZXIiLCJhdG9tIiwid29ya3NwYWNlIiwiZ2V0Q2VudGVyIiwiYWN0aXZlRWRpdG9yIiwiZ2V0QWN0aXZlVGV4dEVkaXRvciIsImdldFBhdGgiLCJlbmRzV2l0aCIsIm51Y2xpZGVVcmkiLCJBdXRvR2VuTGF1bmNoQXR0YWNoVWlDb21wb25lbnQiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJfZGlzcG9zYWJsZXMiLCJfaGFuZGxlRGVidWdCdXR0b25DbGljayIsInRhcmdldFVyaSIsImNvbmZpZyIsImF0b21JbnB1dFZhbHVlcyIsImJvb2xlYW5WYWx1ZXMiLCJlbnVtVmFsdWVzIiwicHJvY2Vzc1RhYmxlVmFsdWVzIiwiZGV2aWNlQW5kUGFja2FnZVZhbHVlcyIsImRldmljZUFuZFByb2Nlc3NWYWx1ZXMiLCJzZWxlY3RTb3VyY2VzVmFsdWVzIiwic3RhdGUiLCJsYXVuY2giLCJ2c0FkYXB0ZXJUeXBlIiwiZ2V0UHJvY2Vzc05hbWUiLCJhZGFwdGVyRXhlY3V0YWJsZSIsInN0cmluZ1ZhbHVlcyIsIk1hcCIsInN0cmluZ0FycmF5VmFsdWVzIiwib2JqZWN0VmFsdWVzIiwibnVtYmVyVmFsdWVzIiwianNvblZhbHVlcyIsIlByb21pc2UiLCJhbGwiLCJBcnJheSIsImZyb20iLCJfZ2V0Q29uZmlndXJhdGlvblByb3BlcnRpZXMiLCJmaWx0ZXIiLCJwcm9wZXJ0eSIsInZpc2libGUiLCJoYXMiLCJuYW1lIiwibWFwIiwidHlwZSIsIml0ZW1UeXBlIiwiXyIsInZhbHVlIiwiZ2V0IiwidHJpbW1lZFZhbHVlIiwidHJpbSIsInJlc29sdmVkUGF0aCIsInBhdGhSZXNvbHZlciIsInNldCIsIm9iamVjdFZhbHVlIiwiZm9yRWFjaCIsInZhcmlhYmxlIiwibGhzIiwicmhzIiwic3BsaXQiLCJOdW1iZXIiLCJKU09OIiwicGFyc2UiLCJwYWNrYWdlVmFsdWVzIiwiZGV2aWNlQW5kUGFja2FnZSIsInNlbGVjdGVkUGFja2FnZSIsInByb2Nlc3NWYWx1ZXMiLCJkZXZpY2VBbmRQcm9jZXNzIiwicHJvY2Vzc05hbWUiLCJzZWxlY3RlZFByb2Nlc3MiLCJ2YWx1ZXMiLCJrZXkiLCJkZWZhdWx0VmFsdWUiLCJkZWJ1Z2dlclNlcnZpY2UiLCJzdGFydFZzcERlYnVnZ2luZyIsImRlYnVnTW9kZSIsImFkYXB0ZXJUeXBlIiwiY3VzdG9tQ29udHJvbEJ1dHRvbnMiLCJpc1Jlc3RhcnRhYmxlIiwiX2dldFNlcmlhbGl6YXRpb25BcmdzIiwiVW5pdmVyc2FsRGlzcG9zYWJsZSIsIl9hdG9tSW5wdXRUeXBlIiwicHJvcGVydGllcyIsIl9wb3B1bGF0ZURlZmF1bHRWYWx1ZXMiLCJpZ25vcmVQcmV2aW91c1BhcmFtcyIsInVuZGVmaW5lZCIsImV4aXN0aW5nVmFsdWUiLCJTdHJpbmciLCJzdHJpbmdpZnkiLCJlbnVtcyIsImRlYnVnZ2VyVHlwZU5hbWUiLCJhcmdzIiwiaXNSZW1vdGUiLCJnZXRIb3N0bmFtZSIsIl9kZXNlcmlhbGl6ZURlYnVnZ2VyQ29uZmlnIiwidHJhbnNpZW50U2V0dGluZ3MiLCJzYXZlZFNldHRpbmdzIiwiY3dkUHJvcGVydHlOYW1lIiwic2NyaXB0UHJvcGVydHlOYW1lIiwic2NyaXB0RXh0ZW5zaW9uIiwic2NyaXB0UGF0aCIsImN3ZCIsImRpcm5hbWUiLCJzZXRTdGF0ZSIsIm5ld1N0YXRlIiwiY29uZmlnSXNWYWxpZENoYW5nZWQiLCJfZGVidWdCdXR0b25TaG91bGRFbmFibGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsImFkZCIsImNvbW1hbmRzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJkaXNwb3NlIiwiX3ZhbHVlRXhpc3RzIiwiaXNOYU4iLCJkZXZpY2VBbmRQYWNrYWdlVmFsdWUiLCJkZXZpY2VBbmRQcm9jZXNzVmFsdWUiLCJzZWxlY3RTb3VyY2VzVmFsdWUiLCJwIiwicmVxdWlyZWQiLCJldmVyeSIsIl9nZXRDb21wb25lbnRGb3JQcm9wZXJ0eSIsImRlc2NyaXB0aW9uIiwiZm9ybWF0dGVkTmFtZSIsInJlcGxhY2UiLCJuYW1lTGFiZWwiLCJuZXdWYWx1ZSIsImNoZWNrZWQiLCJzZWxlY3RlZFZhbHVlIiwiZW51bVZhbHVlIiwibGFiZWwiLCJwaWQiLCJkZWxldGUiLCJwYWNrYWdlVmFsdWVzQXJyYXkiLCJkZXZpY2VTZXJpYWwiLCJqYXZhUGFja2FnZSIsInByb2Nlc3NWYWx1ZXNBcnJheSIsImphdmFQcm9jZXNzIiwic2VsZWN0U291cmNlc1ZhbHVlc0FycmF5Iiwic2VsZWN0ZWRTb3VyY2UiLCJyZW5kZXIiLCJoZWFkZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFvQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBdENBOzs7Ozs7Ozs7OztBQXNFQTtBQUNBLFNBQVNBLG1CQUFULENBQTZCQyxTQUE3QixFQUF3RDtBQUN0RCxRQUFNQyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxTQUFmLEdBQ1hGLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxTQUFmLEVBRFcsR0FFWEYsSUFBSSxDQUFDQyxTQUZUO0FBR0EsUUFBTUUsWUFBOEIsR0FBR0osTUFBTSxDQUFDSyxtQkFBUCxFQUF2Qzs7QUFDQSxNQUNFRCxZQUFZLElBQUksSUFBaEIsSUFDQSxDQUFDQSxZQUFZLENBQUNFLE9BQWIsRUFERCxJQUVBLENBQUMseUJBQVdGLFlBQVksQ0FBQ0UsT0FBYixFQUFYLEVBQW1DQyxRQUFuQyxDQUE0Q1IsU0FBNUMsQ0FISCxFQUlFO0FB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R0QsV0FOSDtBQVFBLGdCQUFNQSxtQkFBbUIsR0FBRyxJQUFJTyxHQUFKLENBQVFnSCx3QkFBUixDQUE1QjtBQUNBLGlCQUFPdkgsbUJBQW1CLENBQUMyQixHQUFwQixDQUF3Qk4sSUFBeEIsS0FBaUMsSUFBeEM7QUFDRCxTQWJIO0FBY0UsUUFBQSxRQUFRLEVBQUVtRyxjQUFjLElBQUk7QUFDMUIsZUFBS3ZILEtBQUwsQ0FBV0QsbUJBQVgsQ0FBK0JnQyxHQUEvQixDQUFtQ1gsSUFBbkMsRUFBeUNtRyxjQUF6QztBQUNBLGVBQUtuSSxLQUFMLENBQVcrRixvQkFBWCxDQUFnQyxLQUFLQyx3QkFBTCxFQUFoQztBQUNEO0FBakJILFFBRkYsQ0FERjtBQXdCRDs7QUFDRCx3QkFDRSw4Q0FDRSwrREFBZ0Msd0JBQVdoRSxJQUFYLENBQWhDLENBREYsZUFFRSwrQkFGRixDQURGO0FBTUQ7O0FBRURvRyxFQUFBQSxNQUFNLEdBQWU7QUFDbkIsVUFBTTtBQUFDcEQsTUFBQUEsZ0JBQUQ7QUFBbUI1RSxNQUFBQTtBQUFuQixRQUE2QixLQUFLSixLQUF4QztBQUNBLHdCQUNFO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixPQUNHSSxNQUFNLENBQUNpSSxNQURWLEVBRUcsS0FBSzFHLDJCQUFMLEdBQ0VDLE1BREYsQ0FDU0MsUUFBUSxJQUFJQSxRQUFRLENBQUNDLE9BRDlCLEVBRUVHLEdBRkYsQ0FFTUosUUFBUSxpQkFDWDtBQUFLLE1BQUEsR0FBRyxFQUFFbUQsZ0JBQWdCLEdBQUcsR0FBbkIsR0FBeUJuRCxRQUFRLENBQUNHO0FBQTVDLE9BQ0csS0FBS2lGLHdCQUFMLENBQThCcEYsUUFBOUIsQ0FESCxDQUhILENBRkgsQ0FERjtBQVlEOztBQS9aRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCB0eXBlIHtBbmRyb2lkSmF2YVByb2Nlc3N9IGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1hZGIvbGliL3R5cGVzJztcclxuaW1wb3J0IHR5cGUge051Y2xpZGVVcml9IGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL251Y2xpZGVVcmknO1xyXG5pbXBvcnQgdHlwZSB7XHJcbiAgQXV0b0dlblByb3BlcnR5LFxyXG4gIEF1dG9HZW5MYXVuY2hPckF0dGFjaENvbmZpZyxcclxuICBBdXRvR2VuUHJvcGVydHlUeXBlLFxyXG4gIEF1dG9HZW5Qcm9wZXJ0eVByaW1pdGl2ZVR5cGUsXHJcbn0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBpZHggZnJvbSAnaWR4JztcclxuaW1wb3J0IG51bGx0aHJvd3MgZnJvbSAnbnVsbHRocm93cyc7XHJcbmltcG9ydCB7Q2hlY2tib3h9IGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zLXVpL0NoZWNrYm94JztcclxuaW1wb3J0IHtEcm9wZG93bn0gZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMtdWkvRHJvcGRvd24nO1xyXG5pbXBvcnQge0F0b21JbnB1dH0gZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMtdWkvQXRvbUlucHV0JztcclxuaW1wb3J0IG51Y2xpZGVVcmkgZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvbnVjbGlkZVVyaSc7XHJcbmltcG9ydCB7Y2FwaXRhbGl6ZSwgc2hlbGxQYXJzZVdpdGhHbG9ic30gZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvc3RyaW5nJztcclxuaW1wb3J0IFVuaXZlcnNhbERpc3Bvc2FibGUgZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvVW5pdmVyc2FsRGlzcG9zYWJsZSc7XHJcbmltcG9ydCB7Z2V0RGVidWdnZXJTZXJ2aWNlfSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy1hdG9tL2RlYnVnZ2VyJztcclxuaW1wb3J0IHtcclxuICBzZXJpYWxpemVEZWJ1Z2dlckNvbmZpZyxcclxuICBkZXNlcmlhbGl6ZURlYnVnZ2VyQ29uZmlnLFxyXG59IGZyb20gJy4vRGVidWdnZXJDb25maWdTZXJpYWxpemVyJztcclxuaW1wb3J0IHtEZXZpY2VBbmRQYWNrYWdlfSBmcm9tICcuL0RldmljZUFuZFBhY2thZ2UnO1xyXG5pbXBvcnQge0RldmljZUFuZFByb2Nlc3N9IGZyb20gJy4vRGV2aWNlQW5kUHJvY2Vzcyc7XHJcbmltcG9ydCBTZWxlY3RhYmxlRmlsdGVyYWJsZVByb2Nlc3NUYWJsZSBmcm9tICcuL1NlbGVjdGFibGVGaWx0ZXJhYmxlUHJvY2Vzc1RhYmxlJztcclxuaW1wb3J0IHtTb3VyY2VTZWxlY3Rvcn0gZnJvbSAnLi9Tb3VyY2VTZWxlY3Rvcic7XHJcblxyXG50eXBlIFN0cmluZ1BhaXIgPSBbc3RyaW5nLCBzdHJpbmddO1xyXG5cclxudHlwZSBQcm9wcyA9IHt8XHJcbiAgK3RhcmdldFVyaTogTnVjbGlkZVVyaSxcclxuICArY29uZmlnSXNWYWxpZENoYW5nZWQ6ICh2YWxpZDogYm9vbGVhbikgPT4gdm9pZCxcclxuICArY29uZmlnOiBBdXRvR2VuTGF1bmNoT3JBdHRhY2hDb25maWcsXHJcbiAgK2RlYnVnZ2VyVHlwZU5hbWU6IHN0cmluZyxcclxuICArcGF0aFJlc29sdmVyOiAocHJvamVjdDogTnVjbGlkZVVyaSwgZmlsZVBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmc+LFxyXG58fTtcclxuXHJcbnR5cGUgRGV2aWNlQW5kUGFja2FnZVR5cGUgPSB7fFxyXG4gICtkZXZpY2VTZXJpYWw6IHN0cmluZyxcclxuICArc2VsZWN0ZWRQYWNrYWdlOiBzdHJpbmcsXHJcbnx9O1xyXG5cclxudHlwZSBEZXZpY2VBbmRQcm9jZXNzVHlwZSA9IHt8XHJcbiAgK2RldmljZVNlcmlhbDogc3RyaW5nLFxyXG4gICtzZWxlY3RlZFByb2Nlc3M6IEFuZHJvaWRKYXZhUHJvY2VzcyxcclxufH07XHJcblxyXG50eXBlIFN0YXRlID0ge1xyXG4gIGVudW1WYWx1ZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4sXHJcbiAgYm9vbGVhblZhbHVlczogTWFwPHN0cmluZywgYm9vbGVhbj4sXHJcbiAgYXRvbUlucHV0VmFsdWVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+LFxyXG4gIHByb2Nlc3NUYWJsZVZhbHVlczogTWFwPHN0cmluZywgbnVtYmVyPixcclxuICBkZXZpY2VBbmRQYWNrYWdlVmFsdWVzOiBNYXA8c3RyaW5nLCBEZXZpY2VBbmRQYWNrYWdlVHlwZT4sXHJcbiAgZGV2aWNlQW5kUHJvY2Vzc1ZhbHVlczogTWFwPHN0cmluZywgRGV2aWNlQW5kUHJvY2Vzc1R5cGU+LFxyXG4gIHNlbGVjdFNvdXJjZXNWYWx1ZXM6IE1hcDxzdHJpbmcsID9OdWNsaWRlVXJpPixcclxufTtcclxuXHJcbi8vIGV4dGVuc2lvbiBtdXN0IGJlIGEgc3RyaW5nIHN0YXJ0aW5nIHdpdGggYSAnLicgbGlrZSAnLmpzJyBvciAnLnB5J1xyXG5mdW5jdGlvbiBnZXRBY3RpdmVTY3JpcHRQYXRoKGV4dGVuc2lvbjogc3RyaW5nKTogc3RyaW5nIHtcclxuICBjb25zdCBjZW50ZXIgPSBhdG9tLndvcmtzcGFjZS5nZXRDZW50ZXJcclxuICAgID8gYXRvbS53b3Jrc3BhY2UuZ2V0Q2VudGVyKClcclxuICAgIDogYXRvbS53b3Jrc3BhY2U7XHJcbiAgY29uc3QgYWN0aXZlRWRpdG9yOiA/YXRvbSRUZXh0RWRpdG9yID0gY2VudGVyLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcclxuICBpZiAoXHJcbiAgICBhY3RpdmVFZGl0b3IgPT0gbnVsbCB8fFxyXG4gICAgIWFjdGl2ZUVkaXRvci5nZXRQYXRoKCkgfHxcclxuICAgICFudWxsdGhyb3dzKGFjdGl2ZUVkaXRvci5nZXRQYXRoKCkpLmVuZHNXaXRoKGV4dGVuc2lvbilcclxuICApIHtcclxuICAgIHJldHVybiAnJztcclxuICB9XHJcbiAgcmV0dXJuIG51Y2xpZGVVcmkuZ2V0UGF0aChudWxsdGhyb3dzKGFjdGl2ZUVkaXRvci5nZXRQYXRoKCkpKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b0dlbkxhdW5jaEF0dGFjaFVpQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxyXG4gIFByb3BzLFxyXG4gIFN0YXRlLFxyXG4+IHtcclxuICBfZGlzcG9zYWJsZXM6IFVuaXZlcnNhbERpc3Bvc2FibGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5fZGlzcG9zYWJsZXMgPSBuZXcgVW5pdmVyc2FsRGlzcG9zYWJsZSgpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgYXRvbUlucHV0VmFsdWVzOiBuZXcgTWFwKCksXHJcbiAgICAgIGJvb2xlYW5WYWx1ZXM6IG5ldyBNYXAoKSxcclxuICAgICAgZW51bVZhbHVlczogbmV3IE1hcCgpLFxyXG4gICAgICBwcm9jZXNzVGFibGVWYWx1ZXM6IG5ldyBNYXAoKSxcclxuICAgICAgZGV2aWNlQW5kUGFja2FnZVZhbHVlczogbmV3IE1hcCgpLFxyXG4gICAgICBkZXZpY2VBbmRQcm9jZXNzVmFsdWVzOiBuZXcgTWFwKCksXHJcbiAgICAgIHNlbGVjdFNvdXJjZXNWYWx1ZXM6IG5ldyBNYXAoKSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBfYXRvbUlucHV0VHlwZShcclxuICAgIHR5cGU6IEF1dG9HZW5Qcm9wZXJ0eVR5cGUsXHJcbiAgICBpdGVtVHlwZTogP0F1dG9HZW5Qcm9wZXJ0eVByaW1pdGl2ZVR5cGUsXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0eXBlID09PSAnc3RyaW5nJyB8fFxyXG4gICAgICB0eXBlID09PSAncGF0aCcgfHxcclxuICAgICAgKHR5cGUgPT09ICdhcnJheScgJiYgaXRlbVR5cGUgPT09ICdzdHJpbmcnKSB8fFxyXG4gICAgICB0eXBlID09PSAnb2JqZWN0JyB8fFxyXG4gICAgICB0eXBlID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICB0eXBlID09PSAnanNvbidcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBfZ2V0Q29uZmlndXJhdGlvblByb3BlcnRpZXMoKTogQXV0b0dlblByb3BlcnR5W10ge1xyXG4gICAgY29uc3Qge2NvbmZpZ30gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIGNvbmZpZy5wcm9wZXJ0aWVzO1xyXG4gIH1cclxuXHJcbiAgX3BvcHVsYXRlRGVmYXVsdFZhbHVlcyhcclxuICAgIGNvbmZpZzogQXV0b0dlbkxhdW5jaE9yQXR0YWNoQ29uZmlnLFxyXG4gICAgYXRvbUlucHV0VmFsdWVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+LFxyXG4gICAgYm9vbGVhblZhbHVlczogTWFwPHN0cmluZywgYm9vbGVhbj4sXHJcbiAgICBlbnVtVmFsdWVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+LFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgaWdub3JlUHJldmlvdXNQYXJhbXMgPVxyXG4gICAgICBjb25maWcuaWdub3JlUHJldmlvdXNQYXJhbXMgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgID8gY29uZmlnLmlnbm9yZVByZXZpb3VzUGFyYW1zXHJcbiAgICAgICAgOiBmYWxzZTtcclxuICAgIGNvbmZpZy5wcm9wZXJ0aWVzLmZpbHRlcihwcm9wZXJ0eSA9PiBwcm9wZXJ0eS52aXNpYmxlKS5tYXAocHJvcGVydHkgPT4ge1xyXG4gICAgICBjb25zdCB7bmFtZSwgdHlwZX0gPSBwcm9wZXJ0eTtcclxuICAgICAgY29uc3QgaXRlbVR5cGUgPSBpZHgocHJvcGVydHksIF8gPT4gXy5pdGVtVHlwZSk7XHJcbiAgICAgIGlmICh0aGlzLl9hdG9tSW5wdXRUeXBlKHR5cGUsIGl0ZW1UeXBlKSkge1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVmFsdWUgPSBhdG9tSW5wdXRWYWx1ZXMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIChpZ25vcmVQcmV2aW91c1BhcmFtcyB8fCBleGlzdGluZ1ZhbHVlID09IG51bGwpICYmXHJcbiAgICAgICAgICB0eXBlb2YgcHJvcGVydHkuZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgLy8gU3RyaW5nKHByb3BlcnR5RGVzY3JpcHRpb24uZGVmYXVsdCkgZGVhbHMgd2l0aCBib3RoIHN0cmluZ3MgYW5kIG51bWJlcnMgYW5kIGFycmF5c1xyXG4gICAgICAgICAgLy8gSlNPTi5zdHJpbmdpZnkgZm9yIEpTT05cclxuICAgICAgICAgIC8vIGVtcHR5IHN0cmluZyBvdGhlcndpc2VcclxuICAgICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9XHJcbiAgICAgICAgICAgIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInIHx8IHR5cGUgPT09ICdhcnJheSdcclxuICAgICAgICAgICAgICA/IFN0cmluZyhwcm9wZXJ0eS5kZWZhdWx0VmFsdWUpXHJcbiAgICAgICAgICAgICAgOiB0eXBlID09PSAnanNvbidcclxuICAgICAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkocHJvcGVydHkuZGVmYXVsdFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgOiAnJztcclxuICAgICAgICAgIGF0b21JbnB1dFZhbHVlcy5zZXQobmFtZSwgZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdWYWx1ZSA9IGJvb2xlYW5WYWx1ZXMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIChpZ25vcmVQcmV2aW91c1BhcmFtcyB8fCBleGlzdGluZ1ZhbHVlID09IG51bGwpICYmXHJcbiAgICAgICAgICB0eXBlb2YgcHJvcGVydHkuZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgICAgcHJvcGVydHkuZGVmYXVsdFZhbHVlICE9IG51bGwgJiZcclxuICAgICAgICAgIHR5cGVvZiBwcm9wZXJ0eS5kZWZhdWx0VmFsdWUgPT09ICdib29sZWFuJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgYm9vbGVhblZhbHVlcy5zZXQobmFtZSwgcHJvcGVydHkuZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYm9vbGVhblZhbHVlcy5zZXQobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnZW51bScgJiYgcHJvcGVydHkuZW51bXMgIT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVmFsdWUgPSBlbnVtVmFsdWVzLmdldChuYW1lKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAoaWdub3JlUHJldmlvdXNQYXJhbXMgfHwgZXhpc3RpbmdWYWx1ZSA9PSBudWxsKSAmJlxyXG4gICAgICAgICAgdHlwZW9mIHByb3BlcnR5LmRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgIHByb3BlcnR5LmRlZmF1bHRWYWx1ZSAhPSBudWxsICYmXHJcbiAgICAgICAgICB0eXBlb2YgcHJvcGVydHkuZGVmYXVsdFZhbHVlID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgZW51bVZhbHVlcy5zZXQobmFtZSwgcHJvcGVydHkuZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2dldFNlcmlhbGl6YXRpb25BcmdzKHByb3BzOiBQcm9wcykge1xyXG4gICAgY29uc3Qge3RhcmdldFVyaSwgY29uZmlnLCBkZWJ1Z2dlclR5cGVOYW1lfSA9IHByb3BzO1xyXG4gICAgY29uc3QgYXJncyA9IFtcclxuICAgICAgbnVjbGlkZVVyaS5pc1JlbW90ZSh0YXJnZXRVcmkpXHJcbiAgICAgICAgPyBudWNsaWRlVXJpLmdldEhvc3RuYW1lKHRhcmdldFVyaSlcclxuICAgICAgICA6ICdsb2NhbCcsXHJcbiAgICAgIGNvbmZpZy5sYXVuY2ggPyAnbGF1bmNoJyA6ICdhdHRhY2gnLFxyXG4gICAgICBkZWJ1Z2dlclR5cGVOYW1lLFxyXG4gICAgXTtcclxuICAgIHJldHVybiBhcmdzO1xyXG4gIH1cclxuXHJcbiAgX2Rlc2VyaWFsaXplRGVidWdnZXJDb25maWcocHJvcHM6IFByb3BzKTogdm9pZCB7XHJcbiAgICBkZXNlcmlhbGl6ZURlYnVnZ2VyQ29uZmlnKFxyXG4gICAgICAuLi50aGlzLl9nZXRTZXJpYWxpemF0aW9uQXJncyhwcm9wcyksXHJcbiAgICAgICh0cmFuc2llbnRTZXR0aW5ncywgc2F2ZWRTZXR0aW5ncykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHtjb25maWd9ID0gcHJvcHM7XHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgY3dkUHJvcGVydHlOYW1lLFxyXG4gICAgICAgICAgc2NyaXB0UHJvcGVydHlOYW1lLFxyXG4gICAgICAgICAgbGF1bmNoLFxyXG4gICAgICAgICAgc2NyaXB0RXh0ZW5zaW9uLFxyXG4gICAgICAgIH0gPSBjb25maWc7XHJcbiAgICAgICAgY29uc3QgYXRvbUlucHV0VmFsdWVzID0gbmV3IE1hcChzYXZlZFNldHRpbmdzLmF0b21JbnB1dFZhbHVlcyB8fCBbXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNjcmlwdFBhdGggPVxyXG4gICAgICAgICAgKHNjcmlwdFByb3BlcnR5TmFtZSAhPSBudWxsICYmXHJcbiAgICAgICAgICAgIGF0b21JbnB1dFZhbHVlcy5nZXQoc2NyaXB0UHJvcGVydHlOYW1lKSkgfHxcclxuICAgICAgICAgIChzY3JpcHRFeHRlbnNpb24gIT0gbnVsbCAmJiBnZXRBY3RpdmVTY3JpcHRQYXRoKHNjcmlwdEV4dGVuc2lvbikpIHx8XHJcbiAgICAgICAgICAnJztcclxuICAgICAgICBpZiAoY3dkUHJvcGVydHlOYW1lICE9IG51bGwpIHtcclxuICAgICAgICAgIGNvbnN0IGN3ZCA9XHJcbiAgICAgICAgICAgIGF0b21JbnB1dFZhbHVlcy5nZXQoY3dkUHJvcGVydHlOYW1lKSB8fFxyXG4gICAgICAgICAgICAoc2NyaXB0UGF0aCAhPT0gJycgPyBudWNsaWRlVXJpLmRpcm5hbWUoc2NyaXB0UGF0aCkgOiAnJyk7XHJcbiAgICAgICAgICBpZiAoY3dkICE9PSAnJykge1xyXG4gICAgICAgICAgICBhdG9tSW5wdXRWYWx1ZXMuc2V0KGN3ZFByb3BlcnR5TmFtZSwgY3dkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhdW5jaCkge1xyXG4gICAgICAgICAgaWYgKHNjcmlwdFBhdGggIT09ICcnICYmIHNjcmlwdFByb3BlcnR5TmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGF0b21JbnB1dFZhbHVlcy5zZXQoc2NyaXB0UHJvcGVydHlOYW1lLCBzY3JpcHRQYXRoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYm9vbGVhblZhbHVlcyA9IG5ldyBNYXAoc2F2ZWRTZXR0aW5ncy5ib29sZWFuVmFsdWVzIHx8IFtdKTtcclxuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0gbmV3IE1hcChzYXZlZFNldHRpbmdzLmVudW1WYWx1ZXMgfHwgW10pO1xyXG4gICAgICAgIHRoaXMuX3BvcHVsYXRlRGVmYXVsdFZhbHVlcyhcclxuICAgICAgICAgIGNvbmZpZyxcclxuICAgICAgICAgIGF0b21JbnB1dFZhbHVlcyxcclxuICAgICAgICAgIGJvb2xlYW5WYWx1ZXMsXHJcbiAgICAgICAgICBlbnVtVmFsdWVzLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gZG8gbm90IHNlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUgdGhlc2UgdmFsdWVzOlxyXG4gICAgICAgIGNvbnN0IHByb2Nlc3NUYWJsZVZhbHVlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBjb25zdCBkZXZpY2VBbmRQYWNrYWdlVmFsdWVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGNvbnN0IGRldmljZUFuZFByb2Nlc3NWYWx1ZXMgPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgYXRvbUlucHV0VmFsdWVzLFxyXG4gICAgICAgICAgYm9vbGVhblZhbHVlcyxcclxuICAgICAgICAgIGVudW1WYWx1ZXMsXHJcbiAgICAgICAgICBwcm9jZXNzVGFibGVWYWx1ZXMsXHJcbiAgICAgICAgICBkZXZpY2VBbmRQYWNrYWdlVmFsdWVzLFxyXG4gICAgICAgICAgZGV2aWNlQW5kUHJvY2Vzc1ZhbHVlcyxcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzZXRTdGF0ZShuZXdTdGF0ZTogT2JqZWN0KTogdm9pZCB7XHJcbiAgICBzdXBlci5zZXRTdGF0ZShuZXdTdGF0ZSwgKCkgPT5cclxuICAgICAgdGhpcy5wcm9wcy5jb25maWdJc1ZhbGlkQ2hhbmdlZCh0aGlzLl9kZWJ1Z0J1dHRvblNob3VsZEVuYWJsZSgpKSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IFByb3BzKSB7XHJcbiAgICBpZiAobmV4dFByb3BzLmRlYnVnZ2VyVHlwZU5hbWUgIT09IHRoaXMucHJvcHMuZGVidWdnZXJUeXBlTmFtZSkge1xyXG4gICAgICB0aGlzLl9kZXNlcmlhbGl6ZURlYnVnZ2VyQ29uZmlnKG5leHRQcm9wcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fZGVzZXJpYWxpemVEZWJ1Z2dlckNvbmZpZyh0aGlzLnByb3BzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fZGlzcG9zYWJsZXMuYWRkKFxyXG4gICAgICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCB7XHJcbiAgICAgICAgJ2NvcmU6Y29uZmlybSc6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0J1dHRvblNob3VsZEVuYWJsZSgpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2hhbmRsZURlYnVnQnV0dG9uQ2xpY2soKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICB9KSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcclxuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIF92YWx1ZUV4aXN0cyhwcm9wZXJ0eTogQXV0b0dlblByb3BlcnR5KTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB7bmFtZSwgdHlwZX0gPSBwcm9wZXJ0eTtcclxuICAgIGlmIChcclxuICAgICAgdHlwZSA9PT0gJ3N0cmluZycgfHxcclxuICAgICAgdHlwZSA9PT0gJ3BhdGgnIHx8XHJcbiAgICAgICh0eXBlID09PSAnYXJyYXknICYmIHByb3BlcnR5Lml0ZW1UeXBlID09PSAnc3RyaW5nJylcclxuICAgICkge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc3RhdGUuYXRvbUlucHV0VmFsdWVzLmdldChuYW1lKTtcclxuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09ICcnO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc3RhdGUuYXRvbUlucHV0VmFsdWVzLmdldChuYW1lKTtcclxuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIWlzTmFOKHZhbHVlKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zdGF0ZS5ib29sZWFuVmFsdWVzLmdldChuYW1lKTtcclxuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGw7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdlbnVtJykge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc3RhdGUuZW51bVZhbHVlcy5nZXQobmFtZSk7XHJcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAncHJvY2VzcycpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnN0YXRlLnByb2Nlc3NUYWJsZVZhbHVlcy5nZXQobmFtZSk7XHJcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZGV2aWNlQW5kUGFja2FnZScpIHtcclxuICAgICAgY29uc3QgZGV2aWNlQW5kUGFja2FnZVZhbHVlID0gdGhpcy5zdGF0ZS5kZXZpY2VBbmRQYWNrYWdlVmFsdWVzLmdldChuYW1lKTtcclxuICAgICAgcmV0dXJuIGRldmljZUFuZFBhY2thZ2VWYWx1ZSAhPSBudWxsO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZGV2aWNlQW5kUHJvY2VzcycpIHtcclxuICAgICAgY29uc3QgZGV2aWNlQW5kUHJvY2Vzc1ZhbHVlID0gdGhpcy5zdGF0ZS5kZXZpY2VBbmRQcm9jZXNzVmFsdWVzLmdldChuYW1lKTtcclxuICAgICAgcmV0dXJuIGRldmljZUFuZFByb2Nlc3NWYWx1ZSAhPSBudWxsO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc2VsZWN0U291cmNlcycpIHtcclxuICAgICAgY29uc3Qgc2VsZWN0U291cmNlc1ZhbHVlID0gdGhpcy5zdGF0ZS5zZWxlY3RTb3VyY2VzVmFsdWVzLmdldChuYW1lKTtcclxuICAgICAgcmV0dXJuIHNlbGVjdFNvdXJjZXNWYWx1ZSAhPSBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgX2RlYnVnQnV0dG9uU2hvdWxkRW5hYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2dldENvbmZpZ3VyYXRpb25Qcm9wZXJ0aWVzKClcclxuICAgICAgLmZpbHRlcihwID0+IHAucmVxdWlyZWQpXHJcbiAgICAgIC5ldmVyeShwID0+IHRoaXMuX3ZhbHVlRXhpc3RzKHApKTtcclxuICB9XHJcblxyXG4gIF9nZXRDb21wb25lbnRGb3JQcm9wZXJ0eShwcm9wZXJ0eTogQXV0b0dlblByb3BlcnR5KTogUmVhY3QuTm9kZSB7XHJcbiAgICBjb25zdCB7bmFtZSwgdHlwZSwgZGVzY3JpcHRpb24sIHJlcXVpcmVkfSA9IHByb3BlcnR5O1xyXG4gICAgY29uc3QgZm9ybWF0dGVkTmFtZSA9XHJcbiAgICAgIGNhcGl0YWxpemUobmFtZS5yZXBsYWNlKC8oW0EtWl0pL2csICcgJDEnKSkgK1xyXG4gICAgICAocmVxdWlyZWQgPyAnIChSZXF1aXJlZCknIDogJycpO1xyXG4gICAgY29uc3QgbmFtZUxhYmVsID0gdHlwZSA9PT0gJ2Jvb2xlYW4nID8gZm9ybWF0dGVkTmFtZSA6IGZvcm1hdHRlZE5hbWUgKyAnOic7XHJcbiAgICBjb25zdCBpdGVtVHlwZSA9IGlkeChwcm9wZXJ0eSwgXyA9PiBfLml0ZW1UeXBlKTtcclxuICAgIGlmICh0aGlzLl9hdG9tSW5wdXRUeXBlKHR5cGUsIGl0ZW1UeXBlKSkge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc3RhdGUuYXRvbUlucHV0VmFsdWVzLmdldChuYW1lKSB8fCAnJztcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAge25hbWVMYWJlbH1cclxuICAgICAgICAgIDxBdG9tSW5wdXRcclxuICAgICAgICAgICAga2V5PXt0aGlzLnByb3BzLmRlYnVnZ2VyVHlwZU5hbWUgKyAnOicgKyBuYW1lfVxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlclRleHQ9e2Rlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgICB2YWx1ZT17dmFsdWV9XHJcbiAgICAgICAgICAgIG9uRGlkQ2hhbmdlPXtuZXdWYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hdG9tSW5wdXRWYWx1ZXMuc2V0KG5hbWUsIG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICB0aGlzLnByb3BzLmNvbmZpZ0lzVmFsaWRDaGFuZ2VkKHRoaXMuX2RlYnVnQnV0dG9uU2hvdWxkRW5hYmxlKCkpO1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgIGNvbnN0IGNoZWNrZWQgPSB0aGlzLnN0YXRlLmJvb2xlYW5WYWx1ZXMuZ2V0KG5hbWUpIHx8IGZhbHNlO1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5saW5lLWJsb2NrXCI+XHJcbiAgICAgICAgICA8Q2hlY2tib3hcclxuICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cclxuICAgICAgICAgICAgbGFiZWw9e25hbWVMYWJlbH1cclxuICAgICAgICAgICAgdGl0bGU9e2Rlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17bmV3VmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuYm9vbGVhblZhbHVlcy5zZXQobmFtZSwgbmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuY29uZmlnSXNWYWxpZENoYW5nZWQodGhpcy5fZGVidWdCdXR0b25TaG91bGRFbmFibGUoKSk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZW51bScgJiYgcHJvcGVydHkuZW51bXMgIT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBlbnVtcyA9IHByb3BlcnR5LmVudW1zO1xyXG4gICAgICBjb25zdCBzZWxlY3RlZFZhbHVlID0gdGhpcy5zdGF0ZS5lbnVtVmFsdWVzLmdldChuYW1lKSB8fCBudWxsO1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICB7bmFtZUxhYmVsfVxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGxhYmVsPntkZXNjcmlwdGlvbn08L2xhYmVsPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8RHJvcGRvd25cclxuICAgICAgICAgICAgb3B0aW9ucz17ZW51bXMubWFwKGVudW1WYWx1ZSA9PiAoe1xyXG4gICAgICAgICAgICAgIHZhbHVlOiBlbnVtVmFsdWUsXHJcbiAgICAgICAgICAgICAgbGFiZWw6IGNhcGl0YWxpemUoZW51bVZhbHVlLnJlcGxhY2UoLyhbQS1aXSkvZywgJyAkMScpKSxcclxuICAgICAgICAgICAgfSkpfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17ZW51bVZhbHVlID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLmVudW1WYWx1ZXMuc2V0KG5hbWUsIGVudW1WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb25maWdJc1ZhbGlkQ2hhbmdlZCh0aGlzLl9kZWJ1Z0J1dHRvblNob3VsZEVuYWJsZSgpKTtcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgdmFsdWU9e3NlbGVjdGVkVmFsdWV9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAncHJvY2VzcycpIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAge25hbWVMYWJlbH1cclxuICAgICAgICAgIDxTZWxlY3RhYmxlRmlsdGVyYWJsZVByb2Nlc3NUYWJsZVxyXG4gICAgICAgICAgICB0YXJnZXRVcmk9e3RoaXMucHJvcHMudGFyZ2V0VXJpfVxyXG4gICAgICAgICAgICBvblNlbGVjdD17c2VsZWN0ZWRQcm9jZXNzID0+IHtcclxuICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRQcm9jZXNzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUucHJvY2Vzc1RhYmxlVmFsdWVzLnNldChuYW1lLCBzZWxlY3RlZFByb2Nlc3MucGlkKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5wcm9jZXNzVGFibGVWYWx1ZXMuZGVsZXRlKG5hbWUpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB0aGlzLnByb3BzLmNvbmZpZ0lzVmFsaWRDaGFuZ2VkKHRoaXMuX2RlYnVnQnV0dG9uU2hvdWxkRW5hYmxlKCkpO1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2RldmljZUFuZFBhY2thZ2UnKSB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPERldmljZUFuZFBhY2thZ2VcclxuICAgICAgICAgIHRhcmdldFVyaT17dGhpcy5wcm9wcy50YXJnZXRVcml9XHJcbiAgICAgICAgICBkZXNlcmlhbGl6ZT17KCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcGFja2FnZVZhbHVlc0FycmF5OiBBcnJheTxTdHJpbmdQYWlyPiA9IFtdO1xyXG4gICAgICAgICAgICBkZXNlcmlhbGl6ZURlYnVnZ2VyQ29uZmlnKFxyXG4gICAgICAgICAgICAgIC4uLnRoaXMuX2dldFNlcmlhbGl6YXRpb25BcmdzKHRoaXMucHJvcHMpLFxyXG4gICAgICAgICAgICAgICh0cmFuc2llbnRTZXR0aW5ncywgc2F2ZWRTZXR0aW5ncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGFja2FnZVZhbHVlc0FycmF5ID1cclxuICAgICAgICAgICAgICAgICAgKHNhdmVkU2V0dGluZ3MucGFja2FnZVZhbHVlczogQXJyYXk8U3RyaW5nUGFpcj4pIHx8IFtdO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhY2thZ2VWYWx1ZXMgPSBuZXcgTWFwKHBhY2thZ2VWYWx1ZXNBcnJheSk7XHJcbiAgICAgICAgICAgIHJldHVybiBwYWNrYWdlVmFsdWVzLmdldChuYW1lKSB8fCBudWxsO1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICAgIG9uU2VsZWN0PXsoZGV2aWNlU2VyaWFsLCBqYXZhUGFja2FnZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZGV2aWNlU2VyaWFsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLmRldmljZUFuZFBhY2thZ2VWYWx1ZXMuc2V0KG5hbWUsIHtcclxuICAgICAgICAgICAgICAgIGRldmljZVNlcmlhbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkUGFja2FnZTogamF2YVBhY2thZ2UsXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5kZXZpY2VBbmRQYWNrYWdlVmFsdWVzLmRlbGV0ZShuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNvbmZpZ0lzVmFsaWRDaGFuZ2VkKHRoaXMuX2RlYnVnQnV0dG9uU2hvdWxkRW5hYmxlKCkpO1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICAvPlxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZGV2aWNlQW5kUHJvY2VzcycpIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8RGV2aWNlQW5kUHJvY2Vzc1xyXG4gICAgICAgICAgdGFyZ2V0VXJpPXt0aGlzLnByb3BzLnRhcmdldFVyaX1cclxuICAgICAgICAgIGRlc2VyaWFsaXplPXsoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBwcm9jZXNzVmFsdWVzQXJyYXk6IEFycmF5PFN0cmluZ1BhaXI+ID0gW107XHJcbiAgICAgICAgICAgIGRlc2VyaWFsaXplRGVidWdnZXJDb25maWcoXHJcbiAgICAgICAgICAgICAgLi4udGhpcy5fZ2V0U2VyaWFsaXphdGlvbkFyZ3ModGhpcy5wcm9wcyksXHJcbiAgICAgICAgICAgICAgKHRyYW5zaWVudFNldHRpbmdzLCBzYXZlZFNldHRpbmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWVzQXJyYXkgPVxyXG4gICAgICAgICAgICAgICAgICAoc2F2ZWRTZXR0aW5ncy5wcm9jZXNzVmFsdWVzOiBBcnJheTxTdHJpbmdQYWlyPikgfHwgW107XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc1ZhbHVlcyA9IG5ldyBNYXAocHJvY2Vzc1ZhbHVlc0FycmF5KTtcclxuICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NWYWx1ZXMuZ2V0KG5hbWUpIHx8IG51bGw7XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgICAgb25TZWxlY3Q9eyhkZXZpY2VTZXJpYWwsIGphdmFQcm9jZXNzKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkZXZpY2VTZXJpYWwgIT0gbnVsbCAmJiBqYXZhUHJvY2VzcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5kZXZpY2VBbmRQcm9jZXNzVmFsdWVzLnNldChuYW1lLCB7XHJcbiAgICAgICAgICAgICAgICBkZXZpY2VTZXJpYWwsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFByb2Nlc3M6IGphdmFQcm9jZXNzLFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuZGV2aWNlQW5kUHJvY2Vzc1ZhbHVlcy5kZWxldGUobmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jb25maWdJc1ZhbGlkQ2hhbmdlZCh0aGlzLl9kZWJ1Z0J1dHRvblNob3VsZEVuYWJsZSgpKTtcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3NlbGVjdFNvdXJjZXMnKSB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIHtuYW1lTGFiZWx9XHJcbiAgICAgICAgICA8U291cmNlU2VsZWN0b3JcclxuICAgICAgICAgICAgZGVzZXJpYWxpemU9eygpID0+IHtcclxuICAgICAgICAgICAgICBsZXQgc2VsZWN0U291cmNlc1ZhbHVlc0FycmF5OiBBcnJheTxTdHJpbmdQYWlyPiA9IFtdO1xyXG4gICAgICAgICAgICAgIGRlc2VyaWFsaXplRGVidWdnZXJDb25maWcoXHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9nZXRTZXJpYWxpemF0aW9uQXJncyh0aGlzLnByb3BzKSxcclxuICAgICAgICAgICAgICAgICh0cmFuc2llbnRTZXR0aW5ncywgc2F2ZWRTZXR0aW5ncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBzZWxlY3RTb3VyY2VzVmFsdWVzQXJyYXkgPVxyXG4gICAgICAgICAgICAgICAgICAgIChzYXZlZFNldHRpbmdzLnNlbGVjdFNvdXJjZXNWYWx1ZXM6IEFycmF5PFN0cmluZ1BhaXI+KSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIFtdO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIGNvbnN0IHNlbGVjdFNvdXJjZXNWYWx1ZXMgPSBuZXcgTWFwKHNlbGVjdFNvdXJjZXNWYWx1ZXNBcnJheSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdFNvdXJjZXNWYWx1ZXMuZ2V0KG5hbWUpIHx8IG51bGw7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIG9uU2VsZWN0PXtzZWxlY3RlZFNvdXJjZSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RTb3VyY2VzVmFsdWVzLnNldChuYW1lLCBzZWxlY3RlZFNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb25maWdJc1ZhbGlkQ2hhbmdlZCh0aGlzLl9kZWJ1Z0J1dHRvblNob3VsZEVuYWJsZSgpKTtcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxsYWJlbD5OTyBUUkFOU0xBVElPTiBZRVQgRk9SOiB7Y2FwaXRhbGl6ZShuYW1lKX08L2xhYmVsPlxyXG4gICAgICAgIDxociAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XHJcbiAgICBjb25zdCB7ZGVidWdnZXJUeXBlTmFtZSwgY29uZmlnfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsb2NrXCI+XHJcbiAgICAgICAge2NvbmZpZy5oZWFkZXJ9XHJcbiAgICAgICAge3RoaXMuX2dldENvbmZpZ3VyYXRpb25Qcm9wZXJ0aWVzKClcclxuICAgICAgICAgIC5maWx0ZXIocHJvcGVydHkgPT4gcHJvcGVydHkudmlzaWJsZSlcclxuICAgICAgICAgIC5tYXAocHJvcGVydHkgPT4gKFxyXG4gICAgICAgICAgICA8ZGl2IGtleT17ZGVidWdnZXJUeXBlTmFtZSArICc6JyArIHByb3BlcnR5Lm5hbWV9PlxyXG4gICAgICAgICAgICAgIHt0aGlzLl9nZXRDb21wb25lbnRGb3JQcm9wZXJ0eShwcm9wZXJ0eSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgKSl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVEZWJ1Z0J1dHRvbkNsaWNrID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgY29uc3Qge3RhcmdldFVyaSwgY29uZmlnfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGF0b21JbnB1dFZhbHVlcyxcclxuICAgICAgYm9vbGVhblZhbHVlcyxcclxuICAgICAgZW51bVZhbHVlcyxcclxuICAgICAgcHJvY2Vzc1RhYmxlVmFsdWVzLFxyXG4gICAgICBkZXZpY2VBbmRQYWNrYWdlVmFsdWVzLFxyXG4gICAgICBkZXZpY2VBbmRQcm9jZXNzVmFsdWVzLFxyXG4gICAgICBzZWxlY3RTb3VyY2VzVmFsdWVzLFxyXG4gICAgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7bGF1bmNoLCB2c0FkYXB0ZXJUeXBlLCBnZXRQcm9jZXNzTmFtZSwgYWRhcHRlckV4ZWN1dGFibGV9ID0gY29uZmlnO1xyXG5cclxuICAgIGNvbnN0IHN0cmluZ1ZhbHVlcyA9IG5ldyBNYXAoKTtcclxuICAgIGNvbnN0IHN0cmluZ0FycmF5VmFsdWVzID0gbmV3IE1hcCgpO1xyXG4gICAgY29uc3Qgb2JqZWN0VmFsdWVzID0gbmV3IE1hcCgpO1xyXG4gICAgY29uc3QgbnVtYmVyVmFsdWVzID0gbmV3IE1hcCgpO1xyXG4gICAgY29uc3QganNvblZhbHVlcyA9IG5ldyBNYXAoKTtcclxuICAgIGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgICBBcnJheS5mcm9tKFxyXG4gICAgICAgIHRoaXMuX2dldENvbmZpZ3VyYXRpb25Qcm9wZXJ0aWVzKClcclxuICAgICAgICAgIC5maWx0ZXIoXHJcbiAgICAgICAgICAgIHByb3BlcnR5ID0+IHByb3BlcnR5LnZpc2libGUgJiYgYXRvbUlucHV0VmFsdWVzLmhhcyhwcm9wZXJ0eS5uYW1lKSxcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5tYXAoYXN5bmMgcHJvcGVydHkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB7bmFtZSwgdHlwZX0gPSBwcm9wZXJ0eTtcclxuICAgICAgICAgICAgY29uc3QgaXRlbVR5cGUgPSBpZHgocHJvcGVydHksIF8gPT4gXy5pdGVtVHlwZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXRvbUlucHV0VmFsdWVzLmdldChuYW1lKSB8fCAnJztcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdwYXRoJykge1xyXG4gICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkVmFsdWUgPSB2YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZFBhdGggPVxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnBhdGhSZXNvbHZlciA9PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0cmltbWVkVmFsdWVcclxuICAgICAgICAgICAgICAgICAgICA6IGF3YWl0IHRoaXMucHJvcHMucGF0aFJlc29sdmVyKHRhcmdldFVyaSwgdHJpbW1lZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHN0cmluZ1ZhbHVlcy5zZXQobmFtZSwgcmVzb2x2ZWRQYXRoKTtcclxuICAgICAgICAgICAgICB9IGNhdGNoIChfKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmdWYWx1ZXMuc2V0KG5hbWUsIHZhbHVlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICBzdHJpbmdWYWx1ZXMuc2V0KG5hbWUsIHZhbHVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnYXJyYXknICYmIGl0ZW1UeXBlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgIHN0cmluZ0FycmF5VmFsdWVzLnNldChuYW1lLCBzaGVsbFBhcnNlV2l0aEdsb2JzKHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICBjb25zdCBvYmplY3RWYWx1ZSA9IHt9O1xyXG4gICAgICAgICAgICAgIHNoZWxsUGFyc2VXaXRoR2xvYnModmFsdWUpLmZvckVhY2godmFyaWFibGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW2xocywgcmhzXSA9IHZhcmlhYmxlLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgICAgICBvYmplY3RWYWx1ZVtsaHNdID0gcmhzO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIG9iamVjdFZhbHVlcy5zZXQobmFtZSwgb2JqZWN0VmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgbnVtYmVyVmFsdWVzLnNldChuYW1lLCBOdW1iZXIodmFsdWUpKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnanNvbicpIHtcclxuICAgICAgICAgICAgICBqc29uVmFsdWVzLnNldChuYW1lLCBKU09OLnBhcnNlKHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgIH0pLFxyXG4gICAgICApLFxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBwYWNrYWdlVmFsdWVzID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5fZ2V0Q29uZmlndXJhdGlvblByb3BlcnRpZXMoKVxyXG4gICAgICAuZmlsdGVyKFxyXG4gICAgICAgIHByb3BlcnR5ID0+XHJcbiAgICAgICAgICBwcm9wZXJ0eS52aXNpYmxlICYmIGRldmljZUFuZFBhY2thZ2VWYWx1ZXMuaGFzKHByb3BlcnR5Lm5hbWUpLFxyXG4gICAgICApXHJcbiAgICAgIC5mb3JFYWNoKHByb3BlcnR5ID0+IHtcclxuICAgICAgICBjb25zdCBkZXZpY2VBbmRQYWNrYWdlID0gZGV2aWNlQW5kUGFja2FnZVZhbHVlcy5nZXQocHJvcGVydHkubmFtZSk7XHJcbiAgICAgICAgaWYgKGRldmljZUFuZFBhY2thZ2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgcGFja2FnZVZhbHVlcy5zZXQocHJvcGVydHkubmFtZSwgZGV2aWNlQW5kUGFja2FnZS5zZWxlY3RlZFBhY2thZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgY29uc3QgcHJvY2Vzc1ZhbHVlcyA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMuX2dldENvbmZpZ3VyYXRpb25Qcm9wZXJ0aWVzKClcclxuICAgICAgLmZpbHRlcihcclxuICAgICAgICBwcm9wZXJ0eSA9PlxyXG4gICAgICAgICAgcHJvcGVydHkudmlzaWJsZSAmJiBkZXZpY2VBbmRQcm9jZXNzVmFsdWVzLmhhcyhwcm9wZXJ0eS5uYW1lKSxcclxuICAgICAgKVxyXG4gICAgICAuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGV2aWNlQW5kUHJvY2VzcyA9IGRldmljZUFuZFByb2Nlc3NWYWx1ZXMuZ2V0KHByb3BlcnR5Lm5hbWUpO1xyXG4gICAgICAgIGNvbnN0IHByb2Nlc3NOYW1lID0gaWR4KGRldmljZUFuZFByb2Nlc3MsIF8gPT4gXy5zZWxlY3RlZFByb2Nlc3MubmFtZSk7XHJcbiAgICAgICAgaWYgKGRldmljZUFuZFByb2Nlc3MgIT0gbnVsbCAmJiBwcm9jZXNzTmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICBwcm9jZXNzVmFsdWVzLnNldChwcm9wZXJ0eS5uYW1lLCBwcm9jZXNzTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICBjb25zdCB2YWx1ZXMgPSB7fTtcclxuICAgIFtcclxuICAgICAgYm9vbGVhblZhbHVlcyxcclxuICAgICAgZW51bVZhbHVlcyxcclxuICAgICAgc3RyaW5nVmFsdWVzLFxyXG4gICAgICBzdHJpbmdBcnJheVZhbHVlcyxcclxuICAgICAgb2JqZWN0VmFsdWVzLFxyXG4gICAgICBudW1iZXJWYWx1ZXMsXHJcbiAgICAgIHByb2Nlc3NUYWJsZVZhbHVlcyxcclxuICAgICAganNvblZhbHVlcyxcclxuICAgICAgZGV2aWNlQW5kUGFja2FnZVZhbHVlcyxcclxuICAgICAgZGV2aWNlQW5kUHJvY2Vzc1ZhbHVlcyxcclxuICAgICAgc2VsZWN0U291cmNlc1ZhbHVlcyxcclxuICAgIF0uZm9yRWFjaChtYXAgPT4ge1xyXG4gICAgICBtYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICAgIHZhbHVlc1trZXldID0gdmFsdWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fZ2V0Q29uZmlndXJhdGlvblByb3BlcnRpZXMoKVxyXG4gICAgICAuZmlsdGVyKFxyXG4gICAgICAgIHByb3BlcnR5ID0+ICFwcm9wZXJ0eS52aXNpYmxlICYmICFhdG9tSW5wdXRWYWx1ZXMuaGFzKHByb3BlcnR5Lm5hbWUpLFxyXG4gICAgICApXHJcbiAgICAgIC5mb3JFYWNoKHByb3BlcnR5ID0+IHtcclxuICAgICAgICBjb25zdCB7bmFtZX0gPSBwcm9wZXJ0eTtcclxuICAgICAgICB2YWx1ZXNbbmFtZV0gPSBpZHgocHJvcGVydHksIF8gPT4gXy5kZWZhdWx0VmFsdWUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICBjb25zdCBkZWJ1Z2dlclNlcnZpY2UgPSBhd2FpdCBnZXREZWJ1Z2dlclNlcnZpY2UoKTtcclxuXHJcbiAgICBkZWJ1Z2dlclNlcnZpY2Uuc3RhcnRWc3BEZWJ1Z2dpbmcoe1xyXG4gICAgICB0YXJnZXRVcmksXHJcbiAgICAgIGRlYnVnTW9kZTogbGF1bmNoID8gJ2xhdW5jaCcgOiAnYXR0YWNoJyxcclxuICAgICAgYWRhcHRlclR5cGU6IHZzQWRhcHRlclR5cGUsXHJcbiAgICAgIGFkYXB0ZXJFeGVjdXRhYmxlLFxyXG4gICAgICBjb25maWc6IHZhbHVlcyxcclxuICAgICAgY3VzdG9tQ29udHJvbEJ1dHRvbnM6IFtdLFxyXG4gICAgICBwcm9jZXNzTmFtZTogZ2V0UHJvY2Vzc05hbWUodmFsdWVzKSxcclxuICAgICAgaXNSZXN0YXJ0YWJsZTogdHJ1ZSxcclxuICAgIH0pO1xyXG5cclxuICAgIHNlcmlhbGl6ZURlYnVnZ2VyQ29uZmlnKC4uLnRoaXMuX2dldFNlcmlhbGl6YXRpb25BcmdzKHRoaXMucHJvcHMpLCB7XHJcbiAgICAgIGF0b21JbnB1dFZhbHVlczogQXJyYXkuZnJvbShhdG9tSW5wdXRWYWx1ZXMpLFxyXG4gICAgICBib29sZWFuVmFsdWVzOiBBcnJheS5mcm9tKGJvb2xlYW5WYWx1ZXMpLFxyXG4gICAgICBlbnVtVmFsdWVzOiBBcnJheS5mcm9tKGVudW1WYWx1ZXMpLFxyXG4gICAgICBwYWNrYWdlVmFsdWVzOiBBcnJheS5mcm9tKHBhY2thZ2VWYWx1ZXMpLFxyXG4gICAgICBwcm9jZXNzVmFsdWVzOiBBcnJheS5mcm9tKHByb2Nlc3NWYWx1ZXMpLFxyXG4gICAgICBzZWxlY3RTb3VyY2VzVmFsdWVzOiBBcnJheS5mcm9tKHNlbGVjdFNvdXJjZXNWYWx1ZXMpLFxyXG4gICAgfSk7XHJcbiAgfTtcclxufVxyXG4iXX0=