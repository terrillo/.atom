"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeDebuggerConfig = serializeDebuggerConfig;
exports.deserializeDebuggerConfig = deserializeDebuggerConfig;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global localStorage */
// transientSettings will matinain configuration that should be persisted for the
// duration of the current Nunclide session (so preserved across the configuration dialog
// closing and re-opening), but not preserved if Nuclide is restarted.
const transientSettings = {};

function _getStorageKey(host, action, debuggerName) {
  return 'NUCLIDE_DEBUGGER_CONFIG_' + host + '_' + action + '_' + debuggerName;
}

function serializeDebuggerConfig(host, action, debuggerName, persistent, transient) {
  if (global.localStorage == null) {
    throw new Error('localStorage is not available in this runtime');
  }

  const key = _getStorageKey(host, action, debuggerName);

  localStorage.setItem(key, JSON.stringify(persistent));

  if (transient == null) {
    delete transientSettings[key];
  } else {
    transientSettings[key] = transient;
  }
}

function deserializeDebuggerConfig(host, action, debuggerName, callback) {
  if (global.localStorage == null) {
    throw new Error('localStorage is not available in this runtime');
  }

  const key = _getStorageKey(host, action, debuggerName);

  const val = localStorage.getItem(key);

  try {
    const persistedSettings = val != null ? JSON.parse(val) : {};
    callback(transientSettings[key] || {}, persistedSettings);
  } catch (err) {}
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1kZWJ1Z2dlci1jb21tb24vRGVidWdnZXJDb25maWdTZXJpYWxpemVyLmpzIl0sIm5hbWVzIjpbInRyYW5zaWVudFNldHRpbmdzIiwiX2dldFN0b3JhZ2VLZXkiLCJob3N0IiwiYWN0aW9uIiwiZGVidWdnZXJOYW1lIiwic2VyaWFsaXplRGVidWdnZXJDb25maWciLCJwZXJzaXN0ZW50IiwidHJhbnNpZW50IiwiZ2xvYmFsIiwibG9jYWxTdG9yYWdlIiwiRXJyb3IiLCJrZXkiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlc2VyaWFsaXplRGVidWdnZXJDb25maWciLCJjYWxsYmFjayIsInZhbCIsImdldEl0ZW0iLCJwZXJzaXN0ZWRTZXR0aW5ncyIsInBhcnNlIiwiZXJyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7QUFXQTtBQUlBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLGlCQUFpQixHQUFHLEVBQTFCOztBQUVBLFNBQVNDLGNBQVQsQ0FDRUMsSUFERixFQUVFQyxNQUZGLEVBR0VDLFlBSEYsRUFJRTtBQUNBLFNBQU8sNkJBQTZCRixJQUE3QixHQUFvQyxHQUFwQyxHQUEwQ0MsTUFBMUMsR0FBbUQsR0FBbkQsR0FBeURDLFlBQWhFO0FBQ0Q7O0FBRU0sU0FBU0MsdUJBQVQsQ0FDTEgsSUFESyxFQUVMQyxNQUZLLEVBR0xDLFlBSEssRUFJTEUsVUFKSyxFQUtMQyxTQUxLLEVBTUM7QUFDTixNQUFJQyxNQUFNLENBQUNDLFlBQVAsSUFBdUIsSUFBM0IsRUFBaUM7QUFDL0IsVUFBTSxJQUFJQyxLQUFKLENBQVUsK0NBQVYsQ0FBTjtBQUNEOztBQUNELFFBQU1DLEdBQUcsR0FBR1YsY0FBYyxDQUFDQyxJQUFELEVBQU9DLE1BQVAsRUFBZUMsWUFBZixDQUExQjs7QUFDQUssRUFBQUEsWUFBWSxDQUFDRyxPQUFiLENBQXFCRCxHQUFyQixFQUEwQkUsSUFBSSxDQUFDQyxTQUFMLENBQWVSLFVBQWYsQ0FBMUI7O0FBRUEsTUFBSUMsU0FBUyxJQUFJLElBQWpCLEVBQXVCO0FBQ3JCLFdBQU9QLGlCQUFpQixDQUFDVyxHQUFELENBQXhCO0FBQ0QsR0FGRCxNQUVPO0FBQ0xYLElBQUFBLGlCQUFpQixDQUFDVyxHQUFELENBQWpCLEdBQXlCSixTQUF6QjtBQUNEO0FBQ0Y7O0FBRU0sU0FBU1EseUJBQVQsQ0FDTGIsSUFESyxFQUVMQyxNQUZLLEVBR0xDLFlBSEssRUFJTFksUUFKSyxFQUtDO0FBQ04sTUFBSVIsTUFBTSxDQUFDQyxZQUFQLElBQXVCLElBQTNCLEVBQWlDO0FBQy9CLFVBQU0sSUFBSUMsS0FBSixDQUFVLCtDQUFWLENBQU47QUFDRDs7QUFDRCxRQUFNQyxHQUFHLEdBQUdWLGNBQWMsQ0FBQ0MsSUFBRCxFQUFPQyxNQUFQLEVBQWVDLFlBQWYsQ0FBMUI7O0FBQ0EsUUFBTWEsR0FBRyxHQUFHUixZQUFZLENBQUNTLE9BQWIsQ0FBcUJQLEdBQXJCLENBQVo7O0FBQ0EsTUFBSTtBQUNGLFVBQU1RLGlCQUFpQixHQUFHRixHQUFHLElBQUksSUFBUCxHQUFlSixJQUFJLENBQUNPLEtBQUwsQ0FBV0gsR0FBWCxDQUFmLEdBQXVDLEVBQWpFO0FBQ0FELElBQUFBLFFBQVEsQ0FBQ2hCLGlCQUFpQixDQUFDVyxHQUFELENBQWpCLElBQTBCLEVBQTNCLEVBQStCUSxpQkFBL0IsQ0FBUjtBQUNELEdBSEQsQ0FHRSxPQUFPRSxHQUFQLEVBQVksQ0FBRTtBQUNqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuLyogZ2xvYmFsIGxvY2FsU3RvcmFnZSAqL1xyXG5cclxuaW1wb3J0IHR5cGUge0RlYnVnZ2VyQ29uZmlnQWN0aW9ufSBmcm9tICcuL3R5cGVzJztcclxuXHJcbi8vIHRyYW5zaWVudFNldHRpbmdzIHdpbGwgbWF0aW5haW4gY29uZmlndXJhdGlvbiB0aGF0IHNob3VsZCBiZSBwZXJzaXN0ZWQgZm9yIHRoZVxyXG4vLyBkdXJhdGlvbiBvZiB0aGUgY3VycmVudCBOdW5jbGlkZSBzZXNzaW9uIChzbyBwcmVzZXJ2ZWQgYWNyb3NzIHRoZSBjb25maWd1cmF0aW9uIGRpYWxvZ1xyXG4vLyBjbG9zaW5nIGFuZCByZS1vcGVuaW5nKSwgYnV0IG5vdCBwcmVzZXJ2ZWQgaWYgTnVjbGlkZSBpcyByZXN0YXJ0ZWQuXHJcbmNvbnN0IHRyYW5zaWVudFNldHRpbmdzID0ge307XHJcblxyXG5mdW5jdGlvbiBfZ2V0U3RvcmFnZUtleShcclxuICBob3N0OiBzdHJpbmcsXHJcbiAgYWN0aW9uOiBEZWJ1Z2dlckNvbmZpZ0FjdGlvbixcclxuICBkZWJ1Z2dlck5hbWU6IHN0cmluZyxcclxuKSB7XHJcbiAgcmV0dXJuICdOVUNMSURFX0RFQlVHR0VSX0NPTkZJR18nICsgaG9zdCArICdfJyArIGFjdGlvbiArICdfJyArIGRlYnVnZ2VyTmFtZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZURlYnVnZ2VyQ29uZmlnKFxyXG4gIGhvc3Q6IHN0cmluZyxcclxuICBhY3Rpb246IERlYnVnZ2VyQ29uZmlnQWN0aW9uLFxyXG4gIGRlYnVnZ2VyTmFtZTogc3RyaW5nLFxyXG4gIHBlcnNpc3RlbnQ6IE9iamVjdCxcclxuICB0cmFuc2llbnQ/OiBPYmplY3QsXHJcbik6IHZvaWQge1xyXG4gIGlmIChnbG9iYWwubG9jYWxTdG9yYWdlID09IG51bGwpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignbG9jYWxTdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBydW50aW1lJyk7XHJcbiAgfVxyXG4gIGNvbnN0IGtleSA9IF9nZXRTdG9yYWdlS2V5KGhvc3QsIGFjdGlvbiwgZGVidWdnZXJOYW1lKTtcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHBlcnNpc3RlbnQpKTtcclxuXHJcbiAgaWYgKHRyYW5zaWVudCA9PSBudWxsKSB7XHJcbiAgICBkZWxldGUgdHJhbnNpZW50U2V0dGluZ3Nba2V5XTtcclxuICB9IGVsc2Uge1xyXG4gICAgdHJhbnNpZW50U2V0dGluZ3Nba2V5XSA9IHRyYW5zaWVudDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZURlYnVnZ2VyQ29uZmlnKFxyXG4gIGhvc3Q6IHN0cmluZyxcclxuICBhY3Rpb246IERlYnVnZ2VyQ29uZmlnQWN0aW9uLFxyXG4gIGRlYnVnZ2VyTmFtZTogc3RyaW5nLFxyXG4gIGNhbGxiYWNrOiAodHJhbnNpZW50U2V0dGluZ3M6IE9iamVjdCwgcGVyc2lzdGVudFNldHRpbmdzOiBPYmplY3QpID0+IHZvaWQsXHJcbik6IHZvaWQge1xyXG4gIGlmIChnbG9iYWwubG9jYWxTdG9yYWdlID09IG51bGwpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignbG9jYWxTdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBydW50aW1lJyk7XHJcbiAgfVxyXG4gIGNvbnN0IGtleSA9IF9nZXRTdG9yYWdlS2V5KGhvc3QsIGFjdGlvbiwgZGVidWdnZXJOYW1lKTtcclxuICBjb25zdCB2YWwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBwZXJzaXN0ZWRTZXR0aW5ncyA9IHZhbCAhPSBudWxsID8gKEpTT04ucGFyc2UodmFsKTogYW55KSA6IHt9O1xyXG4gICAgY2FsbGJhY2sodHJhbnNpZW50U2V0dGluZ3Nba2V5XSB8fCB7fSwgcGVyc2lzdGVkU2V0dGluZ3MpO1xyXG4gIH0gY2F0Y2ggKGVycikge31cclxufVxyXG4iXX0=