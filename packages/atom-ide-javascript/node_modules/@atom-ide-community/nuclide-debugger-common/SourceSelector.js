"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SourceSelector = void 0;

var _idx = _interopRequireDefault(require("idx"));

var _Dropdown = require("@atom-ide-community/nuclide-commons-ui/Dropdown");

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class SourceSelector extends React.Component {
  constructor(props) {
    super(props);
    this._disposables = void 0;

    this._sourceToOption = source => {
      const label = this._getLabelFromSource(source);

      return {
        value: source,
        label,
        selectedLabel: label
      };
    };

    this._disposables = new _UniversalDisposable.default();
    this.state = {
      selectableSources: [],
      selectedSource: null
    };
  }

  _getNewlySelectedSource(selectedSource, projectPaths, deserializedProjectPath) {
    let newSelectedSource = null;

    if (selectedSource != null) {
      newSelectedSource = projectPaths.includes(selectedSource) ? selectedSource : null;
    }

    if (newSelectedSource == null && projectPaths.length > 0) {
      const matches = projectPaths.filter(projectPath => projectPath.projectPath === deserializedProjectPath);
      newSelectedSource = matches.length > 0 ? matches[0] : projectPaths[0];
    }

    return newSelectedSource;
  }

  componentDidMount() {
    this._disposables.add((0, _utils.observeProjectPathsAllFromSourcePathsService)(projectPaths => {
      const newSelectedSource = this._getNewlySelectedSource( // TODO: (wbinnssmith) T30771435 this setState depends on current state
      // and should use an updater function rather than an object
      // eslint-disable-next-line react/no-access-state-in-setstate
      this.state.selectedSource, projectPaths, this.props.deserialize());

      this.setState({
        selectableSources: projectPaths,
        selectedSource: newSelectedSource
      });
    }));
  }

  componentWillUnmount() {
    this._disposables.dispose();
  }

  _getLabelFromSource(source) {
    const {
      projectPath,
      hostLabel
    } = source;

    const basename = _nuclideUri.default.basename(projectPath);

    return hostLabel + ' - ' + basename;
  }

  setState(partialState, callback) {
    const fullState = { ...this.state,
      ...partialState
    };
    super.setState(fullState, () => {
      this.props.onSelect((0, _idx.default)(fullState, _ => _.selectedSource.projectPath));
      callback && callback();
    });
  }

  render() {
    const {
      selectableSources,
      selectedSource
    } = this.state;
    const options = selectableSources.map(this._sourceToOption);

    if (options.length === 0) {
      return /*#__PURE__*/React.createElement("div", null, "No Projects Found. Please add a project to your file tree so the debugger can find sources.");
    }

    const potentiallyWrongSourceLabel = selectedSource != null && !selectedSource.suggested ? /*#__PURE__*/React.createElement("label", null, "Nuclide is not sure that you have selected a project which contains sources the debugger can use. Please double check that your selected source is correct.") : null;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_Dropdown.Dropdown, {
      options: options,
      onChange: option => this.setState({
        selectedSource: option
      }),
      placeholder: 'Select a source',
      value: selectedSource
    }), potentiallyWrongSourceLabel);
  }

}

exports.SourceSelector = SourceSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,