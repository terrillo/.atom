"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var DebugProtocol = _interopRequireWildcard(require("vscode-debugprotocol"));

var _VsAdapterSpawner = _interopRequireDefault(require("./VsAdapterSpawner"));

var _V8Protocol = _interopRequireDefault(require("./V8Protocol"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _idx = _interopRequireDefault(require("idx"));

var _assert = _interopRequireDefault(require("assert"));

var _analytics = require("@atom-ide-community/nuclide-commons/analytics");

var _uuid = _interopRequireDefault(require("uuid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function raiseAdapterExitedEvent(exitCode) {
  return {
    seq: 0,
    type: 'event',
    event: 'adapter-exited',
    body: {
      exitCode
    }
  };
}

/**
 * Use V8 JSON-RPC protocol to send & receive messages
 * (requests, responses & events) over `stdio` of adapter child processes.
 */
class VsDebugSession extends _V8Protocol.default {
  constructor(id, logger, adapterExecutable, adapterAnalyticsExtras, spawner, sendPreprocessors = [], receivePreprocessors = [], runInTerminalHandler, isReadOnly = false) {
    super(id, logger, sendPreprocessors, receivePreprocessors);
    this._readyForBreakpoints = void 0;
    this._disconnected = void 0;
    this._adapterProcessSubscription = void 0;
    this._startTime = void 0;
    this.capabilities = void 0;
    this._adapterExecutable = void 0;
    this._spawner = void 0;
    this._adapterAnalyticsExtras = void 0;
    this._adapterErrorOutput = void 0;
    this._onDidInitialize = void 0;
    this._onDidStop = void 0;
    this._onDidContinued = void 0;
    this._onDidTerminateDebugee = void 0;
    this._onDidExitDebugee = void 0;
    this._onDidExitAdapter = void 0;
    this._onDidThread = void 0;
    this._onDidOutput = void 0;
    this._onDidBreakpoint = void 0;
    this._onDidModule = void 0;
    this._onDidLoadSource = void 0;
    this._onDidCustom = void 0;
    this._onDidEvent = void 0;
    this._onDidEvaluate = void 0;
    this._runInTerminalHandler = void 0;
    this._isReadOnly = void 0;
    this._adapterExecutable = adapterExecutable;
    this._readyForBreakpoints = false;
    this._spawner = spawner == null ? new _VsAdapterSpawner.default() : spawner;
    this._isReadOnly = isReadOnly;
    this._adapterAnalyticsExtras = { ...adapterAnalyticsExtras,
      // $FlowFixMe flow doesn't consider uuid callable, but it is
      debuggerSessionId: (0, _uuid.default)()
    };
    this._adapterErrorOutput = '';
    this._onDidInitialize = new _rxjsCompatUmdMin.Subject();
    this._onDidStop = new _rxjsCompatUmdMin.Subject();
    this._onDidContinued = new _rxjsCompatUmdMin.Subject();
    this._onDidTerminateDebugee = new _rxjsCompatUmdMin.Subject();
    this._onDidExitDebugee = new _rxjsCompatUmdMin.Subject();
    this._onDidExitAdapter = new _rxjsCompatUmdMin.Subject();
    this._onDidThread = new _rxjsCompatUmdMin.Subject();
    this._onDidOutput = new _rxjsCompatUmdMin.Subject();
    this._onDidBreakpoint = new _rxjsCompatUmdMin.Subject();
    this._onDidModule = new _rxjsCompatUmdMin.Subject();
    this._onDidLoadSource = new _rxjsCompatUmdMin.Subject();
    this._onDidCustom = new _rxjsCompatUmdMin.Subject();
    this._onDidEvent = new _rxjsCompatUmdMin.Subject();
    this._onDidEvaluate = new _rxjsCompatUmdMin.Subject();
    this.capabilities = {};
    this._runInTerminalHandler = runInTerminalHandler || null;
  }

  observeInitializeEvents() {
    return this._onDidInitialize.asObservable();
  }

  observeStopEvents() {
    return this._onDidStop.asObservable();
  }

  observeContinuedEvents() {
    return this._onDidContinued.asObservable();
  }

  observeTerminateDebugeeEvents() {
    return this._onDidTerminateDebugee.asObservable();
  }

  observeExitedDebugeeEvents() {
    return this._onDidExitDebugee.asObservable();
  }

  observeAdapterExitedEvents() {
    return this._onDidExitAdapter.asObservable();
  }

  observeThreadEvents() {
    return this._onDidThread.asObservable();
  }

  observeOutputEvents() {
    return this._onDidOutput.asObservable();
  }

  observeBreakpointEvents() {
    return this._onDidBreakpoint.asObservable();
  }

  observeModuleEvents() {
    return this._onDidModule.asObservable();
  }

  observeSourceLoadedEvents() {
    return this._onDidLoadSource.asObservable();
  }

  observeCustomEvents() {
    return this._onDidCustom.asObservable();
  }

  observeEvaluations() {
    return this._onDidEvaluate.asObservable();
  }

  observeAllEvents() {
    return this._onDidEvent.asObservable();
  }

  _initServer() {
    if (this._adapterProcessSubscription != null) {
      return;
    }

    this._startServer();

    this._startTime = new Date().getTime();
  }

  custom(request, args) {
    return this.send(request, args);
  }

  send(command, args) {
    this._initServer();

    const operation = () => {
      // Babel Bug: `super` isn't working with `async`
      return super.send(command, args).then(response => {
        const sanitizedResponse = this._sanitizeResponse(response);

        (0, _analytics.track)('vs-debug-session:transaction', { ...this._adapterAnalyticsExtras,
          request: {
            command,
            arguments: args
          },
          response: sanitizedResponse
        });
        return response;
      }, errorResponse => {
        var _errorResponse$body, _errorResponse$body$e;

        let errorMessage = null;
        let showUser = false;
        const errorFormatString = ((_errorResponse$body = errorResponse.body) === null || _errorResponse$body === void 0 ? void 0 : (_errorResponse$body$e = _errorResponse$body.error) === null || _errorResponse$body$e === void 0 ? void 0 : _errorResponse$body$e.format) || '';

        if (errorFormatString !== '') {
          const errorObject = errorResponse.body.error; // Protocol response contained an ErrorResponse with details
          // about how the debug adapter wants us to handle the error.

          errorMessage = String(errorFormatString);
          showUser = Boolean(errorObject.showUser);
          const variables = errorObject.variables;

          if (variables != null) {
            for (const key of Object.keys(variables)) {
              const pattern = new RegExp('{' + key + '}', 'g');
              errorMessage = errorMessage.replace(pattern, variables[key]);
            }
          } // TODO: Allow the consumer of the session to register a global
          // error handler routine so we can still present errors even
          // when running outside of Atom.


          if (Boolean(showUser) && typeof atom !== 'undefined') {
            atom.notifications.addError(errorMessage);
          }
        } else if (errorResponse.message != null) {
          // Response message contained a user-facing string to display.
          errorMessage = errorResponse.message;
        } else {
          var _errorResponse$body2;

          // See if Response message contained a user-facing string to display.
          // The protocol expects message to be on result, not result.body
          // but some debug adapters are doing this incorrectly. Work with
          // them anyway...
          // $FlowIgnore
          errorMessage = (_errorResponse$body2 = errorResponse.body) === null || _errorResponse$body2 === void 0 ? void 0 : _errorResponse$body2.message;
        }

        (0, _analytics.track)('vs-debug-session:transaction', { ...this._adapterAnalyticsExtras,
          request: {
            command,
            arguments: args
          },
          response: errorResponse
        });

        if (errorMessage != null) {
          throw new Error(errorMessage);
        } // If the debug adapter didn't specify what error to
        // show the user, fallback to logging the request/response info.


        let formattedError = (0, _idx.default)(errorResponse, _ => _.body.error.format) || (0, _idx.default)(errorResponse, _ => _.message);

        if (formattedError === '{_stack}') {
          formattedError = JSON.stringify(errorResponse.body.error);
        } else if (formattedError == null) {
          formattedError = [`command: ${command}`, `args: ${JSON.stringify(args)}`, `response: ${JSON.stringify(errorResponse)}`, `adapterExecutable: , ${JSON.stringify(this._adapterExecutable)}`].join(', ');
        }

        throw new Error(formattedError);
      });
    };

    return (0, _analytics.trackTiming)(`vs-debug-session:${command}`, operation, this._adapterAnalyticsExtras);
  }

  _sanitizeResponse(response) {
    try {
      if (response.command === 'variables') {
        const varResponse = response;
        const sanResponse = { ...varResponse,
          body: { ...varResponse.body,
            variables: varResponse.body.variables.map(v => ({ ...v,
              value: '<elided>'
            }))
          }
        }; // $FlowFixMe flow isn't recognizing that ...varResponse is filling in needed members

        return sanResponse;
      }

      if (response.command === 'evaluate') {
        const evalResponse = response;
        const sanResponse = { ...evalResponse,
          body: { ...evalResponse.body,
            result: '<elided>'
          }
        }; // $FlowFixMe flow isn't recognizing that ...evalResponse is filling in needed members

        return sanResponse;
      }

      return response;
    } catch (e) {
      // Don't let a malformed response prevent the response from bubbling up
      // to the debugger
      return {
        type: 'response',
        seq: response.seq,
        request_seq: response.request_seq,
        success: false,
        command: response.command,
        error: 'Error sanitizing response.',
        message: e.message
      };
    }
  }

  onEvent(event) {
    if (event.body != null) {
      // $FlowFixMe `sessionId` isn't in the type def.
      event.body.sessionId = this.getId();
    } else {
      // $FlowFixMe `event.body` type def.
      event.body = {
        sessionId: this.getId()
      };
    }

    (0, _analytics.track)('vs-debug-session:transaction', { ...this._adapterAnalyticsExtras,
      event
    });

    this._onDidEvent.next(event);

    switch (event.event) {
      case 'initialized':
        this._readyForBreakpoints = true;

        this._onDidInitialize.next(event);

        break;

      case 'stopped':
        this._onDidStop.next(event);

        break;

      case 'continued':
        this._onDidContinued.next(event);

        break;

      case 'thread':
        this._onDidThread.next(event);

        break;

      case 'output':
        this._onDidOutput.next(event);

        break;

      case 'breakpoint':
        this._onDidBreakpoint.next(event);

        break;

      case 'terminated':
        this._onDidTerminateDebugee.next(event);

        break;

      case 'exited':
        this._onDidExitDebugee.next(event);

        break;

      case 'adapter-exited':
        this._onDidExitAdapter.next(event);

        break;

      case 'module':
        this._onDidModule.next(event);

        break;

      case 'loadedSource':
        this._onDidLoadSource.next(event);

        break;

      default:
        this._onDidCustom.next(event);

        this._logger.info('Custom event type:', event);

        break;
    }
  }

  getCapabilities() {
    return this.capabilities;
  }

  async initialize(args) {
    const response = await this.send('initialize', args);
    return this._readCapabilities(response);
  }

  _readCapabilities(response) {
    if (response) {
      this.capabilities = { ...this.capabilities,
        ...response.body
      };
    }

    return response;
  }

  async launch(args) {
    const response = await this.send('launch', args);
    return this._readCapabilities(response);
  }

  async attach(args) {
    const response = await this.send('attach', args);
    return this._readCapabilities(response);
  }

  next(args) {
    if (this._isReadOnly) {
      throw new Error('Read only target cannot step.');
    }

    this._fireFakeContinued(args.threadId);

    return this.send('next', args);
  }

  stepIn(args) {
    if (this._isReadOnly) {
      throw new Error('Read only target cannot step.');
    }

    this._fireFakeContinued(args.threadId);

    return this.send('stepIn', args);
  }

  stepOut(args) {
    if (this._isReadOnly) {
      throw new Error('Read only target cannot step.');
    }

    this._fireFakeContinued(args.threadId);

    return this.send('stepOut', args);
  }

  continue(args) {
    if (this._isReadOnly) {
      throw new Error('Read only target cannot continue.');
    }

    this._fireFakeContinued(args.threadId);

    return this.send('continue', args);
  }

  pause(args) {
    if (this._isReadOnly) {
      throw new Error('Read only target cannot pause.');
    }

    return this.send('pause', args);
  }

  setVariable(args) {
    if (this._isReadOnly) {
      throw new Error('Read only target cannot set variable.');
    }

    return this.send('setVariable', args).then(response => {
      this._onDidEvaluate.next();

      return response;
    });
  }

  restartFrame(args, threadId) {
    if (this._isReadOnly) {
      throw new Error('Read only target cannot restart frame.');
    }

    this._fireFakeContinued(threadId);

    return this.send('restartFrame', args);
  }

  completions(args) {
    return this.send('completions', args);
  }

  async disconnect(restart = false, force = false) {
    if (this._disconnected && force) {
      this._stopServer();

      return;
    }

    if (this._adapterProcessSubscription != null && !this._disconnected) {
      // point of no return: from now on don't report any errors
      this._disconnected = true;
      await _rxjsCompatUmdMin.Observable.fromPromise(this.send('disconnect', {
        restart
      })).timeout(5000).catch(err => {
        if (!(err instanceof _rxjsCompatUmdMin.TimeoutError)) {
          throw err;
        }

        return _rxjsCompatUmdMin.Observable.empty();
      }).toPromise();

      this._stopServer();
    }
  }

  setBreakpoints(args) {
    return this.send('setBreakpoints', args);
  }

  setFunctionBreakpoints(args) {
    return this.send('setFunctionBreakpoints', args);
  }

  setExceptionBreakpoints(args) {
    return this.send('setExceptionBreakpoints', args);
  }

  configurationDone() {
    return this.send('configurationDone', null);
  }

  stackTrace(args) {
    return this.send('stackTrace', args);
  }

  exceptionInfo(args) {
    return this.send('exceptionInfo', args);
  }

  info(args) {
    return this.send('info', args);
  }

  scopes(args) {
    return this.send('scopes', args);
  }

  variables(args) {
    return this.send('variables', args);
  }

  source(args) {
    return this.send('source', args);
  }

  threads() {
    return this.send('threads', null);
  }

  evaluate(args) {
    return this.send('evaluate', args).then(result => {
      if (args.context === 'repl') {
        this._onDidEvaluate.next();
      }

      return result;
    });
  }

  stepBack(args) {
    this._fireFakeContinued(args.threadId);

    return this.send('stepBack', args);
  }

  reverseContinue(args) {
    if (this._isReadOnly) {
      throw new Error('Read only target cannot reverse continue.');
    }

    this._fireFakeContinued(args.threadId);

    return this.send('reverseContinue', args);
  }

  nuclide_continueToLocation(args) {
    if (this._isReadOnly) {
      throw new Error('Read only target cannot run to location.');
    }

    return this.custom('nuclide_continueToLocation', args);
  }

  getLengthInSeconds() {
    return (new Date().getTime() - this._startTime) / 1000;
  }

  async dispatchRequest(request, response) {
    if (request.command === 'runInTerminal') {
      const runInTerminalHandler = this._runInTerminalHandler;

      if (runInTerminalHandler == null) {
        this._logger.error("'runInTerminal' isn't supported for this debug session", request);

        return;
      }

      try {
        await runInTerminalHandler(request.arguments);
      } catch (error) {
        response.success = false;
        response.message = error.message;
      }

      this.sendResponse(response);
    } else if (request.command === 'handshake') {
      this._logger.error('TODO: handshake', request);
    } else {
      response.success = false;
      response.message = `unknown request '${request.command}'`;
      this.sendResponse(response);
    }
  }

  _fireFakeContinued(threadId, allThreadsContinued = false) {
    const event = {
      type: 'event',
      event: 'continued',
      body: {
        threadId,
        // $FlowFixMe
        allThreadsContinued
      },
      seq: 0
    };

    this._onDidContinued.next(event);

    this._onDidEvent.next(event);
  }

  _startServer() {
    this._adapterProcessSubscription = this._spawner.spawnAdapter(this._adapterExecutable).refCount().subscribe(message => {
      if (message.kind === 'stdout') {
        this.handleData(new Buffer(message.data));
      } else if (message.kind === 'stderr') {
        const event = {
          type: 'event',
          event: 'output',
          body: {
            category: 'stderr',
            output: message.data
          },
          seq: 0
        };

        this._onDidOutput.next(event);

        this._onDidEvent.next(event);

        this._logger.error(`adapter stderr: ${message.data}`);

        this._adapterErrorOutput = this._adapterErrorOutput + message.data;
      } else {
        (0, _assert.default)(message.kind === 'exit');
        const exitCode = message.exitCode || 0;

        if (exitCode === 0) {
          this.onServerExit(message.exitCode || 0);
        } else {
          this.onServerError(new Error(`Debug adapter exited with code: ${exitCode}`));
        }
      }
    });
    this.setOutput(this._spawner.write.bind(this._spawner));
  }

  _stopServer() {
    this.onEvent(raiseAdapterExitedEvent(0));

    if (this._adapterProcessSubscription == null) {
      return;
    }

    this._disconnected = true;

    this._adapterProcessSubscription.unsubscribe();

    this._endHandlers();
  }

  _endHandlers() {
    this._onDidInitialize.complete();

    this._onDidStop.complete();

    this._onDidContinued.complete();

    this._onDidTerminateDebugee.complete();

    this._onDidExitDebugee.complete();

    this._onDidExitAdapter.complete();

    this._onDidThread.complete();

    this._onDidOutput.complete();

    this._onDidBreakpoint.complete();

    this._onDidModule.complete();

    this._onDidLoadSource.complete();

    this._onDidCustom.complete();

    this._onDidEvent.complete();
  }

  onServerError(error) {
    this._logger.error('Adapter error:', error);

    this._stopServer();
  }

  onServerExit(code) {
    if (this._adapterProcessSubscription != null) {
      this._adapterProcessSubscription.unsubscribe();

      this._adapterProcessSubscription = null;
    }

    if (!this._disconnected) {
      this._logger.error(`Debug adapter process has terminated unexpectedly ${code}`);
    }

    this.onEvent(raiseAdapterExitedEvent(code));
  }

  isReadyForBreakpoints() {
    return this._readyForBreakpoints;
  }

  isDisconnected() {
    return this._disconnected;
  }

  dispose() {
    if (this._adapterErrorOutput) {
      (0, _analytics.track)('vs-debug-session:transaction', { ...this._adapterAnalyticsExtras,
        response: this._adapterErrorOutput
      });
    }

    this.disconnect();
  }

}

exports.default = VsDebugSession;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,