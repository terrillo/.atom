/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
'use strict';
/* eslint nuclide-internal/no-commonjs: 0 */
// Taken from
// https://github.com/facebook/react-native/blob/d72c6fd/packager/react-packager/src/node-haste/DependencyGraph/docblock.js

const docblockRe = /^\s*(\/\*\*(.|\r?\n)*?\*\/)/;
const ltrimRe = /^\s*/;
/**
 * @param {String} contents
 * @return {String}
 */

function extract(contents) {
  const match = contents.match(docblockRe);

  if (match) {
    return match[0].replace(ltrimRe, '') || '';
  }

  return '';
}

const commentStartRe = /^\/\*\*/;
const commentEndRe = /\*\/$/;
const wsRe = /[\t ]+/g;
const stringStartRe = /(\r?\n|^) *\*/g;
const multilineRe = /(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *([^@\r\n\s][^@\r\n]+?) *\r?\n/g;
const propertyRe = /(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g;
/**
 * @param {String} contents
 * @return {Array}
 */

function parse(docblock_) {
  let docblock = docblock_.replace(commentStartRe, '').replace(commentEndRe, '').replace(wsRe, ' ').replace(stringStartRe, '$1'); // Normalize multi-line directives

  let prev = '';

  while (prev !== docblock) {
    prev = docblock;
    docblock = docblock.replace(multilineRe, '\n$1 $2\n');
  }

  docblock = docblock.trim();
  const result = [];
  let match;

  while (match = propertyRe.exec(docblock)) {
    result.push([match[1], match[2]]);
  }

  return result;
}
/**
 * Same as parse but returns an object of prop: value instead of array of paris
 * If a property appers more than once the last one will be returned
 *
 * @param {String} contents
 * @return {Object}
 */


function parseAsObject(docblock) {
  const pairs = parse(docblock);
  const result = {};

  for (let i = 0; i < pairs.length; i++) {
    result[pairs[i][0]] = pairs[i][1];
  }

  return result;
}

exports.extract = extract;
exports.parse = parse;
exports.parseAsObject = parseAsObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1ub2RlLXRyYW5zcGlsZXIvbGliL2RvY2Jsb2NrLmpzIl0sIm5hbWVzIjpbImRvY2Jsb2NrUmUiLCJsdHJpbVJlIiwiZXh0cmFjdCIsImNvbnRlbnRzIiwibWF0Y2giLCJyZXBsYWNlIiwiY29tbWVudFN0YXJ0UmUiLCJjb21tZW50RW5kUmUiLCJ3c1JlIiwic3RyaW5nU3RhcnRSZSIsIm11bHRpbGluZVJlIiwicHJvcGVydHlSZSIsInBhcnNlIiwiZG9jYmxvY2tfIiwiZG9jYmxvY2siLCJwcmV2IiwidHJpbSIsInJlc3VsdCIsImV4ZWMiLCJwdXNoIiwicGFyc2VBc09iamVjdCIsInBhaXJzIiwiaSIsImxlbmd0aCIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVdBO0FBRUE7QUFFQTtBQUNBOztBQUVBLE1BQU1BLFVBQVUsR0FBRyw2QkFBbkI7QUFDQSxNQUFNQyxPQUFPLEdBQUcsTUFBaEI7QUFFQTs7Ozs7QUFJQSxTQUFTQyxPQUFULENBQWlCQyxRQUFqQixFQUEyQjtBQUN6QixRQUFNQyxLQUFLLEdBQUdELFFBQVEsQ0FBQ0MsS0FBVCxDQUFlSixVQUFmLENBQWQ7O0FBQ0EsTUFBSUksS0FBSixFQUFXO0FBQ1QsV0FBT0EsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTQyxPQUFULENBQWlCSixPQUFqQixFQUEwQixFQUExQixLQUFpQyxFQUF4QztBQUNEOztBQUNELFNBQU8sRUFBUDtBQUNEOztBQUVELE1BQU1LLGNBQWMsR0FBRyxTQUF2QjtBQUNBLE1BQU1DLFlBQVksR0FBRyxPQUFyQjtBQUNBLE1BQU1DLElBQUksR0FBRyxTQUFiO0FBQ0EsTUFBTUMsYUFBYSxHQUFHLGdCQUF0QjtBQUNBLE1BQU1DLFdBQVcsR0FBRyxrRUFBcEI7QUFDQSxNQUFNQyxVQUFVLEdBQUcsa0NBQW5CO0FBRUE7Ozs7O0FBSUEsU0FBU0MsS0FBVCxDQUFlQyxTQUFmLEVBQTBCO0FBQ3hCLE1BQUlDLFFBQVEsR0FBR0QsU0FBUyxDQUNyQlIsT0FEWSxDQUNKQyxjQURJLEVBQ1ksRUFEWixFQUVaRCxPQUZZLENBRUpFLFlBRkksRUFFVSxFQUZWLEVBR1pGLE9BSFksQ0FHSkcsSUFISSxFQUdFLEdBSEYsRUFJWkgsT0FKWSxDQUlKSSxhQUpJLEVBSVcsSUFKWCxDQUFmLENBRHdCLENBT3hCOztBQUNBLE1BQUlNLElBQUksR0FBRyxFQUFYOztBQUNBLFNBQU9BLElBQUksS0FBS0QsUUFBaEIsRUFBMEI7QUFDeEJDLElBQUFBLElBQUksR0FBR0QsUUFBUDtBQUNBQSxJQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ1QsT0FBVCxDQUFpQkssV0FBakIsRUFBOEIsV0FBOUIsQ0FBWDtBQUNEOztBQUNESSxFQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0UsSUFBVCxFQUFYO0FBRUEsUUFBTUMsTUFBTSxHQUFHLEVBQWY7QUFDQSxNQUFJYixLQUFKOztBQUNBLFNBQVFBLEtBQUssR0FBR08sVUFBVSxDQUFDTyxJQUFYLENBQWdCSixRQUFoQixDQUFoQixFQUE0QztBQUMxQ0csSUFBQUEsTUFBTSxDQUFDRSxJQUFQLENBQVksQ0FBQ2YsS0FBSyxDQUFDLENBQUQsQ0FBTixFQUFXQSxLQUFLLENBQUMsQ0FBRCxDQUFoQixDQUFaO0FBQ0Q7O0FBRUQsU0FBT2EsTUFBUDtBQUNEO0FBRUQ7Ozs7Ozs7OztBQU9BLFNBQVNHLGFBQVQsQ0FBdUJOLFFBQXZCLEVBQWlDO0FBQy9CLFFBQU1PLEtBQUssR0FBR1QsS0FBSyxDQUFDRSxRQUFELENBQW5CO0FBQ0EsUUFBTUcsTUFBTSxHQUFHLEVBQWY7O0FBQ0EsT0FBSyxJQUFJSyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxLQUFLLENBQUNFLE1BQTFCLEVBQWtDRCxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDTCxJQUFBQSxNQUFNLENBQUNJLEtBQUssQ0FBQ0MsQ0FBRCxDQUFMLENBQVMsQ0FBVCxDQUFELENBQU4sR0FBc0JELEtBQUssQ0FBQ0MsQ0FBRCxDQUFMLENBQVMsQ0FBVCxDQUF0QjtBQUNEOztBQUNELFNBQU9MLE1BQVA7QUFDRDs7QUFFRE8sT0FBTyxDQUFDdEIsT0FBUixHQUFrQkEsT0FBbEI7QUFDQXNCLE9BQU8sQ0FBQ1osS0FBUixHQUFnQkEsS0FBaEI7QUFDQVksT0FBTyxDQUFDSixhQUFSLEdBQXdCQSxhQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQG5vZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vKiBlc2xpbnQgbnVjbGlkZS1pbnRlcm5hbC9uby1jb21tb25qczogMCAqL1xyXG5cclxuLy8gVGFrZW4gZnJvbVxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2Jsb2IvZDcyYzZmZC9wYWNrYWdlci9yZWFjdC1wYWNrYWdlci9zcmMvbm9kZS1oYXN0ZS9EZXBlbmRlbmN5R3JhcGgvZG9jYmxvY2suanNcclxuXHJcbmNvbnN0IGRvY2Jsb2NrUmUgPSAvXlxccyooXFwvXFwqXFwqKC58XFxyP1xcbikqP1xcKlxcLykvO1xyXG5jb25zdCBsdHJpbVJlID0gL15cXHMqLztcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHNcclxuICogQHJldHVybiB7U3RyaW5nfVxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdChjb250ZW50cykge1xyXG4gIGNvbnN0IG1hdGNoID0gY29udGVudHMubWF0Y2goZG9jYmxvY2tSZSk7XHJcbiAgaWYgKG1hdGNoKSB7XHJcbiAgICByZXR1cm4gbWF0Y2hbMF0ucmVwbGFjZShsdHJpbVJlLCAnJykgfHwgJyc7XHJcbiAgfVxyXG4gIHJldHVybiAnJztcclxufVxyXG5cclxuY29uc3QgY29tbWVudFN0YXJ0UmUgPSAvXlxcL1xcKlxcKi87XHJcbmNvbnN0IGNvbW1lbnRFbmRSZSA9IC9cXCpcXC8kLztcclxuY29uc3Qgd3NSZSA9IC9bXFx0IF0rL2c7XHJcbmNvbnN0IHN0cmluZ1N0YXJ0UmUgPSAvKFxccj9cXG58XikgKlxcKi9nO1xyXG5jb25zdCBtdWx0aWxpbmVSZSA9IC8oPzpefFxccj9cXG4pICooQFteXFxyXFxuXSo/KSAqXFxyP1xcbiAqKFteQFxcclxcblxcc11bXkBcXHJcXG5dKz8pICpcXHI/XFxuL2c7XHJcbmNvbnN0IHByb3BlcnR5UmUgPSAvKD86XnxcXHI/XFxuKSAqQChcXFMrKSAqKFteXFxyXFxuXSopL2c7XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzXHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2UoZG9jYmxvY2tfKSB7XHJcbiAgbGV0IGRvY2Jsb2NrID0gZG9jYmxvY2tfXHJcbiAgICAucmVwbGFjZShjb21tZW50U3RhcnRSZSwgJycpXHJcbiAgICAucmVwbGFjZShjb21tZW50RW5kUmUsICcnKVxyXG4gICAgLnJlcGxhY2Uod3NSZSwgJyAnKVxyXG4gICAgLnJlcGxhY2Uoc3RyaW5nU3RhcnRSZSwgJyQxJyk7XHJcblxyXG4gIC8vIE5vcm1hbGl6ZSBtdWx0aS1saW5lIGRpcmVjdGl2ZXNcclxuICBsZXQgcHJldiA9ICcnO1xyXG4gIHdoaWxlIChwcmV2ICE9PSBkb2NibG9jaykge1xyXG4gICAgcHJldiA9IGRvY2Jsb2NrO1xyXG4gICAgZG9jYmxvY2sgPSBkb2NibG9jay5yZXBsYWNlKG11bHRpbGluZVJlLCAnXFxuJDEgJDJcXG4nKTtcclxuICB9XHJcbiAgZG9jYmxvY2sgPSBkb2NibG9jay50cmltKCk7XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gIGxldCBtYXRjaDtcclxuICB3aGlsZSAoKG1hdGNoID0gcHJvcGVydHlSZS5leGVjKGRvY2Jsb2NrKSkpIHtcclxuICAgIHJlc3VsdC5wdXNoKFttYXRjaFsxXSwgbWF0Y2hbMl1dKTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTYW1lIGFzIHBhcnNlIGJ1dCByZXR1cm5zIGFuIG9iamVjdCBvZiBwcm9wOiB2YWx1ZSBpbnN0ZWFkIG9mIGFycmF5IG9mIHBhcmlzXHJcbiAqIElmIGEgcHJvcGVydHkgYXBwZXJzIG1vcmUgdGhhbiBvbmNlIHRoZSBsYXN0IG9uZSB3aWxsIGJlIHJldHVybmVkXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb250ZW50c1xyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZUFzT2JqZWN0KGRvY2Jsb2NrKSB7XHJcbiAgY29uc3QgcGFpcnMgPSBwYXJzZShkb2NibG9jayk7XHJcbiAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xyXG4gICAgcmVzdWx0W3BhaXJzW2ldWzBdXSA9IHBhaXJzW2ldWzFdO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnRzLmV4dHJhY3QgPSBleHRyYWN0O1xyXG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XHJcbmV4cG9ydHMucGFyc2VBc09iamVjdCA9IHBhcnNlQXNPYmplY3Q7XHJcbiJdfQ==