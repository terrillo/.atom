/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
'use strict';
/* eslint nuclide-internal/no-commonjs: 0 */

/* eslint-disable no-console */

module.exports = context => {
  const t = context.types;
  const template = context.template;
  const buildIfThrow = template(`
    if (!CONDITION) {
      throw new Error(MESSAGE);
    }
  `);

  function replaceInvariant(path) {
    const node = path.node;
    t.assertCallExpression(node);
    t.assertIdentifier(node.callee, {
      name: 'invariant'
    });

    if (node.arguments[0] == null) {
      throw path.buildCodeFrameError('`invariant()` must at least one argument.');
    }

    const stmtParent = path.getStatementParent();

    if (stmtParent.type !== 'ExpressionStatement') {
      throw path.buildCodeFrameError('`invariant()` must be used as an expression statement.');
    }

    stmtParent.replaceWith(buildIfThrow({
      CONDITION: node.arguments[0],
      MESSAGE: node.arguments[1] || t.stringLiteral('Invariant violation: ' + JSON.stringify(path.get('arguments.0').getSource()))
    }));
  }

  return {
    visitor: {
      Program: {
        exit(path, state) {
          const binding = path.scope.bindings.invariant; // Only import bindings are transformed

          if (binding == null || binding.kind !== 'module') {
            return;
          }

          let removeBinding = true;

          for (const refPath of binding.referencePaths) {
            if (refPath.parentKey !== 'callee' || refPath.parent.type !== 'CallExpression') {
              removeBinding = false;
              continue;
            }

            replaceInvariant(refPath.parentPath);
          }

          if (removeBinding && t.isImportDeclaration(binding.path.parent)) {
            // import invariant from '';
            if (binding.path.parent.specifiers.length === 1) {
              binding.path.parentPath.remove(); // import invariant, {deepEqual} from '';
            } else {
              binding.path.remove();
            }
          }
        }

      }
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1ub2RlLXRyYW5zcGlsZXIvbGliL2lubGluZS1pbnZhcmlhbnQtdHIuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNvbnRleHQiLCJ0IiwidHlwZXMiLCJ0ZW1wbGF0ZSIsImJ1aWxkSWZUaHJvdyIsInJlcGxhY2VJbnZhcmlhbnQiLCJwYXRoIiwibm9kZSIsImFzc2VydENhbGxFeHByZXNzaW9uIiwiYXNzZXJ0SWRlbnRpZmllciIsImNhbGxlZSIsIm5hbWUiLCJhcmd1bWVudHMiLCJidWlsZENvZGVGcmFtZUVycm9yIiwic3RtdFBhcmVudCIsImdldFN0YXRlbWVudFBhcmVudCIsInR5cGUiLCJyZXBsYWNlV2l0aCIsIkNPTkRJVElPTiIsIk1FU1NBR0UiLCJzdHJpbmdMaXRlcmFsIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldCIsImdldFNvdXJjZSIsInZpc2l0b3IiLCJQcm9ncmFtIiwiZXhpdCIsInN0YXRlIiwiYmluZGluZyIsInNjb3BlIiwiYmluZGluZ3MiLCJpbnZhcmlhbnQiLCJraW5kIiwicmVtb3ZlQmluZGluZyIsInJlZlBhdGgiLCJyZWZlcmVuY2VQYXRocyIsInBhcmVudEtleSIsInBhcmVudCIsInBhcmVudFBhdGgiLCJpc0ltcG9ydERlY2xhcmF0aW9uIiwic3BlY2lmaWVycyIsImxlbmd0aCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBV0E7QUFFQTs7QUFFQTs7QUFFQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxPQUFPLElBQUk7QUFDMUIsUUFBTUMsQ0FBQyxHQUFHRCxPQUFPLENBQUNFLEtBQWxCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHSCxPQUFPLENBQUNHLFFBQXpCO0FBRUEsUUFBTUMsWUFBWSxHQUFHRCxRQUFRLENBQUU7Ozs7R0FBRixDQUE3Qjs7QUFNQSxXQUFTRSxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0M7QUFDOUIsVUFBTUMsSUFBSSxHQUFHRCxJQUFJLENBQUNDLElBQWxCO0FBRUFOLElBQUFBLENBQUMsQ0FBQ08sb0JBQUYsQ0FBdUJELElBQXZCO0FBQ0FOLElBQUFBLENBQUMsQ0FBQ1EsZ0JBQUYsQ0FBbUJGLElBQUksQ0FBQ0csTUFBeEIsRUFBZ0M7QUFBQ0MsTUFBQUEsSUFBSSxFQUFFO0FBQVAsS0FBaEM7O0FBRUEsUUFBSUosSUFBSSxDQUFDSyxTQUFMLENBQWUsQ0FBZixLQUFxQixJQUF6QixFQUErQjtBQUM3QixZQUFNTixJQUFJLENBQUNPLG1CQUFMLENBQ0osMkNBREksQ0FBTjtBQUdEOztBQUVELFVBQU1DLFVBQVUsR0FBR1IsSUFBSSxDQUFDUyxrQkFBTCxFQUFuQjs7QUFFQSxRQUFJRCxVQUFVLENBQUNFLElBQVgsS0FBb0IscUJBQXhCLEVBQStDO0FBQzdDLFlBQU1WLElBQUksQ0FBQ08sbUJBQUwsQ0FDSix3REFESSxDQUFOO0FBR0Q7O0FBRURDLElBQUFBLFVBQVUsQ0FBQ0csV0FBWCxDQUNFYixZQUFZLENBQUM7QUFDWGMsTUFBQUEsU0FBUyxFQUFFWCxJQUFJLENBQUNLLFNBQUwsQ0FBZSxDQUFmLENBREE7QUFFWE8sTUFBQUEsT0FBTyxFQUNMWixJQUFJLENBQUNLLFNBQUwsQ0FBZSxDQUFmLEtBQ0FYLENBQUMsQ0FBQ21CLGFBQUYsQ0FDRSwwQkFDRUMsSUFBSSxDQUFDQyxTQUFMLENBQWVoQixJQUFJLENBQUNpQixHQUFMLENBQVMsYUFBVCxFQUF3QkMsU0FBeEIsRUFBZixDQUZKO0FBSlMsS0FBRCxDQURkO0FBV0Q7O0FBRUQsU0FBTztBQUNMQyxJQUFBQSxPQUFPLEVBQUU7QUFDUEMsTUFBQUEsT0FBTyxFQUFFO0FBQ1BDLFFBQUFBLElBQUksQ0FBQ3JCLElBQUQsRUFBT3NCLEtBQVAsRUFBYztBQUNoQixnQkFBTUMsT0FBTyxHQUFHdkIsSUFBSSxDQUFDd0IsS0FBTCxDQUFXQyxRQUFYLENBQW9CQyxTQUFwQyxDQURnQixDQUVoQjs7QUFDQSxjQUFJSCxPQUFPLElBQUksSUFBWCxJQUFtQkEsT0FBTyxDQUFDSSxJQUFSLEtBQWlCLFFBQXhDLEVBQWtEO0FBQ2hEO0FBQ0Q7O0FBQ0QsY0FBSUMsYUFBYSxHQUFHLElBQXBCOztBQUNBLGVBQUssTUFBTUMsT0FBWCxJQUFzQk4sT0FBTyxDQUFDTyxjQUE5QixFQUE4QztBQUM1QyxnQkFDRUQsT0FBTyxDQUFDRSxTQUFSLEtBQXNCLFFBQXRCLElBQ0FGLE9BQU8sQ0FBQ0csTUFBUixDQUFldEIsSUFBZixLQUF3QixnQkFGMUIsRUFHRTtBQUNBa0IsY0FBQUEsYUFBYSxHQUFHLEtBQWhCO0FBQ0E7QUFDRDs7QUFDRDdCLFlBQUFBLGdCQUFnQixDQUFDOEIsT0FBTyxDQUFDSSxVQUFULENBQWhCO0FBQ0Q7O0FBQ0QsY0FBSUwsYUFBYSxJQUFJakMsQ0FBQyxDQUFDdUMsbUJBQUYsQ0FBc0JYLE9BQU8sQ0FBQ3ZCLElBQVIsQ0FBYWdDLE1BQW5DLENBQXJCLEVBQWlFO0FBQy9EO0FBQ0EsZ0JBQUlULE9BQU8sQ0FBQ3ZCLElBQVIsQ0FBYWdDLE1BQWIsQ0FBb0JHLFVBQXBCLENBQStCQyxNQUEvQixLQUEwQyxDQUE5QyxFQUFpRDtBQUMvQ2IsY0FBQUEsT0FBTyxDQUFDdkIsSUFBUixDQUFhaUMsVUFBYixDQUF3QkksTUFBeEIsR0FEK0MsQ0FFL0M7QUFDRCxhQUhELE1BR087QUFDTGQsY0FBQUEsT0FBTyxDQUFDdkIsSUFBUixDQUFhcUMsTUFBYjtBQUNEO0FBQ0Y7QUFDRjs7QUEzQk07QUFERjtBQURKLEdBQVA7QUFpQ0QsQ0E1RUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBub2Zsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyogZXNsaW50IG51Y2xpZGUtaW50ZXJuYWwvbm8tY29tbW9uanM6IDAgKi9cclxuXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gY29udGV4dCA9PiB7XHJcbiAgY29uc3QgdCA9IGNvbnRleHQudHlwZXM7XHJcbiAgY29uc3QgdGVtcGxhdGUgPSBjb250ZXh0LnRlbXBsYXRlO1xyXG5cclxuICBjb25zdCBidWlsZElmVGhyb3cgPSB0ZW1wbGF0ZShgXHJcbiAgICBpZiAoIUNPTkRJVElPTikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTUVTU0FHRSk7XHJcbiAgICB9XHJcbiAgYCk7XHJcblxyXG4gIGZ1bmN0aW9uIHJlcGxhY2VJbnZhcmlhbnQocGF0aCkge1xyXG4gICAgY29uc3Qgbm9kZSA9IHBhdGgubm9kZTtcclxuXHJcbiAgICB0LmFzc2VydENhbGxFeHByZXNzaW9uKG5vZGUpO1xyXG4gICAgdC5hc3NlcnRJZGVudGlmaWVyKG5vZGUuY2FsbGVlLCB7bmFtZTogJ2ludmFyaWFudCd9KTtcclxuXHJcbiAgICBpZiAobm9kZS5hcmd1bWVudHNbMF0gPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBwYXRoLmJ1aWxkQ29kZUZyYW1lRXJyb3IoXHJcbiAgICAgICAgJ2BpbnZhcmlhbnQoKWAgbXVzdCBhdCBsZWFzdCBvbmUgYXJndW1lbnQuJyxcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdG10UGFyZW50ID0gcGF0aC5nZXRTdGF0ZW1lbnRQYXJlbnQoKTtcclxuXHJcbiAgICBpZiAoc3RtdFBhcmVudC50eXBlICE9PSAnRXhwcmVzc2lvblN0YXRlbWVudCcpIHtcclxuICAgICAgdGhyb3cgcGF0aC5idWlsZENvZGVGcmFtZUVycm9yKFxyXG4gICAgICAgICdgaW52YXJpYW50KClgIG11c3QgYmUgdXNlZCBhcyBhbiBleHByZXNzaW9uIHN0YXRlbWVudC4nLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHN0bXRQYXJlbnQucmVwbGFjZVdpdGgoXHJcbiAgICAgIGJ1aWxkSWZUaHJvdyh7XHJcbiAgICAgICAgQ09ORElUSU9OOiBub2RlLmFyZ3VtZW50c1swXSxcclxuICAgICAgICBNRVNTQUdFOlxyXG4gICAgICAgICAgbm9kZS5hcmd1bWVudHNbMV0gfHxcclxuICAgICAgICAgIHQuc3RyaW5nTGl0ZXJhbChcclxuICAgICAgICAgICAgJ0ludmFyaWFudCB2aW9sYXRpb246ICcgK1xyXG4gICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHBhdGguZ2V0KCdhcmd1bWVudHMuMCcpLmdldFNvdXJjZSgpKSxcclxuICAgICAgICAgICksXHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB2aXNpdG9yOiB7XHJcbiAgICAgIFByb2dyYW06IHtcclxuICAgICAgICBleGl0KHBhdGgsIHN0YXRlKSB7XHJcbiAgICAgICAgICBjb25zdCBiaW5kaW5nID0gcGF0aC5zY29wZS5iaW5kaW5ncy5pbnZhcmlhbnQ7XHJcbiAgICAgICAgICAvLyBPbmx5IGltcG9ydCBiaW5kaW5ncyBhcmUgdHJhbnNmb3JtZWRcclxuICAgICAgICAgIGlmIChiaW5kaW5nID09IG51bGwgfHwgYmluZGluZy5raW5kICE9PSAnbW9kdWxlJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBsZXQgcmVtb3ZlQmluZGluZyA9IHRydWU7XHJcbiAgICAgICAgICBmb3IgKGNvbnN0IHJlZlBhdGggb2YgYmluZGluZy5yZWZlcmVuY2VQYXRocykge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgcmVmUGF0aC5wYXJlbnRLZXkgIT09ICdjYWxsZWUnIHx8XHJcbiAgICAgICAgICAgICAgcmVmUGF0aC5wYXJlbnQudHlwZSAhPT0gJ0NhbGxFeHByZXNzaW9uJ1xyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICByZW1vdmVCaW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVwbGFjZUludmFyaWFudChyZWZQYXRoLnBhcmVudFBhdGgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHJlbW92ZUJpbmRpbmcgJiYgdC5pc0ltcG9ydERlY2xhcmF0aW9uKGJpbmRpbmcucGF0aC5wYXJlbnQpKSB7XHJcbiAgICAgICAgICAgIC8vIGltcG9ydCBpbnZhcmlhbnQgZnJvbSAnJztcclxuICAgICAgICAgICAgaWYgKGJpbmRpbmcucGF0aC5wYXJlbnQuc3BlY2lmaWVycy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICBiaW5kaW5nLnBhdGgucGFyZW50UGF0aC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAvLyBpbXBvcnQgaW52YXJpYW50LCB7ZGVlcEVxdWFsfSBmcm9tICcnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGJpbmRpbmcucGF0aC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH07XHJcbn07XHJcbiJdfQ==