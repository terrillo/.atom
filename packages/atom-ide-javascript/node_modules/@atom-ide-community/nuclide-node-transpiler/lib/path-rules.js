/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
'use strict';
/* eslint nuclide-internal/no-commonjs: 0 */

const path = require('path');

const basedir = path.join(__dirname, '../../..');
const ignorePatterns = ['**/node_modules/**', '**/VendorLib/**']; // ^--v These need to be kept in sync.

const ignoreRe = new RegExp(String.raw`/(node_modules|VendorLib)/`);
module.exports = {
  /**
   * @param ?string directory
   *        An optional [absolute] directory to list files from.
   */
  getIncludedFiles(directory) {
    const cwd = directory || basedir;

    const glob = require('glob'); // Do not use `basedir + '**/*.js'`, otherwise we risk ignoring ourselves
    // if a parent directory matches an ignore pattern.


    const files = glob.sync('**/*.js', {
      cwd,
      ignore: ignorePatterns
    }).map(x => path.join(cwd, x));
    return files;
  },

  isIncluded(filename) {
    const [, name] = filename.split(basedir);

    if (name == null || !name.startsWith(path.sep)) {
      // This file falls outside of the Nuclide directory, or
      // it's a directory that has the same prefix as the Nuclide directory.
      return false;
    }

    return !ignoreRe.test(name);
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1ub2RlLXRyYW5zcGlsZXIvbGliL3BhdGgtcnVsZXMuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJiYXNlZGlyIiwiam9pbiIsIl9fZGlybmFtZSIsImlnbm9yZVBhdHRlcm5zIiwiaWdub3JlUmUiLCJSZWdFeHAiLCJTdHJpbmciLCJyYXciLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0SW5jbHVkZWRGaWxlcyIsImRpcmVjdG9yeSIsImN3ZCIsImdsb2IiLCJmaWxlcyIsInN5bmMiLCJpZ25vcmUiLCJtYXAiLCJ4IiwiaXNJbmNsdWRlZCIsImZpbGVuYW1lIiwibmFtZSIsInNwbGl0Iiwic3RhcnRzV2l0aCIsInNlcCIsInRlc3QiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVdBO0FBRUE7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFFQSxNQUFNQyxPQUFPLEdBQUdGLElBQUksQ0FBQ0csSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFVBQXJCLENBQWhCO0FBRUEsTUFBTUMsY0FBYyxHQUFHLENBQUMsb0JBQUQsRUFBdUIsaUJBQXZCLENBQXZCLEMsQ0FDQTs7QUFDQSxNQUFNQyxRQUFRLEdBQUcsSUFBSUMsTUFBSixDQUFXQyxNQUFNLENBQUNDLEdBQUksNEJBQXRCLENBQWpCO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmOzs7O0FBSUFDLEVBQUFBLGdCQUFnQixDQUFDQyxTQUFELEVBQVk7QUFDMUIsVUFBTUMsR0FBRyxHQUFHRCxTQUFTLElBQUlYLE9BQXpCOztBQUNBLFVBQU1hLElBQUksR0FBR2QsT0FBTyxDQUFDLE1BQUQsQ0FBcEIsQ0FGMEIsQ0FHMUI7QUFDQTs7O0FBQ0EsVUFBTWUsS0FBSyxHQUFHRCxJQUFJLENBQ2ZFLElBRFcsQ0FDTixTQURNLEVBQ0s7QUFDZkgsTUFBQUEsR0FEZTtBQUVmSSxNQUFBQSxNQUFNLEVBQUViO0FBRk8sS0FETCxFQUtYYyxHQUxXLENBS1BDLENBQUMsSUFBSXBCLElBQUksQ0FBQ0csSUFBTCxDQUFVVyxHQUFWLEVBQWVNLENBQWYsQ0FMRSxDQUFkO0FBTUEsV0FBT0osS0FBUDtBQUNELEdBakJjOztBQWtCZkssRUFBQUEsVUFBVSxDQUFDQyxRQUFELEVBQVc7QUFDbkIsVUFBTSxHQUFHQyxJQUFILElBQVdELFFBQVEsQ0FBQ0UsS0FBVCxDQUFldEIsT0FBZixDQUFqQjs7QUFDQSxRQUFJcUIsSUFBSSxJQUFJLElBQVIsSUFBZ0IsQ0FBQ0EsSUFBSSxDQUFDRSxVQUFMLENBQWdCekIsSUFBSSxDQUFDMEIsR0FBckIsQ0FBckIsRUFBZ0Q7QUFDOUM7QUFDQTtBQUNBLGFBQU8sS0FBUDtBQUNEOztBQUNELFdBQU8sQ0FBQ3BCLFFBQVEsQ0FBQ3FCLElBQVQsQ0FBY0osSUFBZCxDQUFSO0FBQ0Q7O0FBMUJjLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAbm9mbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qIGVzbGludCBudWNsaWRlLWludGVybmFsL25vLWNvbW1vbmpzOiAwICovXHJcblxyXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5cclxuY29uc3QgYmFzZWRpciA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi8uLicpO1xyXG5cclxuY29uc3QgaWdub3JlUGF0dGVybnMgPSBbJyoqL25vZGVfbW9kdWxlcy8qKicsICcqKi9WZW5kb3JMaWIvKionXTtcclxuLy8gXi0tdiBUaGVzZSBuZWVkIHRvIGJlIGtlcHQgaW4gc3luYy5cclxuY29uc3QgaWdub3JlUmUgPSBuZXcgUmVnRXhwKFN0cmluZy5yYXdgLyhub2RlX21vZHVsZXN8VmVuZG9yTGliKS9gKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSA/c3RyaW5nIGRpcmVjdG9yeVxyXG4gICAqICAgICAgICBBbiBvcHRpb25hbCBbYWJzb2x1dGVdIGRpcmVjdG9yeSB0byBsaXN0IGZpbGVzIGZyb20uXHJcbiAgICovXHJcbiAgZ2V0SW5jbHVkZWRGaWxlcyhkaXJlY3RvcnkpIHtcclxuICAgIGNvbnN0IGN3ZCA9IGRpcmVjdG9yeSB8fCBiYXNlZGlyO1xyXG4gICAgY29uc3QgZ2xvYiA9IHJlcXVpcmUoJ2dsb2InKTtcclxuICAgIC8vIERvIG5vdCB1c2UgYGJhc2VkaXIgKyAnKiovKi5qcydgLCBvdGhlcndpc2Ugd2UgcmlzayBpZ25vcmluZyBvdXJzZWx2ZXNcclxuICAgIC8vIGlmIGEgcGFyZW50IGRpcmVjdG9yeSBtYXRjaGVzIGFuIGlnbm9yZSBwYXR0ZXJuLlxyXG4gICAgY29uc3QgZmlsZXMgPSBnbG9iXHJcbiAgICAgIC5zeW5jKCcqKi8qLmpzJywge1xyXG4gICAgICAgIGN3ZCxcclxuICAgICAgICBpZ25vcmU6IGlnbm9yZVBhdHRlcm5zLFxyXG4gICAgICB9KVxyXG4gICAgICAubWFwKHggPT4gcGF0aC5qb2luKGN3ZCwgeCkpO1xyXG4gICAgcmV0dXJuIGZpbGVzO1xyXG4gIH0sXHJcbiAgaXNJbmNsdWRlZChmaWxlbmFtZSkge1xyXG4gICAgY29uc3QgWywgbmFtZV0gPSBmaWxlbmFtZS5zcGxpdChiYXNlZGlyKTtcclxuICAgIGlmIChuYW1lID09IG51bGwgfHwgIW5hbWUuc3RhcnRzV2l0aChwYXRoLnNlcCkpIHtcclxuICAgICAgLy8gVGhpcyBmaWxlIGZhbGxzIG91dHNpZGUgb2YgdGhlIE51Y2xpZGUgZGlyZWN0b3J5LCBvclxyXG4gICAgICAvLyBpdCdzIGEgZGlyZWN0b3J5IHRoYXQgaGFzIHRoZSBzYW1lIHByZWZpeCBhcyB0aGUgTnVjbGlkZSBkaXJlY3RvcnkuXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiAhaWdub3JlUmUudGVzdChuYW1lKTtcclxuICB9LFxyXG59O1xyXG4iXX0=