/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
'use strict';
/* eslint nuclide-internal/no-commonjs: 0 */

/**
 * This file installs the logic that modifies Node's built in require()
 * function to transpile .js files that have the  pragma.
 */

const Module = require('module');

const fs = require('fs');

const builtinJsExt = Module._extensions['.js'];

const NodeTranspiler = require('./NodeTranspiler');

const nodeTranspiler = new NodeTranspiler();

const pathRules = require('./path-rules');

let transpiling = null;

function transpiler_require_hook(_module, filename) {
  let moduleExports;

  if (pathRules.isIncluded(filename)) {
    // Keep src as a buffer so calculating its digest with crypto is fast.
    const src = fs.readFileSync(filename);
    let output;

    if (NodeTranspiler.shouldCompile(src)) {
      if (transpiling != null) {
        // This means that the transpiler tried to transpile itself.
        throw new Error(`Circular transpile from "${transpiling}" to "${filename}"`);
      }

      try {
        transpiling = filename;
        output = nodeTranspiler.transformWithCache(src, filename);
      } catch (err) {
        throw err;
      } finally {
        transpiling = null;
      }
    } else {
      output = src.toString();
    }

    moduleExports = _module._compile(output, filename);
  } else {
    moduleExports = builtinJsExt(_module, filename);
  }

  return moduleExports;
}
/**
 * Atom sets `require.extensions['.js']` as not writable (maybe to prevent
 * sloppy code from attaching a require hook that doesn't filter by path?). To
 * workaround that, we create a new `Module._extensions` object instead, with
 * our custom hook. Keeping the iteration order of this object is really
 * important because it determines the file extension lookup priority.
 */


Module._extensions = Object.keys(Module._extensions).reduce((acc, ext) => {
  const desc = Object.getOwnPropertyDescriptor(Module._extensions, ext);

  if (ext === '.js') {
    desc.value = transpiler_require_hook;
  }

  Object.defineProperty(acc, ext, desc);
  return acc;
}, {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1ub2RlLXRyYW5zcGlsZXIvbGliL3JlcXVpcmUtaG9vay5qcyJdLCJuYW1lcyI6WyJNb2R1bGUiLCJyZXF1aXJlIiwiZnMiLCJidWlsdGluSnNFeHQiLCJfZXh0ZW5zaW9ucyIsIk5vZGVUcmFuc3BpbGVyIiwibm9kZVRyYW5zcGlsZXIiLCJwYXRoUnVsZXMiLCJ0cmFuc3BpbGluZyIsInRyYW5zcGlsZXJfcmVxdWlyZV9ob29rIiwiX21vZHVsZSIsImZpbGVuYW1lIiwibW9kdWxlRXhwb3J0cyIsImlzSW5jbHVkZWQiLCJzcmMiLCJyZWFkRmlsZVN5bmMiLCJvdXRwdXQiLCJzaG91bGRDb21waWxlIiwiRXJyb3IiLCJ0cmFuc2Zvcm1XaXRoQ2FjaGUiLCJlcnIiLCJ0b1N0cmluZyIsIl9jb21waWxlIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsImFjYyIsImV4dCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUFXQTtBQUVBOztBQUVBOzs7OztBQUtBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFFQSxNQUFNRSxZQUFZLEdBQUdILE1BQU0sQ0FBQ0ksV0FBUCxDQUFtQixLQUFuQixDQUFyQjs7QUFFQSxNQUFNQyxjQUFjLEdBQUdKLE9BQU8sQ0FBQyxrQkFBRCxDQUE5Qjs7QUFDQSxNQUFNSyxjQUFjLEdBQUcsSUFBSUQsY0FBSixFQUF2Qjs7QUFDQSxNQUFNRSxTQUFTLEdBQUdOLE9BQU8sQ0FBQyxjQUFELENBQXpCOztBQUVBLElBQUlPLFdBQVcsR0FBRyxJQUFsQjs7QUFFQSxTQUFTQyx1QkFBVCxDQUFpQ0MsT0FBakMsRUFBMENDLFFBQTFDLEVBQW9EO0FBQ2xELE1BQUlDLGFBQUo7O0FBQ0EsTUFBSUwsU0FBUyxDQUFDTSxVQUFWLENBQXFCRixRQUFyQixDQUFKLEVBQW9DO0FBQ2xDO0FBQ0EsVUFBTUcsR0FBRyxHQUFHWixFQUFFLENBQUNhLFlBQUgsQ0FBZ0JKLFFBQWhCLENBQVo7QUFDQSxRQUFJSyxNQUFKOztBQUNBLFFBQUlYLGNBQWMsQ0FBQ1ksYUFBZixDQUE2QkgsR0FBN0IsQ0FBSixFQUF1QztBQUNyQyxVQUFJTixXQUFXLElBQUksSUFBbkIsRUFBeUI7QUFDdkI7QUFDQSxjQUFNLElBQUlVLEtBQUosQ0FDSCw0QkFBMkJWLFdBQVksU0FBUUcsUUFBUyxHQURyRCxDQUFOO0FBR0Q7O0FBQ0QsVUFBSTtBQUNGSCxRQUFBQSxXQUFXLEdBQUdHLFFBQWQ7QUFDQUssUUFBQUEsTUFBTSxHQUFHVixjQUFjLENBQUNhLGtCQUFmLENBQWtDTCxHQUFsQyxFQUF1Q0gsUUFBdkMsQ0FBVDtBQUNELE9BSEQsQ0FHRSxPQUFPUyxHQUFQLEVBQVk7QUFDWixjQUFNQSxHQUFOO0FBQ0QsT0FMRCxTQUtVO0FBQ1JaLFFBQUFBLFdBQVcsR0FBRyxJQUFkO0FBQ0Q7QUFDRixLQWZELE1BZU87QUFDTFEsTUFBQUEsTUFBTSxHQUFHRixHQUFHLENBQUNPLFFBQUosRUFBVDtBQUNEOztBQUNEVCxJQUFBQSxhQUFhLEdBQUdGLE9BQU8sQ0FBQ1ksUUFBUixDQUFpQk4sTUFBakIsRUFBeUJMLFFBQXpCLENBQWhCO0FBQ0QsR0F2QkQsTUF1Qk87QUFDTEMsSUFBQUEsYUFBYSxHQUFHVCxZQUFZLENBQUNPLE9BQUQsRUFBVUMsUUFBVixDQUE1QjtBQUNEOztBQUNELFNBQU9DLGFBQVA7QUFDRDtBQUVEOzs7Ozs7Ozs7QUFPQVosTUFBTSxDQUFDSSxXQUFQLEdBQXFCbUIsTUFBTSxDQUFDQyxJQUFQLENBQVl4QixNQUFNLENBQUNJLFdBQW5CLEVBQWdDcUIsTUFBaEMsQ0FBdUMsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDeEUsUUFBTUMsSUFBSSxHQUFHTCxNQUFNLENBQUNNLHdCQUFQLENBQWdDN0IsTUFBTSxDQUFDSSxXQUF2QyxFQUFvRHVCLEdBQXBELENBQWI7O0FBQ0EsTUFBSUEsR0FBRyxLQUFLLEtBQVosRUFBbUI7QUFDakJDLElBQUFBLElBQUksQ0FBQ0UsS0FBTCxHQUFhckIsdUJBQWI7QUFDRDs7QUFDRGMsRUFBQUEsTUFBTSxDQUFDUSxjQUFQLENBQXNCTCxHQUF0QixFQUEyQkMsR0FBM0IsRUFBZ0NDLElBQWhDO0FBQ0EsU0FBT0YsR0FBUDtBQUNELENBUG9CLEVBT2xCLEVBUGtCLENBQXJCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAbm9mbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qIGVzbGludCBudWNsaWRlLWludGVybmFsL25vLWNvbW1vbmpzOiAwICovXHJcblxyXG4vKipcclxuICogVGhpcyBmaWxlIGluc3RhbGxzIHRoZSBsb2dpYyB0aGF0IG1vZGlmaWVzIE5vZGUncyBidWlsdCBpbiByZXF1aXJlKClcclxuICogZnVuY3Rpb24gdG8gdHJhbnNwaWxlIC5qcyBmaWxlcyB0aGF0IGhhdmUgdGhlIEBmbG93IHByYWdtYS5cclxuICovXHJcblxyXG5jb25zdCBNb2R1bGUgPSByZXF1aXJlKCdtb2R1bGUnKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xyXG5cclxuY29uc3QgYnVpbHRpbkpzRXh0ID0gTW9kdWxlLl9leHRlbnNpb25zWycuanMnXTtcclxuXHJcbmNvbnN0IE5vZGVUcmFuc3BpbGVyID0gcmVxdWlyZSgnLi9Ob2RlVHJhbnNwaWxlcicpO1xyXG5jb25zdCBub2RlVHJhbnNwaWxlciA9IG5ldyBOb2RlVHJhbnNwaWxlcigpO1xyXG5jb25zdCBwYXRoUnVsZXMgPSByZXF1aXJlKCcuL3BhdGgtcnVsZXMnKTtcclxuXHJcbmxldCB0cmFuc3BpbGluZyA9IG51bGw7XHJcblxyXG5mdW5jdGlvbiB0cmFuc3BpbGVyX3JlcXVpcmVfaG9vayhfbW9kdWxlLCBmaWxlbmFtZSkge1xyXG4gIGxldCBtb2R1bGVFeHBvcnRzO1xyXG4gIGlmIChwYXRoUnVsZXMuaXNJbmNsdWRlZChmaWxlbmFtZSkpIHtcclxuICAgIC8vIEtlZXAgc3JjIGFzIGEgYnVmZmVyIHNvIGNhbGN1bGF0aW5nIGl0cyBkaWdlc3Qgd2l0aCBjcnlwdG8gaXMgZmFzdC5cclxuICAgIGNvbnN0IHNyYyA9IGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSk7XHJcbiAgICBsZXQgb3V0cHV0O1xyXG4gICAgaWYgKE5vZGVUcmFuc3BpbGVyLnNob3VsZENvbXBpbGUoc3JjKSkge1xyXG4gICAgICBpZiAodHJhbnNwaWxpbmcgIT0gbnVsbCkge1xyXG4gICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGUgdHJhbnNwaWxlciB0cmllZCB0byB0cmFuc3BpbGUgaXRzZWxmLlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgIGBDaXJjdWxhciB0cmFuc3BpbGUgZnJvbSBcIiR7dHJhbnNwaWxpbmd9XCIgdG8gXCIke2ZpbGVuYW1lfVwiYCxcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdHJhbnNwaWxpbmcgPSBmaWxlbmFtZTtcclxuICAgICAgICBvdXRwdXQgPSBub2RlVHJhbnNwaWxlci50cmFuc2Zvcm1XaXRoQ2FjaGUoc3JjLCBmaWxlbmFtZSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHRocm93IGVycjtcclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICB0cmFuc3BpbGluZyA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG91dHB1dCA9IHNyYy50b1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgbW9kdWxlRXhwb3J0cyA9IF9tb2R1bGUuX2NvbXBpbGUob3V0cHV0LCBmaWxlbmFtZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIG1vZHVsZUV4cG9ydHMgPSBidWlsdGluSnNFeHQoX21vZHVsZSwgZmlsZW5hbWUpO1xyXG4gIH1cclxuICByZXR1cm4gbW9kdWxlRXhwb3J0cztcclxufVxyXG5cclxuLyoqXHJcbiAqIEF0b20gc2V0cyBgcmVxdWlyZS5leHRlbnNpb25zWycuanMnXWAgYXMgbm90IHdyaXRhYmxlIChtYXliZSB0byBwcmV2ZW50XHJcbiAqIHNsb3BweSBjb2RlIGZyb20gYXR0YWNoaW5nIGEgcmVxdWlyZSBob29rIHRoYXQgZG9lc24ndCBmaWx0ZXIgYnkgcGF0aD8pLiBUb1xyXG4gKiB3b3JrYXJvdW5kIHRoYXQsIHdlIGNyZWF0ZSBhIG5ldyBgTW9kdWxlLl9leHRlbnNpb25zYCBvYmplY3QgaW5zdGVhZCwgd2l0aFxyXG4gKiBvdXIgY3VzdG9tIGhvb2suIEtlZXBpbmcgdGhlIGl0ZXJhdGlvbiBvcmRlciBvZiB0aGlzIG9iamVjdCBpcyByZWFsbHlcclxuICogaW1wb3J0YW50IGJlY2F1c2UgaXQgZGV0ZXJtaW5lcyB0aGUgZmlsZSBleHRlbnNpb24gbG9va3VwIHByaW9yaXR5LlxyXG4gKi9cclxuTW9kdWxlLl9leHRlbnNpb25zID0gT2JqZWN0LmtleXMoTW9kdWxlLl9leHRlbnNpb25zKS5yZWR1Y2UoKGFjYywgZXh0KSA9PiB7XHJcbiAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlLl9leHRlbnNpb25zLCBleHQpO1xyXG4gIGlmIChleHQgPT09ICcuanMnKSB7XHJcbiAgICBkZXNjLnZhbHVlID0gdHJhbnNwaWxlcl9yZXF1aXJlX2hvb2s7XHJcbiAgfVxyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY2MsIGV4dCwgZGVzYyk7XHJcbiAgcmV0dXJuIGFjYztcclxufSwge30pO1xyXG4iXX0=