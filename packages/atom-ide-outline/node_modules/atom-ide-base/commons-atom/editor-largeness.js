"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lineLengthIfLong = exports.lineCountIfLarge = exports.largeness = void 0;
/**
 * Find if an editor's largeness based on the given threashold
 *
 * @param editor
 * @param largeLineCount LineCountIfLarge threashold
 * @param longLineLength LineLengthIfLong threashold
 * @returns The largness score if editor is large. Otherwise it returns 0 (a small file)
 */
function largeness(editor, largeLineCount = atom.config.get("atom-ide-base.largeLineCount") || 4000, longLineLength = atom.config.get("atom-ide-base.longLineLength") || 4000) {
    const lineCount = lineCountIfLarge(editor, largeLineCount);
    if (lineCount !== 0) {
        return lineCount;
    }
    const longLine = lineLengthIfLong(editor, longLineLength);
    if (longLine !== 0) {
        return longLine;
    }
    return 0; // small file
}
exports.largeness = largeness;
/**
 * Find if an editor has a line that is longer than the given threashold
 *
 * @param editor
 * @param threashold LargeLineCount threashold
 * @returns The line count if it is larger than threashold. Otherwise it returns 0 (a small file)
 */
function lineCountIfLarge(editor, threashold) {
    // @ts-ignore
    if (editor.largeFileMode) {
        return 100000;
    }
    const lineCount = editor.getLineCount();
    if (lineCount >= threashold) {
        return lineCount;
    }
    return 0; // small file
}
exports.lineCountIfLarge = lineCountIfLarge;
/**
 * Find if an editor has a line that is longer than the given threashold
 *
 * @param editor
 * @param threashold LineLengthForRow threashold
 * @param lineCount Count up to this line. Default is {editor.getLineCount()}
 * @returns The first line length that has a length larger than threashold. If no line is found, it returns 0
 */
function lineLengthIfLong(editor, threashold, lineCount = editor.getLineCount()) {
    const buffer = editor.getBuffer();
    for (let i = 0, len = lineCount; i < len; i++) {
        const lineLength = buffer.lineLengthForRow(i);
        if (lineLength > threashold) {
            return lineLength;
        }
    }
    return 0; // small file
}
exports.lineLengthIfLong = lineLengthIfLong;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLWxhcmdlbmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy1jb21tb25zLWF0b20vZWRpdG9yLWxhcmdlbmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQTs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsU0FBUyxDQUN2QixNQUFrQixFQUNsQixpQkFBeUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsSUFBSSxJQUFJLEVBQ2hGLGlCQUF5QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLElBQUk7SUFFaEYsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFBO0lBQzFELElBQUksU0FBUyxLQUFLLENBQUMsRUFBRTtRQUNuQixPQUFPLFNBQVMsQ0FBQTtLQUNqQjtJQUNELE1BQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQTtJQUN6RCxJQUFJLFFBQVEsS0FBSyxDQUFDLEVBQUU7UUFDbEIsT0FBTyxRQUFRLENBQUE7S0FDaEI7SUFDRCxPQUFPLENBQUMsQ0FBQSxDQUFDLGFBQWE7QUFDeEIsQ0FBQztBQWRELDhCQWNDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsTUFBa0IsRUFBRSxVQUFrQjtJQUNyRSxhQUFhO0lBQ2IsSUFBSSxNQUFNLENBQUMsYUFBYSxFQUFFO1FBQ3hCLE9BQU8sTUFBTSxDQUFBO0tBQ2Q7SUFDRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUE7SUFDdkMsSUFBSSxTQUFTLElBQUksVUFBVSxFQUFFO1FBQzNCLE9BQU8sU0FBUyxDQUFBO0tBQ2pCO0lBQ0QsT0FBTyxDQUFDLENBQUEsQ0FBQyxhQUFhO0FBQ3hCLENBQUM7QUFWRCw0Q0FVQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixnQkFBZ0IsQ0FBQyxNQUFrQixFQUFFLFVBQWtCLEVBQUUsWUFBb0IsTUFBTSxDQUFDLFlBQVksRUFBRTtJQUNoSCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDakMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLFNBQVMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM3QyxJQUFJLFVBQVUsR0FBRyxVQUFVLEVBQUU7WUFDM0IsT0FBTyxVQUFVLENBQUE7U0FDbEI7S0FDRjtJQUNELE9BQU8sQ0FBQyxDQUFBLENBQUMsYUFBYTtBQUN4QixDQUFDO0FBVEQsNENBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0RWRpdG9yIH0gZnJvbSBcImF0b21cIlxuXG4vKipcbiAqIEZpbmQgaWYgYW4gZWRpdG9yJ3MgbGFyZ2VuZXNzIGJhc2VkIG9uIHRoZSBnaXZlbiB0aHJlYXNob2xkXG4gKlxuICogQHBhcmFtIGVkaXRvclxuICogQHBhcmFtIGxhcmdlTGluZUNvdW50IExpbmVDb3VudElmTGFyZ2UgdGhyZWFzaG9sZFxuICogQHBhcmFtIGxvbmdMaW5lTGVuZ3RoIExpbmVMZW5ndGhJZkxvbmcgdGhyZWFzaG9sZFxuICogQHJldHVybnMgVGhlIGxhcmduZXNzIHNjb3JlIGlmIGVkaXRvciBpcyBsYXJnZS4gT3RoZXJ3aXNlIGl0IHJldHVybnMgMCAoYSBzbWFsbCBmaWxlKVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGFyZ2VuZXNzKFxuICBlZGl0b3I6IFRleHRFZGl0b3IsXG4gIGxhcmdlTGluZUNvdW50OiBudW1iZXIgPSBhdG9tLmNvbmZpZy5nZXQoXCJhdG9tLWlkZS1iYXNlLmxhcmdlTGluZUNvdW50XCIpIHx8IDQwMDAsXG4gIGxvbmdMaW5lTGVuZ3RoOiBudW1iZXIgPSBhdG9tLmNvbmZpZy5nZXQoXCJhdG9tLWlkZS1iYXNlLmxvbmdMaW5lTGVuZ3RoXCIpIHx8IDQwMDBcbikge1xuICBjb25zdCBsaW5lQ291bnQgPSBsaW5lQ291bnRJZkxhcmdlKGVkaXRvciwgbGFyZ2VMaW5lQ291bnQpXG4gIGlmIChsaW5lQ291bnQgIT09IDApIHtcbiAgICByZXR1cm4gbGluZUNvdW50XG4gIH1cbiAgY29uc3QgbG9uZ0xpbmUgPSBsaW5lTGVuZ3RoSWZMb25nKGVkaXRvciwgbG9uZ0xpbmVMZW5ndGgpXG4gIGlmIChsb25nTGluZSAhPT0gMCkge1xuICAgIHJldHVybiBsb25nTGluZVxuICB9XG4gIHJldHVybiAwIC8vIHNtYWxsIGZpbGVcbn1cblxuLyoqXG4gKiBGaW5kIGlmIGFuIGVkaXRvciBoYXMgYSBsaW5lIHRoYXQgaXMgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIHRocmVhc2hvbGRcbiAqXG4gKiBAcGFyYW0gZWRpdG9yXG4gKiBAcGFyYW0gdGhyZWFzaG9sZCBMYXJnZUxpbmVDb3VudCB0aHJlYXNob2xkXG4gKiBAcmV0dXJucyBUaGUgbGluZSBjb3VudCBpZiBpdCBpcyBsYXJnZXIgdGhhbiB0aHJlYXNob2xkLiBPdGhlcndpc2UgaXQgcmV0dXJucyAwIChhIHNtYWxsIGZpbGUpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5lQ291bnRJZkxhcmdlKGVkaXRvcjogVGV4dEVkaXRvciwgdGhyZWFzaG9sZDogbnVtYmVyKSB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgaWYgKGVkaXRvci5sYXJnZUZpbGVNb2RlKSB7XG4gICAgcmV0dXJuIDEwMDAwMFxuICB9XG4gIGNvbnN0IGxpbmVDb3VudCA9IGVkaXRvci5nZXRMaW5lQ291bnQoKVxuICBpZiAobGluZUNvdW50ID49IHRocmVhc2hvbGQpIHtcbiAgICByZXR1cm4gbGluZUNvdW50XG4gIH1cbiAgcmV0dXJuIDAgLy8gc21hbGwgZmlsZVxufVxuXG4vKipcbiAqIEZpbmQgaWYgYW4gZWRpdG9yIGhhcyBhIGxpbmUgdGhhdCBpcyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gdGhyZWFzaG9sZFxuICpcbiAqIEBwYXJhbSBlZGl0b3JcbiAqIEBwYXJhbSB0aHJlYXNob2xkIExpbmVMZW5ndGhGb3JSb3cgdGhyZWFzaG9sZFxuICogQHBhcmFtIGxpbmVDb3VudCBDb3VudCB1cCB0byB0aGlzIGxpbmUuIERlZmF1bHQgaXMge2VkaXRvci5nZXRMaW5lQ291bnQoKX1cbiAqIEByZXR1cm5zIFRoZSBmaXJzdCBsaW5lIGxlbmd0aCB0aGF0IGhhcyBhIGxlbmd0aCBsYXJnZXIgdGhhbiB0aHJlYXNob2xkLiBJZiBubyBsaW5lIGlzIGZvdW5kLCBpdCByZXR1cm5zIDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpbmVMZW5ndGhJZkxvbmcoZWRpdG9yOiBUZXh0RWRpdG9yLCB0aHJlYXNob2xkOiBudW1iZXIsIGxpbmVDb3VudDogbnVtYmVyID0gZWRpdG9yLmdldExpbmVDb3VudCgpKSB7XG4gIGNvbnN0IGJ1ZmZlciA9IGVkaXRvci5nZXRCdWZmZXIoKVxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGluZUNvdW50OyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBsaW5lTGVuZ3RoID0gYnVmZmVyLmxpbmVMZW5ndGhGb3JSb3coaSlcbiAgICBpZiAobGluZUxlbmd0aCA+IHRocmVhc2hvbGQpIHtcbiAgICAgIHJldHVybiBsaW5lTGVuZ3RoXG4gICAgfVxuICB9XG4gIHJldHVybiAwIC8vIHNtYWxsIGZpbGVcbn1cbiJdfQ==