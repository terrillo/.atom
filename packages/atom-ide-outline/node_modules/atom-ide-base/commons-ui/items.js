"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isItemVisible = isItemVisible;
exports.isElementVisible = isElementVisible;
exports.getItemElement = getItemElement;

/**
 * A function to detect if an item (view) is visible in Atom. This is useful to skip code excecution or updating when
 * the item is not visible.
 *
 * @param item This is an item that is stored in {ViewRegistry}. It has the same type of the argument that you pass to
 *   `atom.view.getView(item)`.
 */
function isItemVisible(item) {
  if (item === undefined || item === null) {
    return false;
  } // check the HTMLElement itself (important for when the dock/container is visible but the tab is not selected)
  // try getting the element


  const element = getItemElement(item);

  if (element !== undefined && !isElementVisible(element)) {
    return false; // if it we can't detect the invisiblity using HTML we need to consider Atom's context so we continue
  } // etch component
  // if (item?.component?.visible === false) {
  //   return false
  // }


  const paneContainer = atom.workspace.paneContainerForItem(item); // if no container it is not visible

  if (paneContainer === undefined) {
    return false;
  } else if (typeof paneContainer.isVisible === "function") {
    // use Dock.isVisible()
    return paneContainer.isVisible();
  } else {
    // it is visible (when paneContainer is not a dock like TextEditor)
    return true;
  }
}
/**
 * A function to detect if an HTMLElement is visible. It doesn't consider the Atom context. To detect if an item is
 * visible in Atom use {isItemVisible} instead This is useful to skip code excecution or updating when the element is
 * not visible.
 *
 * @param element
 */


function isElementVisible(element) {
  if (element instanceof HTMLElement && (element.style.display === "none" || element.hidden || element.offsetHeight === 0)) {
    return false;
  }

  return true;
}
/** Get the HTMLElement of an item using `.getElement()` or `.element` */


function getItemElement(item) {
  if (item === undefined || item === null) {
    return undefined;
  }

  return typeof item.getElement === "function" ? item.getElement() : item.element;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy1jb21tb25zLXVpL2l0ZW1zLnRzIl0sIm5hbWVzIjpbImlzSXRlbVZpc2libGUiLCJpdGVtIiwidW5kZWZpbmVkIiwiZWxlbWVudCIsImdldEl0ZW1FbGVtZW50IiwiaXNFbGVtZW50VmlzaWJsZSIsInBhbmVDb250YWluZXIiLCJhdG9tIiwid29ya3NwYWNlIiwicGFuZUNvbnRhaW5lckZvckl0ZW0iLCJpc1Zpc2libGUiLCJIVE1MRWxlbWVudCIsInN0eWxlIiwiZGlzcGxheSIsImhpZGRlbiIsIm9mZnNldEhlaWdodCIsImdldEVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0EsYUFBVCxDQUF1QkMsSUFBdkIsRUFBd0Y7QUFDN0YsTUFBSUEsSUFBSSxLQUFLQyxTQUFULElBQXNCRCxJQUFJLEtBQUssSUFBbkMsRUFBeUM7QUFDdkMsV0FBTyxLQUFQO0FBQ0QsR0FINEYsQ0FJN0Y7QUFDQTs7O0FBQ0EsUUFBTUUsT0FBTyxHQUFHQyxjQUFjLENBQUNILElBQUQsQ0FBOUI7O0FBQ0EsTUFBSUUsT0FBTyxLQUFLRCxTQUFaLElBQXlCLENBQUNHLGdCQUFnQixDQUFDRixPQUFELENBQTlDLEVBQXlEO0FBQ3ZELFdBQU8sS0FBUCxDQUR1RCxDQUV2RDtBQUNELEdBVjRGLENBVzdGO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxRQUFNRyxhQUFhLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxvQkFBZixDQUFvQ1IsSUFBcEMsQ0FBdEIsQ0FmNkYsQ0FnQjdGOztBQUNBLE1BQUlLLGFBQWEsS0FBS0osU0FBdEIsRUFBaUM7QUFDL0IsV0FBTyxLQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUksT0FBUUksYUFBRCxDQUF1QkksU0FBOUIsS0FBNEMsVUFBaEQsRUFBNEQ7QUFDakU7QUFDQSxXQUFRSixhQUFELENBQXdCSSxTQUF4QixFQUFQO0FBQ0QsR0FITSxNQUdBO0FBQ0w7QUFDQSxXQUFPLElBQVA7QUFDRDtBQUNGO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNMLGdCQUFULENBQTBCRixPQUExQixFQUFnRDtBQUNyRCxNQUNFQSxPQUFPLFlBQVlRLFdBQW5CLEtBQ0NSLE9BQU8sQ0FBQ1MsS0FBUixDQUFjQyxPQUFkLEtBQTBCLE1BQTFCLElBQW9DVixPQUFPLENBQUNXLE1BQTVDLElBQXNEWCxPQUFPLENBQUNZLFlBQVIsS0FBeUIsQ0FEaEYsQ0FERixFQUdFO0FBQ0EsV0FBTyxLQUFQO0FBQ0Q7O0FBQ0QsU0FBTyxJQUFQO0FBQ0Q7QUFFRDs7O0FBQ08sU0FBU1gsY0FBVCxDQUF3QkgsSUFBeEIsRUFBeUQ7QUFDOUQsTUFBSUEsSUFBSSxLQUFLQyxTQUFULElBQXNCRCxJQUFJLEtBQUssSUFBbkMsRUFBeUM7QUFDdkMsV0FBT0MsU0FBUDtBQUNEOztBQUNELFNBQU8sT0FBUUQsSUFBRCxDQUFjZSxVQUFyQixLQUFvQyxVQUFwQyxHQUNGZixJQUFELENBQTRDZSxVQUE1QyxFQURHLEdBRUZmLElBQUQsQ0FBK0NFLE9BRm5EO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERvY2ssIFZpZXdSZWdpc3RyeSB9IGZyb20gXCJhdG9tXCJcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRvIGRldGVjdCBpZiBhbiBpdGVtICh2aWV3KSBpcyB2aXNpYmxlIGluIEF0b20uIFRoaXMgaXMgdXNlZnVsIHRvIHNraXAgY29kZSBleGNlY3V0aW9uIG9yIHVwZGF0aW5nIHdoZW5cbiAqIHRoZSBpdGVtIGlzIG5vdCB2aXNpYmxlLlxuICpcbiAqIEBwYXJhbSBpdGVtIFRoaXMgaXMgYW4gaXRlbSB0aGF0IGlzIHN0b3JlZCBpbiB7Vmlld1JlZ2lzdHJ5fS4gSXQgaGFzIHRoZSBzYW1lIHR5cGUgb2YgdGhlIGFyZ3VtZW50IHRoYXQgeW91IHBhc3MgdG9cbiAqICAgYGF0b20udmlldy5nZXRWaWV3KGl0ZW0pYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlbVZpc2libGUoaXRlbTogUGFyYW1ldGVyczxWaWV3UmVnaXN0cnlbXCJnZXRWaWV3XCJdPlswXSB8IHVuZGVmaW5lZCB8IG51bGwpIHtcbiAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCB8fCBpdGVtID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgLy8gY2hlY2sgdGhlIEhUTUxFbGVtZW50IGl0c2VsZiAoaW1wb3J0YW50IGZvciB3aGVuIHRoZSBkb2NrL2NvbnRhaW5lciBpcyB2aXNpYmxlIGJ1dCB0aGUgdGFiIGlzIG5vdCBzZWxlY3RlZClcbiAgLy8gdHJ5IGdldHRpbmcgdGhlIGVsZW1lbnRcbiAgY29uc3QgZWxlbWVudCA9IGdldEl0ZW1FbGVtZW50KGl0ZW0pXG4gIGlmIChlbGVtZW50ICE9PSB1bmRlZmluZWQgJiYgIWlzRWxlbWVudFZpc2libGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgICAvLyBpZiBpdCB3ZSBjYW4ndCBkZXRlY3QgdGhlIGludmlzaWJsaXR5IHVzaW5nIEhUTUwgd2UgbmVlZCB0byBjb25zaWRlciBBdG9tJ3MgY29udGV4dCBzbyB3ZSBjb250aW51ZVxuICB9XG4gIC8vIGV0Y2ggY29tcG9uZW50XG4gIC8vIGlmIChpdGVtPy5jb21wb25lbnQ/LnZpc2libGUgPT09IGZhbHNlKSB7XG4gIC8vICAgcmV0dXJuIGZhbHNlXG4gIC8vIH1cbiAgY29uc3QgcGFuZUNvbnRhaW5lciA9IGF0b20ud29ya3NwYWNlLnBhbmVDb250YWluZXJGb3JJdGVtKGl0ZW0pXG4gIC8vIGlmIG5vIGNvbnRhaW5lciBpdCBpcyBub3QgdmlzaWJsZVxuICBpZiAocGFuZUNvbnRhaW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAodHlwZW9mIChwYW5lQ29udGFpbmVyIGFzIGFueSkuaXNWaXNpYmxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyB1c2UgRG9jay5pc1Zpc2libGUoKVxuICAgIHJldHVybiAocGFuZUNvbnRhaW5lciBhcyBEb2NrKS5pc1Zpc2libGUoKVxuICB9IGVsc2Uge1xuICAgIC8vIGl0IGlzIHZpc2libGUgKHdoZW4gcGFuZUNvbnRhaW5lciBpcyBub3QgYSBkb2NrIGxpa2UgVGV4dEVkaXRvcilcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0byBkZXRlY3QgaWYgYW4gSFRNTEVsZW1lbnQgaXMgdmlzaWJsZS4gSXQgZG9lc24ndCBjb25zaWRlciB0aGUgQXRvbSBjb250ZXh0LiBUbyBkZXRlY3QgaWYgYW4gaXRlbSBpc1xuICogdmlzaWJsZSBpbiBBdG9tIHVzZSB7aXNJdGVtVmlzaWJsZX0gaW5zdGVhZCBUaGlzIGlzIHVzZWZ1bCB0byBza2lwIGNvZGUgZXhjZWN1dGlvbiBvciB1cGRhdGluZyB3aGVuIHRoZSBlbGVtZW50IGlzXG4gKiBub3QgdmlzaWJsZS5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50VmlzaWJsZShlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICBpZiAoXG4gICAgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmXG4gICAgKGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbWVudC5oaWRkZW4gfHwgZWxlbWVudC5vZmZzZXRIZWlnaHQgPT09IDApXG4gICkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8qKiBHZXQgdGhlIEhUTUxFbGVtZW50IG9mIGFuIGl0ZW0gdXNpbmcgYC5nZXRFbGVtZW50KClgIG9yIGAuZWxlbWVudGAgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJdGVtRWxlbWVudChpdGVtOiBvYmplY3QgfCB1bmRlZmluZWQgfCBudWxsKSB7XG4gIGlmIChpdGVtID09PSB1bmRlZmluZWQgfHwgaXRlbSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICByZXR1cm4gdHlwZW9mIChpdGVtIGFzIGFueSkuZ2V0RWxlbWVudCA9PT0gXCJmdW5jdGlvblwiXG4gICAgPyAoaXRlbSBhcyB7IGdldEVsZW1lbnQ6ICgpID0+IEhUTUxFbGVtZW50IH0pLmdldEVsZW1lbnQoKVxuICAgIDogKGl0ZW0gYXMgeyBlbGVtZW50OiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB9KS5lbGVtZW50XG59XG4iXX0=