"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPositionInRange = exports.matchRegexEndingAt = exports.wordAtPositionFromBuffer = exports.getWordFromCursorOrSelection = exports.getWordFromMouseEvent = exports.trimRange = exports.wordAtPosition = void 0;
const atom_1 = require("atom");
const assert_1 = __importDefault(require("assert"));
/**
 * Finds the word at the position. You can either provide a word regex yourself, or have Atom use the word regex in
 * force at the scopes at that position, in which case it uses the optional includeNonWordCharacters, default true. (I
 * know that's a weird default but it follows Atom's convention...)
 */
function wordAtPosition(editor, position, wordRegex) {
    let wordRegex_;
    if (wordRegex instanceof RegExp) {
        wordRegex_ = wordRegex;
    }
    else {
        // What is the word regex associated with the position? We'd like to use
        // Cursor.wordRegExp, except that function gets the regex associated
        // with the editor's current cursor while we want the regex associated with
        // the specific position. So we re-implement it ourselves...
        // @ts-ignore: https://github.com/atom/atom/blob/aa3c34bedb361e09a5068dce9620b460a20ca3fb/src/text-editor.js#L5032
        const nonWordChars = editor.getNonWordCharacters(position);
        const escaped = nonWordChars.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
        // We copied this escaping regex from Cursor.wordRegexp, rather than
        // using the library function 'escapeStringRegExp'. That's because the
        // library function doesn't escape the hyphen character and so is
        // unsuitable for use inside a range.
        let r = `^[\t ]*$|[^\\s${escaped}]+`;
        if (wordRegex == null || wordRegex.includeNonWordCharacters) {
            r += `|[${escaped}]+`;
        }
        wordRegex_ = new RegExp(r, "g");
    }
    return wordAtPositionFromBuffer(editor.getBuffer(), position, wordRegex_);
}
exports.wordAtPosition = wordAtPosition;
/**
 * Gets the trimmed range from a given range, i.e. moves the start and end points to the first and last non-whitespace
 * characters (or specified regex) within the range respectively.
 *
 * @param editor The editor containing the range
 * @param rangeToTrim The range to trim
 * @param stopRegex Stop trimming when the first match is found for this regex, defaults to first non-whitespace character
 * @returns Range the trimmed range
 */
function trimRange(editor, rangeToTrim, stopRegex = /\S/) {
    const buffer = editor.getBuffer();
    let { start, end } = rangeToTrim;
    buffer.scanInRange(stopRegex, rangeToTrim, ({ range, stop }) => {
        start = range.start;
        stop();
    });
    buffer.backwardsScanInRange(stopRegex, rangeToTrim, ({ range, stop }) => {
        end = range.end;
        stop();
    });
    return new atom_1.Range(start, end);
}
exports.trimRange = trimRange;
function getSingleWordAtPosition(editor, position) {
    const match = wordAtPosition(editor, position);
    // We should only receive a single identifier from a single point.
    if (match == null || match.wordMatch.length !== 1) {
        return null;
    }
    return match.wordMatch[0];
}
/**
 * Gets the word being right-clicked on in a MouseEvent. A good use case for this is performing an action on a word from
 * a context menu.
 *
 * @param editor The editor containing the word where the MouseEvent occurred from
 * @param event The MouseEvent containing the screen position of the click
 */
function getWordFromMouseEvent(editor, event) {
    // We can't immediately get the identifier right-clicked on from
    // the MouseEvent. Using its target element content would work in
    // some cases but wouldn't work if there was additional content
    // in the same element, such as in a comment.
    // @ts-ignore: https://github.com/atom/atom/blob/aa3c34bedb361e09a5068dce9620b460a20ca3fb/src/text-editor.js#L5075
    const component = editor.getElement().component;
    assert_1.default(component);
    // This solution doesn't feel ideal but it is the way hyperclick does it.
    const point = component.screenPositionForMouseEvent(event);
    return getSingleWordAtPosition(editor, point);
}
exports.getWordFromMouseEvent = getWordFromMouseEvent;
/**
 * Attempts to get a word from the last selection or cursor. A good use case for this is performing an action on an
 * 'active' word after a command is triggered via a keybinding.
 *
 * @param editor The editor containing the 'active' word when the keybinding is triggered
 */
function getWordFromCursorOrSelection(editor) {
    const selection = editor.getSelectedText();
    if (selection && selection.length > 0) {
        return selection;
    }
    // There was no selection so we can go ahead and try the cursor position.
    const point = editor.getCursorScreenPosition();
    return getSingleWordAtPosition(editor, point);
}
exports.getWordFromCursorOrSelection = getWordFromCursorOrSelection;
function wordAtPositionFromBuffer(buffer, position, wordRegex) {
    const { row, column } = position;
    const rowRange = buffer.rangeForRow(row);
    let matchData;
    // Extract the expression from the row text.
    buffer.scanInRange(wordRegex, rowRange, (data) => {
        const { range } = data;
        if (range.start.isLessThanOrEqual(position) && range.end.isGreaterThan(position)) {
            matchData = data;
        }
        // Stop the scan if the scanner has passed our position.
        if (range.end.column > column) {
            data.stop();
        }
    });
    // @ts-ignore (it is assigned above)
    if (matchData) {
        return {
            wordMatch: matchData.match,
            range: matchData.range,
        };
    }
    else {
        return null;
    }
}
exports.wordAtPositionFromBuffer = wordAtPositionFromBuffer;
// Matches a regex on the text of the line ending at endPosition.
// regex should end with a '$'.
// Useful for autocomplete.
function matchRegexEndingAt(buffer, endPosition, regex) {
    const line = buffer.getTextInRange([[endPosition.row, 0], endPosition]);
    const match = regex.exec(line);
    return match == null ? null : match[0];
}
exports.matchRegexEndingAt = matchRegexEndingAt;
function isPositionInRange(position, range) {
    return Array.isArray(range) ? range.some((r) => r.containsPoint(position)) : range.containsPoint(position);
}
exports.isPositionInRange = isPositionInRange;
//# sourceMappingURL=data:application/json;base64,