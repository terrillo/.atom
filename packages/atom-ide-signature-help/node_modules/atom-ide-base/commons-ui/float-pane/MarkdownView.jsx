"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderMarkdown = exports.MarkdownView = void 0;
const solid_js_1 = require("solid-js");
const dompurify_1 = __importDefault(require("dompurify"));
const MarkdownRenderer_1 = require("../MarkdownRenderer");
/** A react component that can hosts markdown texts */
function MarkdownView(props) {
    const [getMarkdown, setMarkdown] = solid_js_1.createSignal("");
    /** Calls `getDocumentationHtml` to convert Markdown to markdown */
    solid_js_1.onMount(async () => {
        var _a;
        setMarkdown((_a = (await renderMarkdown(props.markdown, props.grammarName, props.renderer))) !== null && _a !== void 0 ? _a : "");
    });
    return (<div className={props.containerClassName} onWheel={onWheel}>
      <div className={props.contentClassName} innerHTML={getMarkdown()}/>
    </div>);
}
exports.MarkdownView = MarkdownView;
/**
 * Handles the mouse wheel event to enable scrolling over long text
 *
 * @param evt The mouse wheel event being triggered
 */
function onWheel(evt) {
    return evt.stopPropagation();
}
/**
 * Convert the markdown documentation to markdown
 *
 * @param markdownTexts The documentation text in markdown format to be converted
 * @param grammarName The default grammar used for embedded code samples
 * @param renderer Markdown service to be used for rendering
 * @returns A promise object to track the asynchronous operation
 */
async function renderMarkdown(markdownTexts, grammarName, renderer) {
    var _a, _b;
    if (grammarName === void 0) { grammarName = ((_b = (_a = atom.workspace.getActiveTextEditor()) === null || _a === void 0 ? void 0 : _a.getGrammar().scopeName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || ""; }
    if (markdownTexts === undefined) {
        return null;
    }
    let markdownText = "";
    // if Array
    if (Array.isArray(markdownTexts)) {
        if (markdownTexts.length === 0) {
            return null;
        }
        markdownText = markdownTexts.join("\r\n");
    }
    // if string
    else {
        markdownText = markdownTexts;
    }
    if (renderer) {
        return dompurify_1.default.sanitize(await renderer.render(markdownText, grammarName));
    }
    else {
        // Use built-in markdown renderer (it already does sanitization)
        const render = await MarkdownRenderer_1.getMarkdownRenderer();
        return render(markdownText, grammarName);
    }
}
exports.renderMarkdown = renderMarkdown;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFya2Rvd25WaWV3LmpzeCIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy1jb21tb25zLXVpL2Zsb2F0LXBhbmUvTWFya2Rvd25WaWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1Q0FBZ0Q7QUFDaEQsMERBQWlDO0FBRWpDLDBEQUF5RDtBQVl6RCxzREFBc0Q7QUFDdEQsU0FBZ0IsWUFBWSxDQUFDLEtBQVk7SUFDdkMsTUFBTSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsR0FBRyx1QkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRW5ELG1FQUFtRTtJQUNuRSxrQkFBTyxDQUFDLEtBQUssSUFBSSxFQUFFOztRQUNqQixXQUFXLENBQUMsTUFBQSxDQUFDLE1BQU0sY0FBYyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUE7SUFDOUYsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLENBQ0wsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQ3pEO01BQUEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsRUFDbkU7SUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUNQLENBQUE7QUFDSCxDQUFDO0FBYkQsb0NBYUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBUyxPQUFPLENBQUMsR0FBZTtJQUM5QixPQUFPLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtBQUM5QixDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNJLEtBQUssVUFBVSxjQUFjLENBQ2xDLGFBQXFDLEVBQ3JDLFdBQXVHLEVBQ3ZHLFFBQTBCOztnQ0FEMUIsRUFBQSxlQUFzQixNQUFBLE1BQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSwwQ0FBRSxVQUFVLEdBQUcsU0FBUywwQ0FBRSxXQUFXLEVBQUUsS0FBSSxFQUFFO0lBR3ZHLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQTtLQUNaO0lBRUQsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFBO0lBQ3JCLFdBQVc7SUFDWCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDaEMsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM5QixPQUFPLElBQUksQ0FBQTtTQUNaO1FBQ0QsWUFBWSxHQUFJLGFBQStCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQzdEO0lBQ0QsWUFBWTtTQUNQO1FBQ0gsWUFBWSxHQUFHLGFBQWEsQ0FBQTtLQUM3QjtJQUNELElBQUksUUFBUSxFQUFFO1FBQ1osT0FBTyxtQkFBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7S0FDNUU7U0FBTTtRQUNMLGdFQUFnRTtRQUNoRSxNQUFNLE1BQU0sR0FBRyxNQUFNLHNDQUFtQixFQUFFLENBQUE7UUFDMUMsT0FBTyxNQUFNLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFBO0tBQ3pDO0FBQ0gsQ0FBQztBQTVCRCx3Q0E0QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTaWduYWwsIG9uTW91bnQgfSBmcm9tIFwic29saWQtanNcIlxuaW1wb3J0IERPTVB1cmlmeSBmcm9tIFwiZG9tcHVyaWZ5XCJcbmltcG9ydCB7IE1hcmtkb3duU2VydmljZSB9IGZyb20gXCIuLi8uLi90eXBlcy1wYWNrYWdlcy9tYWluXCJcbmltcG9ydCB7IGdldE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwiLi4vTWFya2Rvd25SZW5kZXJlclwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICBtYXJrZG93bjogQXJyYXk8c3RyaW5nPiB8IHN0cmluZ1xuICBncmFtbWFyTmFtZT86IHN0cmluZ1xuICByZW5kZXJlcj86IE1hcmtkb3duU2VydmljZVxuICBjb250YWluZXJDbGFzc05hbWU6IHN0cmluZ1xuICBjb250ZW50Q2xhc3NOYW1lOiBzdHJpbmdcbiAgLy8gYWxyZWFkeSByZW5kZXJlZCBtYXJrZG93blxuICBodG1sPzogQXJyYXk8c3RyaW5nPiB8IHN0cmluZ1xufVxuXG4vKiogQSByZWFjdCBjb21wb25lbnQgdGhhdCBjYW4gaG9zdHMgbWFya2Rvd24gdGV4dHMgKi9cbmV4cG9ydCBmdW5jdGlvbiBNYXJrZG93blZpZXcocHJvcHM6IFByb3BzKSB7XG4gIGNvbnN0IFtnZXRNYXJrZG93biwgc2V0TWFya2Rvd25dID0gY3JlYXRlU2lnbmFsKFwiXCIpXG5cbiAgLyoqIENhbGxzIGBnZXREb2N1bWVudGF0aW9uSHRtbGAgdG8gY29udmVydCBNYXJrZG93biB0byBtYXJrZG93biAqL1xuICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICBzZXRNYXJrZG93bigoYXdhaXQgcmVuZGVyTWFya2Rvd24ocHJvcHMubWFya2Rvd24sIHByb3BzLmdyYW1tYXJOYW1lLCBwcm9wcy5yZW5kZXJlcikpID8/IFwiXCIpXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17cHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lfSBvbldoZWVsPXtvbldoZWVsfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtwcm9wcy5jb250ZW50Q2xhc3NOYW1lfSBpbm5lckhUTUw9e2dldE1hcmtkb3duKCl9IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBtb3VzZSB3aGVlbCBldmVudCB0byBlbmFibGUgc2Nyb2xsaW5nIG92ZXIgbG9uZyB0ZXh0XG4gKlxuICogQHBhcmFtIGV2dCBUaGUgbW91c2Ugd2hlZWwgZXZlbnQgYmVpbmcgdHJpZ2dlcmVkXG4gKi9cbmZ1bmN0aW9uIG9uV2hlZWwoZXZ0OiBXaGVlbEV2ZW50KSB7XG4gIHJldHVybiBldnQuc3RvcFByb3BhZ2F0aW9uKClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBtYXJrZG93biBkb2N1bWVudGF0aW9uIHRvIG1hcmtkb3duXG4gKlxuICogQHBhcmFtIG1hcmtkb3duVGV4dHMgVGhlIGRvY3VtZW50YXRpb24gdGV4dCBpbiBtYXJrZG93biBmb3JtYXQgdG8gYmUgY29udmVydGVkXG4gKiBAcGFyYW0gZ3JhbW1hck5hbWUgVGhlIGRlZmF1bHQgZ3JhbW1hciB1c2VkIGZvciBlbWJlZGRlZCBjb2RlIHNhbXBsZXNcbiAqIEBwYXJhbSByZW5kZXJlciBNYXJrZG93biBzZXJ2aWNlIHRvIGJlIHVzZWQgZm9yIHJlbmRlcmluZ1xuICogQHJldHVybnMgQSBwcm9taXNlIG9iamVjdCB0byB0cmFjayB0aGUgYXN5bmNocm9ub3VzIG9wZXJhdGlvblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVuZGVyTWFya2Rvd24oXG4gIG1hcmtkb3duVGV4dHM6IEFycmF5PHN0cmluZz4gfCBzdHJpbmcsXG4gIGdyYW1tYXJOYW1lOiBzdHJpbmcgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKCk/LmdldEdyYW1tYXIoKS5zY29wZU5hbWU/LnRvTG93ZXJDYXNlKCkgfHwgXCJcIixcbiAgcmVuZGVyZXI/OiBNYXJrZG93blNlcnZpY2Vcbik6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICBpZiAobWFya2Rvd25UZXh0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGxldCBtYXJrZG93blRleHQgPSBcIlwiXG4gIC8vIGlmIEFycmF5XG4gIGlmIChBcnJheS5pc0FycmF5KG1hcmtkb3duVGV4dHMpKSB7XG4gICAgaWYgKG1hcmtkb3duVGV4dHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBtYXJrZG93blRleHQgPSAobWFya2Rvd25UZXh0cyBhcyBBcnJheTxzdHJpbmc+KS5qb2luKFwiXFxyXFxuXCIpXG4gIH1cbiAgLy8gaWYgc3RyaW5nXG4gIGVsc2Uge1xuICAgIG1hcmtkb3duVGV4dCA9IG1hcmtkb3duVGV4dHNcbiAgfVxuICBpZiAocmVuZGVyZXIpIHtcbiAgICByZXR1cm4gRE9NUHVyaWZ5LnNhbml0aXplKGF3YWl0IHJlbmRlcmVyLnJlbmRlcihtYXJrZG93blRleHQsIGdyYW1tYXJOYW1lKSlcbiAgfSBlbHNlIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gbWFya2Rvd24gcmVuZGVyZXIgKGl0IGFscmVhZHkgZG9lcyBzYW5pdGl6YXRpb24pXG4gICAgY29uc3QgcmVuZGVyID0gYXdhaXQgZ2V0TWFya2Rvd25SZW5kZXJlcigpXG4gICAgcmV0dXJuIHJlbmRlcihtYXJrZG93blRleHQsIGdyYW1tYXJOYW1lKVxuICB9XG59XG4iXX0=