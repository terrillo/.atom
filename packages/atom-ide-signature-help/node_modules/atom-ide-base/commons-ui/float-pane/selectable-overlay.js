"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeOverlaySelectable = makeOverlaySelectable;
exports.overlayFocusFix = overlayFocusFix;
exports.focusEditor = focusEditor;
exports.blurEditor = blurEditor;
exports.makeOverLayCopyable = makeOverLayCopyable;
exports.copyListener = copyListener;

/**
 * Makes the text selectable and copyable
 *
 * Note: you can directly add `user-select: text` (and `pointer-events: all`) in CSS for better performance
 */
function makeOverlaySelectable(editor, overlayElement, focusFix = true) {
  // allow the browser to handle selecting
  overlayElement.setAttribute("tabindex", "-1"); // make it selectable

  if (!overlayElement.style.userSelect || overlayElement.style.userSelect === "none") {
    overlayElement.style.userSelect = "text";
  }

  if (focusFix) {
    // fix overlay focus issue
    overlayFocusFix(editor, overlayElement);
  } // add copy keybindings


  overlayElement.classList.add("native-key-bindings");
}
/**
 * - Focus on the datatip once the text is selected (cursor gets disabled temporarily)
 * - Remove focus once mouse leaves
 */


function overlayFocusFix(editor, element) {
  const editorComponent = atom.views.getView(editor).getComponent();
  element.addEventListener("mousedown", () => {
    blurEditor(editorComponent);
    element.addEventListener("mouseleave", () => {
      focusEditor(editorComponent);
    });
  });
}

function focusEditor(editorComponent) {
  // @ts-ignore internal api
  editorComponent === null || editorComponent === void 0 ? void 0 : editorComponent.didFocus();
}

function blurEditor(editorComponent) {
  // @ts-ignore internal api
  editorComponent === null || editorComponent === void 0 ? void 0 : editorComponent.didBlurHiddenInput({
    relatedTarget: null
  });
}
/*
██████  ███████ ██████  ██████  ███████  ██████  █████  ████████ ███████ ██████
██   ██ ██      ██   ██ ██   ██ ██      ██      ██   ██    ██    ██      ██   ██
██   ██ █████   ██████  ██████  █████   ██      ███████    ██    █████   ██   ██
██   ██ ██      ██      ██   ██ ██      ██      ██   ██    ██    ██      ██   ██
██████  ███████ ██      ██   ██ ███████  ██████ ██   ██    ██    ███████ ██████
*/

/**
 * @deprecated Use `makeOverlaySelectable` instead.
 *
 *   Makes the overlay component copyable
 *
 *   - You should call `makeOverlaySelectable` before this
 *   - If your element already has mouseenter and mouseleav listeners, directly use `copyListener`
 */


function makeOverLayCopyable(element) {
  element.addEventListener("mouseenter", () => {
    element.addEventListener("keydown", copyListener);
  });
  element.addEventListener("mouseleave", () => {
    element.removeEventListener("keydown", copyListener);
  });
}
/**
 * @deprecated Use `makeOverlaySelectable` instead.
 *
 *   A manual copy listener Usage. Add the listener to your mouse enter and mouseleave listeners
 *
 *   ```ts
 *   element.addEventListener("mouseenter", () => {element.addEventListener("keydown", copyListener)}`
 *   element.addEventListener("mouseleave", () => {element.removeEventListener("keydown", copyListener)}`
 * ```
 */


async function copyListener(event) {
  event.preventDefault();

  if (event.ctrlKey && event.key === "c") {
    var _document$getSelectio, _document$getSelectio2;

    const text = (_document$getSelectio = (_document$getSelectio2 = document.getSelection()) === null || _document$getSelectio2 === void 0 ? void 0 : _document$getSelectio2.toString()) !== null && _document$getSelectio !== void 0 ? _document$getSelectio : "";
    await navigator.clipboard.writeText(text);
  }
} // TODO we should not need to manually listen for copy paste
//# sourceMappingURL=data:application/json;charset=utf-8;base64,