"use strict";

var _$template = require("solid-js/web").template;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarkdownView = MarkdownView;
exports.renderMarkdown = renderMarkdown;

var _web = require("solid-js/web");

var _solidJs = require("solid-js");

var _dompurify = _interopRequireDefault(require("dompurify"));

var _MarkdownRenderer = require("../MarkdownRenderer");

const _tmpl$ = _$template(`<div><div></div></div>`, 4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** A react component that can hosts markdown texts */
function MarkdownView(props) {
  const [getMarkdown, setMarkdown] = (0, _solidJs.createSignal)("");
  /** Calls `getDocumentationHtml` to convert Markdown to markdown */

  (0, _solidJs.onMount)(async () => {
    var _await$renderMarkdown;

    setMarkdown((_await$renderMarkdown = await renderMarkdown(props.markdown, props.grammarName, props.renderer)) !== null && _await$renderMarkdown !== void 0 ? _await$renderMarkdown : "");
  });
  return (() => {
    const _el$ = _tmpl$.cloneNode(true),
          _el$2 = _el$.firstChild;

    _el$.addEventListener("wheel", onWheel);

    (0, _web.effect)(_p$ => {
      const _v$ = props.containerClassName,
            _v$2 = props.contentClassName,
            _v$3 = getMarkdown();

      _v$ !== _p$._v$ && (_el$.className = _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && (_el$2.className = _p$._v$2 = _v$2);
      _v$3 !== _p$._v$3 && (_el$2.innerHTML = _p$._v$3 = _v$3);
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined
    });
    return _el$;
  })();
}
/**
 * Handles the mouse wheel event to enable scrolling over long text
 *
 * @param evt The mouse wheel event being triggered
 */


function onWheel(evt) {
  return evt.stopPropagation();
}
/**
 * Convert the markdown documentation to markdown
 *
 * @param markdownTexts The documentation text in markdown format to be converted
 * @param grammarName The default grammar used for embedded code samples
 * @param renderer Markdown service to be used for rendering
 * @returns A promise object to track the asynchronous operation
 */


async function renderMarkdown(markdownTexts, grammarName = (() => {
  var _atom$workspace$getAc, _atom$workspace$getAc2;

  return (_atom$workspace$getAc = atom.workspace.getActiveTextEditor()) === null || _atom$workspace$getAc === void 0 ? void 0 : (_atom$workspace$getAc2 = _atom$workspace$getAc.getGrammar().scopeName) === null || _atom$workspace$getAc2 === void 0 ? void 0 : _atom$workspace$getAc2.toLowerCase();
})() || "", renderer) {
  if (markdownTexts === undefined) {
    return null;
  }

  let markdownText = ""; // if Array

  if (Array.isArray(markdownTexts)) {
    if (markdownTexts.length === 0) {
      return null;
    }

    markdownText = markdownTexts.join("\r\n");
  } // if string
  else {
      markdownText = markdownTexts;
    }

  if (renderer) {
    return _dompurify.default.sanitize(await renderer.render(markdownText, grammarName));
  } else {
    // Use built-in markdown renderer (it already does sanitization)
    const render = await (0, _MarkdownRenderer.getMarkdownRenderer)();
    return render(markdownText, grammarName);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy1jb21tb25zLXVpL2Zsb2F0LXBhbmUvTWFya2Rvd25WaWV3LnRzeCJdLCJuYW1lcyI6WyJNYXJrZG93blZpZXciLCJwcm9wcyIsImdldE1hcmtkb3duIiwic2V0TWFya2Rvd24iLCJyZW5kZXJNYXJrZG93biIsIm1hcmtkb3duIiwiZ3JhbW1hck5hbWUiLCJyZW5kZXJlciIsIm9uV2hlZWwiLCJjb250YWluZXJDbGFzc05hbWUiLCJjb250ZW50Q2xhc3NOYW1lIiwiZXZ0Iiwic3RvcFByb3BhZ2F0aW9uIiwibWFya2Rvd25UZXh0cyIsImF0b20iLCJ3b3Jrc3BhY2UiLCJnZXRBY3RpdmVUZXh0RWRpdG9yIiwiZ2V0R3JhbW1hciIsInNjb3BlTmFtZSIsInRvTG93ZXJDYXNlIiwidW5kZWZpbmVkIiwibWFya2Rvd25UZXh0IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiam9pbiIsIkRPTVB1cmlmeSIsInNhbml0aXplIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7Ozs7O0FBWUE7QUFDTyxTQUFTQSxZQUFULENBQXNCQyxLQUF0QixFQUFvQztBQUN6QyxRQUFNLENBQUNDLFdBQUQsRUFBY0MsV0FBZCxJQUE2QiwyQkFBYSxFQUFiLENBQW5DO0FBRUE7O0FBQ0Esd0JBQVEsWUFBWTtBQUFBOztBQUNsQkEsSUFBQUEsV0FBVywwQkFBRSxNQUFNQyxjQUFjLENBQUNILEtBQUssQ0FBQ0ksUUFBUCxFQUFpQkosS0FBSyxDQUFDSyxXQUF2QixFQUFvQ0wsS0FBSyxDQUFDTSxRQUExQyxDQUF0Qix5RUFBOEUsRUFBOUUsQ0FBWDtBQUNELEdBRkQ7QUFJQTtBQUFBO0FBQUE7O0FBQUEsbUNBQ3FEQyxPQURyRDs7QUFBQTtBQUFBLGtCQUNrQlAsS0FBSyxDQUFDUSxrQkFEeEI7QUFBQSxtQkFFb0JSLEtBQUssQ0FBQ1MsZ0JBRjFCO0FBQUEsbUJBRXVEUixXQUFXLEVBRmxFOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNNLE9BQVQsQ0FBaUJHLEdBQWpCLEVBQWtDO0FBQ2hDLFNBQU9BLEdBQUcsQ0FBQ0MsZUFBSixFQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxlQUFlUixjQUFmLENBQ0xTLGFBREssRUFFTFAsV0FBbUIsR0FBRztBQUFBOztBQUFBLGtDQUFBUSxJQUFJLENBQUNDLFNBQUwsQ0FBZUMsbUJBQWYsNEdBQXNDQyxVQUF0QyxHQUFtREMsU0FBbkQsa0ZBQThEQyxXQUE5RDtBQUFBLFFBQStFLEVBRmhHLEVBR0xaLFFBSEssRUFJbUI7QUFDeEIsTUFBSU0sYUFBYSxLQUFLTyxTQUF0QixFQUFpQztBQUMvQixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFJQyxZQUFZLEdBQUcsRUFBbkIsQ0FMd0IsQ0FNeEI7O0FBQ0EsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNWLGFBQWQsQ0FBSixFQUFrQztBQUNoQyxRQUFJQSxhQUFhLENBQUNXLE1BQWQsS0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUIsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0RILElBQUFBLFlBQVksR0FBSVIsYUFBRCxDQUFpQ1ksSUFBakMsQ0FBc0MsTUFBdEMsQ0FBZjtBQUNELEdBTEQsQ0FNQTtBQU5BLE9BT0s7QUFDSEosTUFBQUEsWUFBWSxHQUFHUixhQUFmO0FBQ0Q7O0FBQ0QsTUFBSU4sUUFBSixFQUFjO0FBQ1osV0FBT21CLG1CQUFVQyxRQUFWLENBQW1CLE1BQU1wQixRQUFRLENBQUNxQixNQUFULENBQWdCUCxZQUFoQixFQUE4QmYsV0FBOUIsQ0FBekIsQ0FBUDtBQUNELEdBRkQsTUFFTztBQUNMO0FBQ0EsVUFBTXNCLE1BQU0sR0FBRyxNQUFNLDRDQUFyQjtBQUNBLFdBQU9BLE1BQU0sQ0FBQ1AsWUFBRCxFQUFlZixXQUFmLENBQWI7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2lnbmFsLCBvbk1vdW50IH0gZnJvbSBcInNvbGlkLWpzXCJcbmltcG9ydCBET01QdXJpZnkgZnJvbSBcImRvbXB1cmlmeVwiXG5pbXBvcnQgeyBNYXJrZG93blNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vdHlwZXMtcGFja2FnZXMvbWFpblwiXG5pbXBvcnQgeyBnZXRNYXJrZG93blJlbmRlcmVyIH0gZnJvbSBcIi4uL01hcmtkb3duUmVuZGVyZXJcIlxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgbWFya2Rvd246IEFycmF5PHN0cmluZz4gfCBzdHJpbmdcbiAgZ3JhbW1hck5hbWU/OiBzdHJpbmdcbiAgcmVuZGVyZXI/OiBNYXJrZG93blNlcnZpY2VcbiAgY29udGFpbmVyQ2xhc3NOYW1lOiBzdHJpbmdcbiAgY29udGVudENsYXNzTmFtZTogc3RyaW5nXG4gIC8vIGFscmVhZHkgcmVuZGVyZWQgbWFya2Rvd25cbiAgaHRtbD86IEFycmF5PHN0cmluZz4gfCBzdHJpbmdcbn1cblxuLyoqIEEgcmVhY3QgY29tcG9uZW50IHRoYXQgY2FuIGhvc3RzIG1hcmtkb3duIHRleHRzICovXG5leHBvcnQgZnVuY3Rpb24gTWFya2Rvd25WaWV3KHByb3BzOiBQcm9wcykge1xuICBjb25zdCBbZ2V0TWFya2Rvd24sIHNldE1hcmtkb3duXSA9IGNyZWF0ZVNpZ25hbChcIlwiKVxuXG4gIC8qKiBDYWxscyBgZ2V0RG9jdW1lbnRhdGlvbkh0bWxgIHRvIGNvbnZlcnQgTWFya2Rvd24gdG8gbWFya2Rvd24gKi9cbiAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgc2V0TWFya2Rvd24oKGF3YWl0IHJlbmRlck1hcmtkb3duKHByb3BzLm1hcmtkb3duLCBwcm9wcy5ncmFtbWFyTmFtZSwgcHJvcHMucmVuZGVyZXIpKSA/PyBcIlwiKVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3Byb3BzLmNvbnRhaW5lckNsYXNzTmFtZX0gb25XaGVlbD17b25XaGVlbH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17cHJvcHMuY29udGVudENsYXNzTmFtZX0gaW5uZXJIVE1MPXtnZXRNYXJrZG93bigpfSAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgbW91c2Ugd2hlZWwgZXZlbnQgdG8gZW5hYmxlIHNjcm9sbGluZyBvdmVyIGxvbmcgdGV4dFxuICpcbiAqIEBwYXJhbSBldnQgVGhlIG1vdXNlIHdoZWVsIGV2ZW50IGJlaW5nIHRyaWdnZXJlZFxuICovXG5mdW5jdGlvbiBvbldoZWVsKGV2dDogV2hlZWxFdmVudCkge1xuICByZXR1cm4gZXZ0LnN0b3BQcm9wYWdhdGlvbigpXG59XG5cbi8qKlxuICogQ29udmVydCB0aGUgbWFya2Rvd24gZG9jdW1lbnRhdGlvbiB0byBtYXJrZG93blxuICpcbiAqIEBwYXJhbSBtYXJrZG93blRleHRzIFRoZSBkb2N1bWVudGF0aW9uIHRleHQgaW4gbWFya2Rvd24gZm9ybWF0IHRvIGJlIGNvbnZlcnRlZFxuICogQHBhcmFtIGdyYW1tYXJOYW1lIFRoZSBkZWZhdWx0IGdyYW1tYXIgdXNlZCBmb3IgZW1iZWRkZWQgY29kZSBzYW1wbGVzXG4gKiBAcGFyYW0gcmVuZGVyZXIgTWFya2Rvd24gc2VydmljZSB0byBiZSB1c2VkIGZvciByZW5kZXJpbmdcbiAqIEByZXR1cm5zIEEgcHJvbWlzZSBvYmplY3QgdG8gdHJhY2sgdGhlIGFzeW5jaHJvbm91cyBvcGVyYXRpb25cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbmRlck1hcmtkb3duKFxuICBtYXJrZG93blRleHRzOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nLFxuICBncmFtbWFyTmFtZTogc3RyaW5nID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpPy5nZXRHcmFtbWFyKCkuc2NvcGVOYW1lPy50b0xvd2VyQ2FzZSgpIHx8IFwiXCIsXG4gIHJlbmRlcmVyPzogTWFya2Rvd25TZXJ2aWNlXG4pOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgaWYgKG1hcmtkb3duVGV4dHMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBsZXQgbWFya2Rvd25UZXh0ID0gXCJcIlxuICAvLyBpZiBBcnJheVxuICBpZiAoQXJyYXkuaXNBcnJheShtYXJrZG93blRleHRzKSkge1xuICAgIGlmIChtYXJrZG93blRleHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgbWFya2Rvd25UZXh0ID0gKG1hcmtkb3duVGV4dHMgYXMgQXJyYXk8c3RyaW5nPikuam9pbihcIlxcclxcblwiKVxuICB9XG4gIC8vIGlmIHN0cmluZ1xuICBlbHNlIHtcbiAgICBtYXJrZG93blRleHQgPSBtYXJrZG93blRleHRzXG4gIH1cbiAgaWYgKHJlbmRlcmVyKSB7XG4gICAgcmV0dXJuIERPTVB1cmlmeS5zYW5pdGl6ZShhd2FpdCByZW5kZXJlci5yZW5kZXIobWFya2Rvd25UZXh0LCBncmFtbWFyTmFtZSkpXG4gIH0gZWxzZSB7XG4gICAgLy8gVXNlIGJ1aWx0LWluIG1hcmtkb3duIHJlbmRlcmVyIChpdCBhbHJlYWR5IGRvZXMgc2FuaXRpemF0aW9uKVxuICAgIGNvbnN0IHJlbmRlciA9IGF3YWl0IGdldE1hcmtkb3duUmVuZGVyZXIoKVxuICAgIHJldHVybiByZW5kZXIobWFya2Rvd25UZXh0LCBncmFtbWFyTmFtZSlcbiAgfVxufVxuIl19