"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const convert_1 = require("../convert");
const apply_edit_adapter_1 = require("./apply-edit-adapter");
const languageclient_1 = require("../languageclient");
class CodeActionAdapter {
    /** @returns A {Boolean} indicating this adapter can adapt the server based on the given serverCapabilities. */
    static canAdapt(serverCapabilities) {
        return serverCapabilities.codeActionProvider === true;
    }
    /**
     * Public: Retrieves code actions for a given editor, range, and context (diagnostics). Throws an error if
     * codeActionProvider is not a registered capability.
     *
     * @param connection A {LanguageClientConnection} to the language server that provides highlights.
     * @param serverCapabilities The {ServerCapabilities} of the language server that will be used.
     * @param editor The Atom {TextEditor} containing the diagnostics.
     * @param range The Atom {Range} to fetch code actions for.
     * @param linterMessages An {Array<linter$Message>} to fetch code actions for. This is typically a list of messages
     *   intersecting `range`.
     * @returns A {Promise} of an {Array} of {atomIde$CodeAction}s to display.
     */
    static getCodeActions(connection, serverCapabilities, linterAdapter, editor, range, linterMessages, filterActions = (actions) => actions, onApply = () => Promise.resolve(true)) {
        return __awaiter(this, void 0, void 0, function* () {
            if (linterAdapter == null) {
                return [];
            }
            assert(serverCapabilities.codeActionProvider, "Must have the textDocument/codeAction capability");
            const params = createCodeActionParams(linterAdapter, editor, range, linterMessages);
            const actions = filterActions(yield connection.codeAction(params));
            if (actions === null) {
                return [];
            }
            return actions.map((action) => CodeActionAdapter.createCodeAction(action, connection, onApply));
        });
    }
    static createCodeAction(action, connection, onApply) {
        return {
            apply() {
                return __awaiter(this, void 0, void 0, function* () {
                    if (!(yield onApply(action))) {
                        return;
                    }
                    if (languageclient_1.CodeAction.is(action)) {
                        CodeActionAdapter.applyWorkspaceEdit(action.edit);
                        yield CodeActionAdapter.executeCommand(action.command, connection);
                    }
                    else {
                        yield CodeActionAdapter.executeCommand(action, connection);
                    }
                });
            },
            getTitle() {
                return Promise.resolve(action.title);
            },
            dispose() { },
        };
    }
    static applyWorkspaceEdit(edit) {
        if (languageclient_1.WorkspaceEdit.is(edit)) {
            apply_edit_adapter_1.default.onApplyEdit({ edit });
        }
    }
    static executeCommand(command, connection) {
        return __awaiter(this, void 0, void 0, function* () {
            if (languageclient_1.Command.is(command)) {
                yield connection.executeCommand({
                    command: command.command,
                    arguments: command.arguments,
                });
            }
        });
    }
}
exports.default = CodeActionAdapter;
function createCodeActionParams(linterAdapter, editor, range, linterMessages) {
    let diagnostics;
    if (linterMessages.length === 0) {
        diagnostics = [];
    }
    else {
        // TODO compile time dispatch using function names
        diagnostics = areLinterMessages(linterMessages)
            ? linterAdapter.getLSDiagnosticsForMessages(linterMessages)
            : linterAdapter.getLSDiagnosticsForIdeDiagnostics(linterMessages, editor);
    }
    return {
        textDocument: convert_1.default.editorToTextDocumentIdentifier(editor),
        range: convert_1.default.atomRangeToLSRange(range),
        context: {
            diagnostics,
        },
    };
}
function areLinterMessages(linterMessages) {
    if ("excerpt" in linterMessages[0]) {
        return true;
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,