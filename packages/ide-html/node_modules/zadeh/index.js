function e(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0})}function t(...e){if("string"!=typeof e[0]||"number"!=typeof e[1]||"boolean"!=typeof e[2]||"boolean"!=typeof e[3])throw Error("Invalid arguments for filter: "+e)}function r(...e){if(!Array.isArray(e[0]))throw Error("Invalid arguments for setArrayFiltererCandidates: "+e)}function n(e){void 0===e.usePathScoring&&(e.usePathScoring=!0),void 0===e.pathSeparator&&(e.pathSeparator=h)}function o(e){void 0===e.maxResults&&(e.maxResults=0),n(e)}function i(e,t,r={}){if(!e||!t)return console.warn(`Zadeh: bad input to filter candidates: ${e}, query: ${t}`),[];if("object"==typeof e[0]&&r.key)return m&&(console.warn("Zadeh: deprecated function. Use 'ObjectArrayFilterer' instead"),m=!1),new y(e,r.key).filter(t,r);if("string"==typeof e[0])return g&&(console.warn("Zadeh: deprecated function. Use 'StringArrayFilterer' instead"),g=!1),new p(e).filter(t,r);throw Error(`Zadeh: bad input to filter candidates: ${e}, query: ${t}, options: ${r}`)}function s(e,t,r={}){if(!e||!t)return console.warn(`Zadeh: bad input to score candidates: ${e}, query: ${t}`),0;n(r);const o=!!r.usePathScoring,i=!!r.useExtensionBonus;return((...e)=>{if("string"!=typeof e[0]||"string"!=typeof e[1]||"boolean"!=typeof e[2]||"boolean"!=typeof e[3])throw Error("Invalid arguments for score: "+e)})(e,t,o,i),f.score(e,t,o,i)}function a(e,t,r={}){if(!e||!t)return console.warn(`Zadeh: bad input to match str: ${e}, query: ${t}`),[];if(e===t)return Array.from(Array(e.length).keys());n(r);const o=r.pathSeparator;return((...e)=>{if("string"!=typeof e[0]||"string"!=typeof e[1]||"string"!=typeof e[2]||1!==e[2].length)throw Error("Invalid arguments for match: "+e)})(e,t,o),f.match(e,t,o)}function d(e,t,r={}){if(!e||!t)return console.warn(`Zadeh: bad input to wrap str: ${e}, query: ${t}`),[];n(r);const o=r.pathSeparator;return((...e)=>{if("string"!=typeof e[0]||"string"!=typeof e[1]||"string"!=typeof e[2]||1!==e[2].length)throw Error("Invalid arguments for wrap: "+e)})(e,t,o),f.wrap(e,t,o)}function u(e,t={}){return console.warn("Zadeh: prepareQuery is deprecated. There is no major benefit by precomputing something just for the query. "),{}}var l,c=(l=require("node-gyp-build"))&&l.__esModule?l.default:l;e(module.exports,"score",(()=>s)),e(module.exports,"match",(()=>a)),e(module.exports,"StringArrayFilterer",(()=>p)),e(module.exports,"wrap",(()=>d)),e(module.exports,"filter",(()=>i)),e(module.exports,"prepareQuery",(()=>u)),e(module.exports,"ObjectArrayFilterer",(()=>y)),e(module.exports,"TreeFilterer",(()=>b));const f=c(__dirname),h="win32"===process.platform?"\\":"/";class p{constructor(e){this.obj=new f.Zadeh,void 0!==e?this.setCandidates(e):this.candidates=[]}setCandidates(e){return this.candidates=e,r(e),this.obj.setArrayFiltererCandidates(e)}filter(e,t={}){return this.filterIndices(e,t).map((e=>this.candidates[e]))}filterIndices(e,r={}){o(r);const n=r.maxResults,i=!!r.usePathScoring,s=!!r.useExtensionBonus;return t(e,n,i,s),this.obj.filterIndices(e,n,i,s)}}class y{constructor(e,t){this.obj=new f.Zadeh,void 0!==e&&void 0!==t?this.setCandidates(e,t):this.candidates=[]}setCandidates(e,t){this.candidates=e;const n=e.map((e=>e[t]));r(n),this.obj.setArrayFiltererCandidates(n)}filter(e,t={}){return this.filterIndices(e,t).map((e=>this.candidates[e]))}filterIndices(e,r={}){o(r);const n=r.maxResults,i=!!r.usePathScoring,s=!!r.useExtensionBonus;return t(e,n,i,s),0===e.length?[]:this.obj.filterIndices(e,n,i,s)}}let g=!0,m=!0;class b{constructor(e,t="data",r="children"){this.obj=new f.Zadeh,e?this.setCandidates(e,t,r):this.candidates=[]}setCandidates(e,t="data",r="children"){return this.candidates=e,((...e)=>{if(!Array.isArray(e[0])||"string"!=typeof e[1]||"string"!=typeof e[2])throw Error("Invalid arguments for setTreeFiltererCandidates: "+e)})(e,t,r),this.obj.setTreeFiltererCandidates(e,t,r)}filter(e,t={}){o(t);const r=t.maxResults,n=!!t.usePathScoring,i=!!t.useExtensionBonus;return((...e)=>{if("string"!=typeof e[0]||"number"!=typeof e[1]||"boolean"!=typeof e[2]||"boolean"!=typeof e[3])throw Error("Invalid arguments for filterTree: "+e)})(e,r,n,i),0===e.length?[]:this.obj.filterTree(e,r,n,i)}filterIndices(e,t={}){return n(t),0===e.length?[]:this.obj.filterIndicesTree(e,null!==(r=t.maxResults)&&void 0!==r?r:0,!!t.usePathScoring,!!t.useExtensionBonus);var r}}
//# sourceMappingURL=index.js.map
