"use strict";

const cp = require("child_process");

const {
  Directory
} = require("atom");

const VIRTUAL_ENV_BIN_DIRS = ["bin", "Scripts"];
const VIRTUAL_ENV_EXECUTABLES = ["python", "python.exe"];

function detectPipEnv(path) {
  return new Promise(resolve => {
    const pipEnvProcess = cp.spawn("pipenv", ["--venv"], {
      cwd: path
    });
    pipEnvProcess.stdout.on("data", data => {
      resolve(`${data}`.trim());
    });
    pipEnvProcess.stderr.on("data", () => {
      resolve(null);
    });
    pipEnvProcess.on("error", () => {
      resolve(null);
    });
  });
}

async function detectVirtualEnv(path) {
  const entries = await new Promise(resolve => {
    new Directory(path).getEntries((error, resolvedEntries) => {
      if (error === null) {
        resolve(resolvedEntries);
      } else {
        resolve(null);
      }
    });
  });

  if (entries) {
    for (const entry of entries) {
      if (entry.isDirectory()) {
        if (VIRTUAL_ENV_BIN_DIRS.indexOf(entry.getBaseName()) !== -1) {
          for (const executable of VIRTUAL_ENV_EXECUTABLES) {
            /* eslint-disable-next-line no-await-in-loop */
            if (await entry.getFile(executable).exists()) {
              return path;
            }
          }
        } else {
          for (const dir_name of VIRTUAL_ENV_BIN_DIRS) {
            for (const executable of VIRTUAL_ENV_EXECUTABLES) {
              /* eslint-disable-next-line no-await-in-loop */
              if (await entry.getSubdirectory(dir_name).getFile(executable).exists()) {
                return entry.getPath();
              }
            }
          }
        }
      }
    }
  }
}

function sanitizeConfig(config) {
  Object.entries(config).forEach(([key, value]) => {
    if (value === "null") {
      config[key] = null;
    }
  });
  return config;
}

function replacePipEnvPathVar(pythonPath, pipEnvPath) {
  if (pythonPath.indexOf("$PIPENV_PATH") !== -1 && pipEnvPath) {
    return pythonPath.replace("$PIPENV_PATH", pipEnvPath);
  }

  return pythonPath;
}

exports.detectVirtualEnv = detectVirtualEnv;
exports.sanitizeConfig = sanitizeConfig;
exports.detectPipEnv = detectPipEnv;
exports.replacePipEnvPathVar = replacePipEnvPathVar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbImNwIiwicmVxdWlyZSIsIkRpcmVjdG9yeSIsIlZJUlRVQUxfRU5WX0JJTl9ESVJTIiwiVklSVFVBTF9FTlZfRVhFQ1VUQUJMRVMiLCJkZXRlY3RQaXBFbnYiLCJwYXRoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwaXBFbnZQcm9jZXNzIiwic3Bhd24iLCJjd2QiLCJzdGRvdXQiLCJvbiIsImRhdGEiLCJ0cmltIiwic3RkZXJyIiwiZGV0ZWN0VmlydHVhbEVudiIsImVudHJpZXMiLCJnZXRFbnRyaWVzIiwiZXJyb3IiLCJyZXNvbHZlZEVudHJpZXMiLCJlbnRyeSIsImlzRGlyZWN0b3J5IiwiaW5kZXhPZiIsImdldEJhc2VOYW1lIiwiZXhlY3V0YWJsZSIsImdldEZpbGUiLCJleGlzdHMiLCJkaXJfbmFtZSIsImdldFN1YmRpcmVjdG9yeSIsImdldFBhdGgiLCJzYW5pdGl6ZUNvbmZpZyIsImNvbmZpZyIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsInJlcGxhY2VQaXBFbnZQYXRoVmFyIiwicHl0aG9uUGF0aCIsInBpcEVudlBhdGgiLCJyZXBsYWNlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQWxCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFnQkQsT0FBTyxDQUFDLE1BQUQsQ0FBN0I7O0FBRUEsTUFBTUUsb0JBQW9CLEdBQUcsQ0FBQyxLQUFELEVBQVEsU0FBUixDQUE3QjtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLENBQUMsUUFBRCxFQUFXLFlBQVgsQ0FBaEM7O0FBRUEsU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEI7QUFDMUIsU0FBTyxJQUFJQyxPQUFKLENBQWFDLE9BQUQsSUFBYTtBQUM5QixVQUFNQyxhQUFhLEdBQUdULEVBQUUsQ0FBQ1UsS0FBSCxDQUFTLFFBQVQsRUFBbUIsQ0FBQyxRQUFELENBQW5C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LE9BQU8sQ0FBQ3pCLGdCQUFSLEdBQTJCQSxnQkFBM0I7QUFDQXlCLE9BQU8sQ0FBQ1YsY0FBUixHQUF5QkEsY0FBekI7QUFDQVUsT0FBTyxDQUFDckMsWUFBUixHQUF1QkEsWUFBdkI7QUFDQXFDLE9BQU8sQ0FBQ0osb0JBQVIsR0FBK0JBLG9CQUEvQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNwID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIilcbmNvbnN0IHsgRGlyZWN0b3J5IH0gPSByZXF1aXJlKFwiYXRvbVwiKVxuXG5jb25zdCBWSVJUVUFMX0VOVl9CSU5fRElSUyA9IFtcImJpblwiLCBcIlNjcmlwdHNcIl1cbmNvbnN0IFZJUlRVQUxfRU5WX0VYRUNVVEFCTEVTID0gW1wicHl0aG9uXCIsIFwicHl0aG9uLmV4ZVwiXVxuXG5mdW5jdGlvbiBkZXRlY3RQaXBFbnYocGF0aCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBjb25zdCBwaXBFbnZQcm9jZXNzID0gY3Auc3Bhd24oXCJwaXBlbnZcIiwgW1wiLS12ZW52XCJdLCB7XG4gICAgICBjd2Q6IHBhdGgsXG4gICAgfSlcbiAgICBwaXBFbnZQcm9jZXNzLnN0ZG91dC5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcbiAgICAgIHJlc29sdmUoYCR7ZGF0YX1gLnRyaW0oKSlcbiAgICB9KVxuICAgIHBpcEVudlByb2Nlc3Muc3RkZXJyLm9uKFwiZGF0YVwiLCAoKSA9PiB7XG4gICAgICByZXNvbHZlKG51bGwpXG4gICAgfSlcbiAgICBwaXBFbnZQcm9jZXNzLm9uKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgcmVzb2x2ZShudWxsKVxuICAgIH0pXG4gIH0pXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRldGVjdFZpcnR1YWxFbnYocGF0aCkge1xuICBjb25zdCBlbnRyaWVzID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBuZXcgRGlyZWN0b3J5KHBhdGgpLmdldEVudHJpZXMoKGVycm9yLCByZXNvbHZlZEVudHJpZXMpID0+IHtcbiAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xuICAgICAgICByZXNvbHZlKHJlc29sdmVkRW50cmllcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUobnVsbClcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuICBpZiAoZW50cmllcykge1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgaWYgKFZJUlRVQUxfRU5WX0JJTl9ESVJTLmluZGV4T2YoZW50cnkuZ2V0QmFzZU5hbWUoKSkgIT09IC0xKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBleGVjdXRhYmxlIG9mIFZJUlRVQUxfRU5WX0VYRUNVVEFCTEVTKSB7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcCAqL1xuICAgICAgICAgICAgaWYgKGF3YWl0IGVudHJ5LmdldEZpbGUoZXhlY3V0YWJsZSkuZXhpc3RzKCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhdGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChjb25zdCBkaXJfbmFtZSBvZiBWSVJUVUFMX0VOVl9CSU5fRElSUykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBleGVjdXRhYmxlIG9mIFZJUlRVQUxfRU5WX0VYRUNVVEFCTEVTKSB7XG4gICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wICovXG4gICAgICAgICAgICAgIGlmIChhd2FpdCBlbnRyeS5nZXRTdWJkaXJlY3RvcnkoZGlyX25hbWUpLmdldEZpbGUoZXhlY3V0YWJsZSkuZXhpc3RzKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkuZ2V0UGF0aCgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2FuaXRpemVDb25maWcoY29uZmlnKSB7XG4gIE9iamVjdC5lbnRyaWVzKGNvbmZpZykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBcIm51bGxcIikge1xuICAgICAgY29uZmlnW2tleV0gPSBudWxsXG4gICAgfVxuICB9KVxuICByZXR1cm4gY29uZmlnXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VQaXBFbnZQYXRoVmFyKHB5dGhvblBhdGgsIHBpcEVudlBhdGgpIHtcbiAgaWYgKHB5dGhvblBhdGguaW5kZXhPZihcIiRQSVBFTlZfUEFUSFwiKSAhPT0gLTEgJiYgcGlwRW52UGF0aCkge1xuICAgIHJldHVybiBweXRob25QYXRoLnJlcGxhY2UoXCIkUElQRU5WX1BBVEhcIiwgcGlwRW52UGF0aClcbiAgfVxuICByZXR1cm4gcHl0aG9uUGF0aFxufVxuXG5leHBvcnRzLmRldGVjdFZpcnR1YWxFbnYgPSBkZXRlY3RWaXJ0dWFsRW52XG5leHBvcnRzLnNhbml0aXplQ29uZmlnID0gc2FuaXRpemVDb25maWdcbmV4cG9ydHMuZGV0ZWN0UGlwRW52ID0gZGV0ZWN0UGlwRW52XG5leHBvcnRzLnJlcGxhY2VQaXBFbnZQYXRoVmFyID0gcmVwbGFjZVBpcEVudlBhdGhWYXJcbiJdfQ==