"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnippetHtml = exports.SnippetView = void 0;
const solid_js_1 = require("solid-js");
const dompurify_1 = __importDefault(require("dompurify"));
const MarkdownRenderer_1 = require("../MarkdownRenderer");
/** A React component that hosts a code snippet with syntax highlighting */
function SnippetView(props) {
    const [getSnippet, setSnippet] = solid_js_1.createSignal("");
    solid_js_1.onMount(async () => {
        var _a;
        setSnippet((_a = (await getSnippetHtml(props.snippet, props.grammarName, props.renderer))) !== null && _a !== void 0 ? _a : "");
    });
    return (<div className={props.containerClassName} onWheel={onWheel}>
      <div className={props.contentClassName} innerHTML={getSnippet()}/>
    </div>);
}
exports.SnippetView = SnippetView;
/**
 * Handles the mouse wheel event to enable scrolling over long text
 *
 * @param evt The mouse wheel event being triggered
 */
function onWheel(evt) {
    return evt.stopPropagation();
}
const regexPremeable = /^\s*<([!?])([a-z]+)?\s*/i;
const regexLSPPrefix = /^\((method|property|parameter|alias)\)\W/;
/**
 * Converts a given code snippet into syntax formatted HTML
 *
 * @param snippets The code snippet to be converted
 * @param grammarName The name of the grammar to be used for syntax highlighting
 * @param renderer Markdown service to be used for rendering
 * @returns A promise object to track the asynchronous operation
 */
async function getSnippetHtml(snipetsGiven, grammarName, renderer) {
    var _a, _b;
    if (grammarName === void 0) { grammarName = ((_b = (_a = atom.workspace.getActiveTextEditor()) === null || _a === void 0 ? void 0 : _a.getGrammar().scopeName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || ""; }
    if (snipetsGiven === undefined) {
        return null;
    }
    let snippets = snipetsGiven;
    // if string
    if (typeof snippets === "string") {
        snippets = [snippets];
    }
    // if Array
    if (Array.isArray(snippets)) {
        if (snippets.length === 0) {
            return null;
        }
        const markdown = snippets
            .map((snippet) => {
            const snp = snippet
                .replace(regexPremeable, "") // remove any preamble from the line
                .replace(regexLSPPrefix, ""); // remove LSP prefix
            return `\`\`\`\n${snp}\n\`\`\``;
        })
            .join("\n");
        if (renderer) {
            return dompurify_1.default.sanitize(await renderer.render(markdown, grammarName));
        }
        else {
            // Use built-in markdown renderer (it already does sanitization)
            const render = await MarkdownRenderer_1.getMarkdownRenderer();
            return render(markdown, grammarName);
        }
    }
    else {
        return null;
    }
}
exports.getSnippetHtml = getSnippetHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU25pcHBldFZpZXcuanN4Iiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLWNvbW1vbnMtdWkvZmxvYXQtcGFuZS9TbmlwcGV0Vmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQWdEO0FBQ2hELDBEQUFpQztBQUVqQywwREFBeUQ7QUFVekQsMkVBQTJFO0FBQzNFLFNBQWdCLFdBQVcsQ0FBQyxLQUFZO0lBQ3RDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsdUJBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVqRCxrQkFBTyxDQUFDLEtBQUssSUFBSSxFQUFFOztRQUNqQixVQUFVLENBQUMsTUFBQSxDQUFDLE1BQU0sY0FBYyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUE7SUFDNUYsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLENBQ0wsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQ3pEO01BQUEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsRUFDbEU7SUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUNQLENBQUE7QUFDSCxDQUFDO0FBWkQsa0NBWUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBUyxPQUFPLENBQUMsR0FBZTtJQUM5QixPQUFPLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtBQUM5QixDQUFDO0FBRUQsTUFBTSxjQUFjLEdBQUcsMEJBQTBCLENBQUE7QUFDakQsTUFBTSxjQUFjLEdBQUcsMENBQTBDLENBQUE7QUFFakU7Ozs7Ozs7R0FPRztBQUNJLEtBQUssVUFBVSxjQUFjLENBQ2xDLFlBQW9DLEVBQ3BDLFdBQXVHLEVBQ3ZHLFFBQTBCOztnQ0FEMUIsRUFBQSxlQUFzQixNQUFBLE1BQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSwwQ0FBRSxVQUFVLEdBQUcsU0FBUywwQ0FBRSxXQUFXLEVBQUUsS0FBSSxFQUFFO0lBR3ZHLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtRQUM5QixPQUFPLElBQUksQ0FBQTtLQUNaO0lBQ0QsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFBO0lBRTNCLFlBQVk7SUFDWixJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUNoQyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtLQUN0QjtJQUVELFdBQVc7SUFDWCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDM0IsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQTtTQUNaO1FBQ0QsTUFBTSxRQUFRLEdBQUcsUUFBUTthQUN0QixHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNmLE1BQU0sR0FBRyxHQUFHLE9BQU87aUJBQ2hCLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUMsb0NBQW9DO2lCQUNoRSxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFBLENBQUMsb0JBQW9CO1lBQ25ELE9BQU8sV0FBVyxHQUFHLFVBQVUsQ0FBQTtRQUNqQyxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFYixJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sbUJBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFBO1NBQ3hFO2FBQU07WUFDTCxnRUFBZ0U7WUFDaEUsTUFBTSxNQUFNLEdBQUcsTUFBTSxzQ0FBbUIsRUFBRSxDQUFBO1lBQzFDLE9BQU8sTUFBTSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQTtTQUNyQztLQUNGO1NBQU07UUFDTCxPQUFPLElBQUksQ0FBQTtLQUNaO0FBQ0gsQ0FBQztBQXZDRCx3Q0F1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTaWduYWwsIG9uTW91bnQgfSBmcm9tIFwic29saWQtanNcIlxuaW1wb3J0IERPTVB1cmlmeSBmcm9tIFwiZG9tcHVyaWZ5XCJcbmltcG9ydCB7IE1hcmtkb3duU2VydmljZSB9IGZyb20gXCIuLi8uLi90eXBlcy1wYWNrYWdlcy9tYWluXCJcbmltcG9ydCB7IGdldE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwiLi4vTWFya2Rvd25SZW5kZXJlclwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICBzbmlwcGV0OiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nXG4gIGdyYW1tYXJOYW1lPzogc3RyaW5nXG4gIHJlbmRlcmVyPzogTWFya2Rvd25TZXJ2aWNlXG4gIGNvbnRhaW5lckNsYXNzTmFtZTogc3RyaW5nXG4gIGNvbnRlbnRDbGFzc05hbWU6IHN0cmluZ1xufVxuXG4vKiogQSBSZWFjdCBjb21wb25lbnQgdGhhdCBob3N0cyBhIGNvZGUgc25pcHBldCB3aXRoIHN5bnRheCBoaWdobGlnaHRpbmcgKi9cbmV4cG9ydCBmdW5jdGlvbiBTbmlwcGV0Vmlldyhwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgW2dldFNuaXBwZXQsIHNldFNuaXBwZXRdID0gY3JlYXRlU2lnbmFsKFwiXCIpXG5cbiAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgc2V0U25pcHBldCgoYXdhaXQgZ2V0U25pcHBldEh0bWwocHJvcHMuc25pcHBldCwgcHJvcHMuZ3JhbW1hck5hbWUsIHByb3BzLnJlbmRlcmVyKSkgPz8gXCJcIilcbiAgfSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtwcm9wcy5jb250YWluZXJDbGFzc05hbWV9IG9uV2hlZWw9e29uV2hlZWx9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3Byb3BzLmNvbnRlbnRDbGFzc05hbWV9IGlubmVySFRNTD17Z2V0U25pcHBldCgpfSAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgbW91c2Ugd2hlZWwgZXZlbnQgdG8gZW5hYmxlIHNjcm9sbGluZyBvdmVyIGxvbmcgdGV4dFxuICpcbiAqIEBwYXJhbSBldnQgVGhlIG1vdXNlIHdoZWVsIGV2ZW50IGJlaW5nIHRyaWdnZXJlZFxuICovXG5mdW5jdGlvbiBvbldoZWVsKGV2dDogV2hlZWxFdmVudCkge1xuICByZXR1cm4gZXZ0LnN0b3BQcm9wYWdhdGlvbigpXG59XG5cbmNvbnN0IHJlZ2V4UHJlbWVhYmxlID0gL15cXHMqPChbIT9dKShbYS16XSspP1xccyovaVxuY29uc3QgcmVnZXhMU1BQcmVmaXggPSAvXlxcKChtZXRob2R8cHJvcGVydHl8cGFyYW1ldGVyfGFsaWFzKVxcKVxcVy9cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGdpdmVuIGNvZGUgc25pcHBldCBpbnRvIHN5bnRheCBmb3JtYXR0ZWQgSFRNTFxuICpcbiAqIEBwYXJhbSBzbmlwcGV0cyBUaGUgY29kZSBzbmlwcGV0IHRvIGJlIGNvbnZlcnRlZFxuICogQHBhcmFtIGdyYW1tYXJOYW1lIFRoZSBuYW1lIG9mIHRoZSBncmFtbWFyIHRvIGJlIHVzZWQgZm9yIHN5bnRheCBoaWdobGlnaHRpbmdcbiAqIEBwYXJhbSByZW5kZXJlciBNYXJrZG93biBzZXJ2aWNlIHRvIGJlIHVzZWQgZm9yIHJlbmRlcmluZ1xuICogQHJldHVybnMgQSBwcm9taXNlIG9iamVjdCB0byB0cmFjayB0aGUgYXN5bmNocm9ub3VzIG9wZXJhdGlvblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U25pcHBldEh0bWwoXG4gIHNuaXBldHNHaXZlbjogQXJyYXk8c3RyaW5nPiB8IHN0cmluZyxcbiAgZ3JhbW1hck5hbWU6IHN0cmluZyA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKT8uZ2V0R3JhbW1hcigpLnNjb3BlTmFtZT8udG9Mb3dlckNhc2UoKSB8fCBcIlwiLFxuICByZW5kZXJlcj86IE1hcmtkb3duU2VydmljZVxuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gIGlmIChzbmlwZXRzR2l2ZW4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgbGV0IHNuaXBwZXRzID0gc25pcGV0c0dpdmVuXG5cbiAgLy8gaWYgc3RyaW5nXG4gIGlmICh0eXBlb2Ygc25pcHBldHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICBzbmlwcGV0cyA9IFtzbmlwcGV0c11cbiAgfVxuXG4gIC8vIGlmIEFycmF5XG4gIGlmIChBcnJheS5pc0FycmF5KHNuaXBwZXRzKSkge1xuICAgIGlmIChzbmlwcGV0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIGNvbnN0IG1hcmtkb3duID0gc25pcHBldHNcbiAgICAgIC5tYXAoKHNuaXBwZXQpID0+IHtcbiAgICAgICAgY29uc3Qgc25wID0gc25pcHBldFxuICAgICAgICAgIC5yZXBsYWNlKHJlZ2V4UHJlbWVhYmxlLCBcIlwiKSAvLyByZW1vdmUgYW55IHByZWFtYmxlIGZyb20gdGhlIGxpbmVcbiAgICAgICAgICAucmVwbGFjZShyZWdleExTUFByZWZpeCwgXCJcIikgLy8gcmVtb3ZlIExTUCBwcmVmaXhcbiAgICAgICAgcmV0dXJuIGBcXGBcXGBcXGBcXG4ke3NucH1cXG5cXGBcXGBcXGBgXG4gICAgICB9KVxuICAgICAgLmpvaW4oXCJcXG5cIilcblxuICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgcmV0dXJuIERPTVB1cmlmeS5zYW5pdGl6ZShhd2FpdCByZW5kZXJlci5yZW5kZXIobWFya2Rvd24sIGdyYW1tYXJOYW1lKSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXNlIGJ1aWx0LWluIG1hcmtkb3duIHJlbmRlcmVyIChpdCBhbHJlYWR5IGRvZXMgc2FuaXRpemF0aW9uKVxuICAgICAgY29uc3QgcmVuZGVyID0gYXdhaXQgZ2V0TWFya2Rvd25SZW5kZXJlcigpXG4gICAgICByZXR1cm4gcmVuZGVyKG1hcmtkb3duLCBncmFtbWFyTmFtZSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuIl19