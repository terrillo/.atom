"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCallHierarchy = exports.canAdapt = void 0;
const convert_1 = require("../convert");
const Utils = require("../utils");
const languageclient_1 = require("../languageclient");
const outline_view_adapter_1 = require("./outline-view-adapter");
const cancellationTokens = new WeakMap();
/**
 * Public: Determine whether this adapter can be used to adapt a language server based on the serverCapabilities matrix
 * containing a callHierarchyProvider.
 *
 * @param serverCapabilities The {ServerCapabilities} of the language server to consider.
 * @returns A {Boolean} indicating adapter can adapt the server based on the given serverCapabilities.
 */
function canAdapt(serverCapabilities) {
    return Boolean(serverCapabilities.callHierarchyProvider);
}
exports.canAdapt = canAdapt;
/**
 * Public: Obtain the relationship between calling and called functions hierarchically. Corresponds to lsp's
 * CallHierarchyPrepareRequest.
 *
 * @param connection A {LanguageClientConnection} to the language server that provides highlights.
 * @param editor The Atom {TextEditor} containing the text associated with the calling.
 * @param position The Atom {Point} associated with the calling.
 * @param type The hierarchy type either incoming or outgoing.
 * @returns A {Promise} of an {CallHierarchy}.
 */
function getCallHierarchy(connection, editor, point, type) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const results = yield Utils.doWithCancellationToken(connection, cancellationTokens, (cancellationToken) => connection.prepareCallHierarchy({
            textDocument: convert_1.default.editorToTextDocumentIdentifier(editor),
            position: convert_1.default.pointToPosition(point),
        }, cancellationToken));
        return {
            type,
            data: (_a = results === null || results === void 0 ? void 0 : results.map(convertCallHierarchyItem)) !== null && _a !== void 0 ? _a : [],
            itemAt(num) {
                if (type === "incoming") {
                    return getIncoming(this.connection, this.data[num].rawData);
                }
                else {
                    return getOutgoing(this.connection, this.data[num].rawData);
                }
            },
            connection,
        };
    });
}
exports.getCallHierarchy = getCallHierarchy;
/** Corresponds to lsp's CallHierarchyIncomingCallsRequest. */
function getIncoming(connection, item) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const results = yield Utils.doWithCancellationToken(connection, cancellationTokens, (_cancellationToken) => connection.callHierarchyIncomingCalls({ item }));
        return {
            type: "incoming",
            data: (_a = results === null || results === void 0 ? void 0 : results.map((res) => convertCallHierarchyItem(res.from))) !== null && _a !== void 0 ? _a : [],
            itemAt(num) {
                return getIncoming(this.connection, this.data[num].rawData);
            },
            connection,
        };
    });
}
/** Corresponds to lsp's CallHierarchyOutgoingCallsRequest. */
function getOutgoing(connection, item) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const results = yield Utils.doWithCancellationToken(connection, cancellationTokens, (_cancellationToken) => connection.callHierarchyOutgoingCalls({ item }));
        return {
            type: "outgoing",
            data: (_a = results === null || results === void 0 ? void 0 : results.map((res) => convertCallHierarchyItem(res.to))) !== null && _a !== void 0 ? _a : [],
            itemAt(num) {
                return getOutgoing(this.connection, this.data[num].rawData);
            },
            connection,
        };
    });
}
function convertCallHierarchyItem(rawData) {
    var _a;
    return {
        path: convert_1.default.uriToPath(rawData.uri),
        name: rawData.name,
        icon: (_a = outline_view_adapter_1.default.symbolKindToEntityKind(rawData.kind)) !== null && _a !== void 0 ? _a : undefined,
        tags: rawData.tags
            ? [
                ...rawData.tags.reduce((set, tag) => {
                    // filter out null and remove duplicates
                    const entity = symbolTagToEntityKind(tag);
                    return entity === null ? set : set.add(entity);
                }, new Set()),
            ]
            : [],
        detail: rawData.detail,
        range: convert_1.default.lsRangeToAtomRange(rawData.range),
        selectionRange: convert_1.default.lsRangeToAtomRange(rawData.selectionRange),
        rawData,
    };
}
function symbolTagToEntityKind(symbol) {
    switch (symbol) {
        case languageclient_1.SymbolTag.Deprecated:
            return "deprecated";
        default:
            return null;
    }
}
//# sourceMappingURL=data:application/json;base64,