"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageClientConnection = void 0;
const cp = require("child_process");
const rpc = require("vscode-jsonrpc");
const rpcNode = require("vscode-jsonrpc/node");
const path = require("path");
const convert_js_1 = require("./convert.js");
const apply_edit_adapter_1 = require("./adapters/apply-edit-adapter");
const autocomplete_adapter_1 = require("./adapters/autocomplete-adapter");
const CallHierarchyAdapter = require("./adapters/call-hierarchy-adapter");
const code_action_adapter_1 = require("./adapters/code-action-adapter");
const code_format_adapter_1 = require("./adapters/code-format-adapter");
const code_highlight_adapter_1 = require("./adapters/code-highlight-adapter");
const datatip_adapter_1 = require("./adapters/datatip-adapter");
const definition_adapter_1 = require("./adapters/definition-adapter");
const document_sync_adapter_1 = require("./adapters/document-sync-adapter");
const find_references_adapter_1 = require("./adapters/find-references-adapter");
const linter_push_v2_adapter_1 = require("./adapters/linter-push-v2-adapter");
const logging_console_adapter_1 = require("./adapters/logging-console-adapter");
const notifications_adapter_1 = require("./adapters/notifications-adapter");
const outline_view_adapter_1 = require("./adapters/outline-view-adapter");
const rename_adapter_1 = require("./adapters/rename-adapter");
const signature_help_adapter_1 = require("./adapters/signature-help-adapter");
const ShowDocumentAdapter = require("./adapters/show-document-adapter");
const Utils = require("./utils");
const languageclient_1 = require("./languageclient");
Object.defineProperty(exports, "LanguageClientConnection", { enumerable: true, get: function () { return languageclient_1.LanguageClientConnection; } });
const logger_1 = require("./logger");
const server_manager_js_1 = require("./server-manager.js");
const atom_1 = require("atom");
const path_1 = require("path");
/**
 * Public: AutoLanguageClient provides a simple way to have all the supported Atom-IDE services wired up entirely for
 * you by just subclassing it and implementing at least
 *
 * - `startServerProcess`
 * - `getGrammarScopes`
 * - `getLanguageName`
 * - `getServerName`
 */
class AutoLanguageClient {
    constructor() {
        this._isDeactivating = false;
        this._serverAdapters = new WeakMap();
        this.processStdErr = "";
        /**
         * If this is set to `true` (the default value), the servers will shut down gracefully. If it is set to `false`, the
         * servers will be killed without awaiting shutdown response.
         */
        this.shutdownGracefully = true;
        this.reportBusyWhile = (title, f) => __awaiter(this, void 0, void 0, function* () {
            if (this.busySignalService) {
                return this.busySignalService.reportBusyWhile(title, f);
            }
            else {
                return this.reportBusyWhileDefault(title, f);
            }
        });
        this.reportBusyWhileDefault = (title, f) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`[Started] ${title}`);
            let res;
            try {
                res = yield f();
            }
            finally {
                this.logger.info(`[Finished] ${title}`);
            }
            return res;
        });
    }
    // You must implement these so we know how to deal with your language and server
    // -------------------------------------------------------------------------
    /** Return an array of the grammar scopes you handle, e.g. [ 'source.js' ] */
    getGrammarScopes() {
        throw Error("Must implement getGrammarScopes when extending AutoLanguageClient");
    }
    /** Return the name of the language you support, e.g. 'JavaScript' */
    getLanguageName() {
        throw Error("Must implement getLanguageName when extending AutoLanguageClient");
    }
    /** Return the name of your server, e.g. 'Eclipse JDT' */
    getServerName() {
        throw Error("Must implement getServerName when extending AutoLanguageClient");
    }
    /** Start your server process */
    startServerProcess(_projectPath) {
        throw Error("Must override startServerProcess to start language server process when extending AutoLanguageClient");
    }
    // You might want to override these for different behavior
    // ---------------------------------------------------------------------------
    /** (Optional) Determine whether we should start a server for a given editor if we don't have one yet */
    shouldStartForEditor(editor) {
        return this.getGrammarScopes().includes(editor.getGrammar().scopeName);
    }
    /** (Optional) Return the parameters used to initialize a client - you may want to extend capabilities */
    getInitializeParams(projectPath, lsProcess) {
        const rootUri = convert_js_1.default.pathToUri(projectPath);
        return {
            processId: lsProcess.pid !== undefined ? lsProcess.pid : null,
            rootPath: projectPath,
            rootUri,
            locale: atom.config.get("atom-i18n.locale") || "en",
            workspaceFolders: [{ uri: rootUri, name: path_1.basename(projectPath) }],
            // The capabilities supported.
            // TODO the capabilities set to false/undefined are TODO. See {ls.ServerCapabilities} for a full list.
            capabilities: {
                workspace: {
                    applyEdit: true,
                    configuration: false,
                    workspaceEdit: {
                        documentChanges: true,
                        normalizesLineEndings: false,
                        changeAnnotationSupport: undefined,
                        resourceOperations: ["create", "rename", "delete"],
                    },
                    workspaceFolders: true,
                    didChangeConfiguration: {
                        dynamicRegistration: false,
                    },
                    didChangeWatchedFiles: {
                        dynamicRegistration: false,
                    },
                    // BLOCKED: on atom/symbols-view
                    symbol: {
                        dynamicRegistration: false,
                    },
                    executeCommand: {
                        dynamicRegistration: false,
                    },
                    semanticTokens: undefined,
                    codeLens: undefined,
                    fileOperations: {
                        // BLOCKED: on tree-view not providing hooks for "before file/dir created"
                        willCreate: false,
                        // BLOCKED: on tree-view not providing hooks for "before file/dir renamed"
                        willRename: false,
                        // BLOCKED: on tree-view not providing hooks for "before file/dir deleted"
                        willDelete: false,
                    },
                },
                textDocument: {
                    synchronization: {
                        dynamicRegistration: false,
                        willSave: true,
                        willSaveWaitUntil: true,
                        didSave: true,
                    },
                    completion: {
                        dynamicRegistration: false,
                        completionItem: {
                            snippetSupport: true,
                            commitCharactersSupport: false,
                            documentationFormat: [],
                            deprecatedSupport: false,
                            preselectSupport: false,
                            tagSupport: {
                                valueSet: [],
                            },
                            insertReplaceSupport: false,
                            resolveSupport: {
                                properties: [],
                            },
                            insertTextModeSupport: {
                                valueSet: [],
                            },
                        },
                        completionItemKind: {
                            valueSet: [],
                        },
                        contextSupport: true,
                    },
                    hover: {
                        dynamicRegistration: false,
                    },
                    signatureHelp: {
                        dynamicRegistration: false,
                    },
                    declaration: undefined,
                    references: {
                        dynamicRegistration: false,
                    },
                    documentHighlight: {
                        dynamicRegistration: false,
                    },
                    documentSymbol: {
                        dynamicRegistration: false,
                        hierarchicalDocumentSymbolSupport: true,
                    },
                    formatting: {
                        dynamicRegistration: false,
                    },
                    rangeFormatting: {
                        dynamicRegistration: false,
                    },
                    onTypeFormatting: {
                        dynamicRegistration: false,
                    },
                    definition: {
                        dynamicRegistration: false,
                    },
                    codeAction: {
                        dynamicRegistration: false,
                        codeActionLiteralSupport: {
                            codeActionKind: {
                                valueSet: [""], // TODO explicitly support more?
                            },
                        },
                    },
                    codeLens: {
                        dynamicRegistration: false,
                    },
                    documentLink: {
                        dynamicRegistration: false,
                    },
                    rename: {
                        dynamicRegistration: false,
                    },
                    moniker: {
                        dynamicRegistration: false,
                    },
                    publishDiagnostics: {
                        relatedInformation: true,
                        tagSupport: {
                            // BLOCKED: on steelbrain/linter supporting ways of denoting useless code and deprecated symbols
                            valueSet: [],
                        },
                        versionSupport: false,
                        codeDescriptionSupport: true,
                        dataSupport: true,
                    },
                    callHierarchy: {
                        dynamicRegistration: false,
                    },
                    implementation: undefined,
                    typeDefinition: undefined,
                    colorProvider: undefined,
                    foldingRange: undefined,
                    selectionRange: undefined,
                    linkedEditingRange: undefined,
                    semanticTokens: undefined,
                },
                general: {
                    regularExpressions: undefined,
                    markdown: undefined,
                },
                window: {
                    workDoneProgress: false,
                    showMessage: undefined,
                    showDocument: { support: true },
                },
                experimental: {},
            },
        };
    }
    /** (Optional) Early wire-up of listeners before initialize method is sent */
    preInitialization(_connection) { }
    /** (Optional) Late wire-up of listeners after initialize method has been sent */
    postInitialization(_server) { }
    /** (Optional) Determine whether to use ipc, stdio or socket to connect to the server */
    getConnectionType() {
        return this.socket != null ? "socket" : "stdio";
    }
    /** (Optional) Return the name of your root configuration key */
    getRootConfigurationKey() {
        return "";
    }
    /** (Optional) Transform the configuration object before it is sent to the server */
    mapConfigurationObject(configuration) {
        return configuration;
    }
    /**
     * (Optional) Determines the `languageId` string used for `textDocument/didOpen` notification. The default is to use
     * the grammar name.
     *
     * You can override this like this:
     *
     *     class MyLanguageClient extends AutoLanguageClient {
     *       getLanguageIdFromEditor(editor: TextEditor) {
     *         if (editor.getGrammar().scopeName === "source.myLanguage") {
     *           return "myCustumLanguageId"
     *         }
     *         return super.getLanguageIdFromEditor(editor)
     *       }
     *     }
     *
     * @param editor A {TextEditor} which is opened.
     * @returns A {string} of `languageId` used for `textDocument/didOpen` notification.
     */
    getLanguageIdFromEditor(editor) {
        return editor.getGrammar().name;
    }
    // Helper methods that are useful for implementors
    // ---------------------------------------------------------------------------
    /** Gets a LanguageClientConnection for a given TextEditor */
    getConnectionForEditor(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            return server ? server.connection : null;
        });
    }
    /** Restart all active language servers for this language client in the workspace */
    restartAllServers() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._serverManager.restartAllServers();
        });
    }
    // Default implementation of the rest of the AutoLanguageClient
    // ---------------------------------------------------------------------------
    /** Activate does very little for perf reasons - hooks in via ServerManager for later 'activation' */
    activate() {
        this._disposable = new atom_1.CompositeDisposable();
        this.name = `${this.getLanguageName()} (${this.getServerName()})`;
        this.logger = this.getLogger();
        this._serverManager = new server_manager_js_1.ServerManager((p) => this.startServer(p), this.logger, (e) => this.shouldStartForEditor(e), (filepath) => this.filterChangeWatchedFiles(filepath), this.reportBusyWhile, this.getServerName(), (textEditor) => this.determineProjectPath(textEditor), this.shutdownGracefully);
        this._serverManager.startListening();
        process.on("exit", () => this.exitCleanup.bind(this));
    }
    exitCleanup() {
        this._serverManager.terminate();
    }
    /** Deactivate disposes the resources we're using */
    deactivate() {
        return __awaiter(this, void 0, void 0, function* () {
            this._isDeactivating = true;
            this._disposable.dispose();
            this._serverManager.stopListening();
            yield this._serverManager.stopAllServers();
        });
    }
    /**
     * Spawn a general language server. Use this inside the `startServerProcess` override if the language server is a
     * general executable. Also see the `spawnChildNode` method. If the name is provided as the first argument, it checks
     * `bin/platform-arch/exeName` by default, and if doesn't exists uses the exe on PATH. For example on Windows x64, by
     * passing `serve-d`, `bin/win32-x64/exeName.exe` is spawned by default.
     *
     * @param exe The `name` or `path` of the executable
     * @param args Args passed to spawn the exe. Defaults to `[]`.
     * @param options: Child process spawn options. Defaults to `{}`.
     * @param rootPath The path of the folder of the exe file. Defaults to `join("bin", `${process.platform}-${process.arch} `)`.
     * @param exeExtention The extention of the exe file. Defaults to `process.platform === "win32" ? ".exe" : ""`
     */
    spawn(exe, args = [], options = {}, rootPath = Utils.rootPathDefault, exeExtention = Utils.exeExtentionDefault) {
        this.logger.debug(`starting "${exe} ${args.join(" ")}"`);
        return cp.spawn(Utils.getExePath(exe, rootPath, exeExtention), args, options);
    }
    /**
     * Spawn a language server using Atom's Nodejs process Use this inside the `startServerProcess` override if the
     * language server is a JavaScript file. Also see the `spawn` method
     */
    spawnChildNode(args, options = {}) {
        this.logger.debug(`starting child Node "${args.join(" ")}"`);
        options.env = options.env || Object.create(process.env);
        if (options.env) {
            options.env.ELECTRON_RUN_AS_NODE = "1";
            options.env.ELECTRON_NO_ATTACH_CONSOLE = "1";
        }
        return cp.spawn(process.execPath, args, options);
    }
    /** LSP logging is only set for warnings & errors by default unless you turn on the core.debugLSP setting */
    getLogger() {
        const filter = atom.config.get("core.debugLSP")
            ? logger_1.FilteredLogger.DeveloperLevelFilter
            : logger_1.FilteredLogger.UserLevelFilter;
        return new logger_1.FilteredLogger(new logger_1.ConsoleLogger(this.name), filter);
    }
    /** Starts the server by starting the process, then initializing the language server and starting adapters */
    startServer(projectPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const lsProcess = yield this.reportBusyWhile(`Starting ${this.getServerName()} for ${path.basename(projectPath)}`, () => __awaiter(this, void 0, void 0, function* () { return this.startServerProcess(projectPath); }));
            this.captureServerErrors(lsProcess, projectPath);
            const connection = new languageclient_1.LanguageClientConnection(this.createRpcConnection(lsProcess), this.logger);
            this.preInitialization(connection);
            const initializeParams = this.getInitializeParams(projectPath, lsProcess);
            const initialization = connection.initialize(initializeParams);
            this.reportBusyWhile(`${this.getServerName()} initializing for ${path.basename(projectPath)}`, () => initialization);
            const initializeResponse = yield initialization;
            const newServer = {
                projectPath,
                process: lsProcess,
                connection,
                capabilities: initializeResponse.capabilities,
                disposable: new atom_1.CompositeDisposable(),
                additionalPaths: new Set(),
            };
            this.postInitialization(newServer);
            connection.initialized();
            connection.on("close", () => {
                if (!this._isDeactivating) {
                    this._serverManager.stopServer(newServer);
                    if (!this._serverManager.hasServerReachedRestartLimit(newServer)) {
                        this.logger.debug(`Restarting language server for project '${newServer.projectPath}'`);
                        this._serverManager.startServer(projectPath);
                    }
                    else {
                        this.logger.warn(`Language server has exceeded auto-restart limit for project '${newServer.projectPath}'`);
                        atom.notifications.addError(`The ${this.name} language server has exited and exceeded the restart limit for project '${newServer.projectPath}'`);
                    }
                }
            });
            const configurationKey = this.getRootConfigurationKey();
            if (configurationKey) {
                newServer.disposable.add(atom.config.observe(configurationKey, (config) => {
                    const mappedConfig = this.mapConfigurationObject(config || {});
                    if (mappedConfig) {
                        connection.didChangeConfiguration({
                            settings: mappedConfig,
                        });
                    }
                }));
            }
            this.startExclusiveAdapters(newServer);
            return newServer;
        });
    }
    captureServerErrors(lsProcess, projectPath) {
        var _a, _b;
        lsProcess.on("error", (err) => this.onSpawnError(err));
        lsProcess.on("close", (code, signal) => this.onSpawnClose(code, signal));
        lsProcess.on("disconnect", () => this.onSpawnDisconnect());
        lsProcess.on("exit", (code, signal) => this.onSpawnExit(code, signal));
        (_a = lsProcess.stderr) === null || _a === void 0 ? void 0 : _a.setEncoding("utf8");
        (_b = lsProcess.stderr) === null || _b === void 0 ? void 0 : _b.on("data", (chunk) => this.onSpawnStdErrData(chunk, projectPath));
    }
    /**
     * The function called whenever the spawned server `error`s. Extend (call super.onSpawnError) or override this if you
     * need custom error handling
     */
    onSpawnError(err) {
        atom.notifications.addError(`${this.getServerName()} language server for ${this.getLanguageName()} unable to start`, {
            dismissable: true,
            description: err.toString(),
        });
    }
    /**
     * The function called whenever the spawned server `close`s. Extend (call super.onSpawnClose) or override this if you
     * need custom close handling
     */
    onSpawnClose(code, signal) {
        if (code !== 0 && signal === null) {
            atom.notifications.addError(`${this.getServerName()} language server for ${this.getLanguageName()} was closed with code: ${code}.`);
        }
    }
    /**
     * The function called whenever the spawned server `disconnect`s. Extend (call super.onSpawnDisconnect) or override
     * this if you need custom disconnect handling
     */
    onSpawnDisconnect() {
        this.logger.debug(`${this.getServerName()} language server for ${this.getLanguageName()} got disconnected.`);
    }
    /**
     * The function called whenever the spawned server `exit`s. Extend (call super.onSpawnExit) or override this if you
     * need custom exit handling
     */
    onSpawnExit(code, signal) {
        this.logger.debug(`exit: code ${code} signal ${signal}`);
    }
    /** (Optional) Finds the project path. If there is a custom logic for finding projects override this method. */
    determineProjectPath(textEditor) {
        const filePath = textEditor.getPath();
        // TODO can filePath be null
        if (filePath === null || filePath === undefined) {
            return null;
        }
        const projectPath = this._serverManager.getNormalizedProjectPaths().find((d) => filePath.startsWith(d));
        if (projectPath !== undefined) {
            return projectPath;
        }
        const serverWithClaim = this._serverManager
            .getActiveServers()
            .find((server) => { var _a; return (_a = server.additionalPaths) === null || _a === void 0 ? void 0 : _a.has(path.dirname(filePath)); });
        if (serverWithClaim !== undefined) {
            return server_manager_js_1.normalizePath(serverWithClaim.projectPath);
        }
        return null;
    }
    /**
     * The function called whenever the spawned server returns `data` in `stderr` Extend (call super.onSpawnStdErrData) or
     * override this if you need custom stderr data handling
     */
    onSpawnStdErrData(chunk, projectPath) {
        const errorString = chunk.toString();
        this.handleServerStderr(errorString, projectPath);
        // Keep the last 5 lines for packages to use in messages
        this.processStdErr = (this.processStdErr + errorString).split("\n").slice(-5).join("\n");
    }
    /** Creates the RPC connection which can be ipc, socket or stdio */
    createRpcConnection(lsProcess) {
        let reader;
        let writer;
        const connectionType = this.getConnectionType();
        switch (connectionType) {
            case "ipc":
                reader = new rpcNode.IPCMessageReader(lsProcess);
                writer = new rpcNode.IPCMessageWriter(lsProcess);
                break;
            case "socket":
                reader = new rpcNode.SocketMessageReader(this.socket);
                writer = new rpcNode.SocketMessageWriter(this.socket);
                break;
            case "stdio":
                if (lsProcess.stdin !== null && lsProcess.stdout !== null) {
                    reader = new rpcNode.StreamMessageReader(lsProcess.stdout);
                    writer = new rpcNode.StreamMessageWriter(lsProcess.stdin);
                }
                else {
                    this.logger.error(`The language server process for ${this.getLanguageName()} does not have a valid stdin and stdout`);
                    return Utils.assertUnreachable("stdio");
                }
                break;
            default:
                return Utils.assertUnreachable(connectionType);
        }
        return rpc.createMessageConnection(reader, writer, {
            log: (..._args) => { },
            warn: (..._args) => { },
            info: (..._args) => { },
            error: (...args) => {
                this.logger.error(args);
            },
        });
    }
    /** Start adapters that are not shared between servers */
    startExclusiveAdapters(server) {
        apply_edit_adapter_1.default.attach(server.connection);
        notifications_adapter_1.default.attach(server.connection, this.name, server.projectPath);
        if (document_sync_adapter_1.default.canAdapt(server.capabilities)) {
            const docSyncAdapter = new document_sync_adapter_1.default(server.connection, (editor) => this.shouldSyncForEditor(editor, server.projectPath), server.capabilities.textDocumentSync, this.reportBusyWhile, (editor) => this.getLanguageIdFromEditor(editor));
            server.disposable.add(docSyncAdapter);
        }
        const linterPushV2 = new linter_push_v2_adapter_1.default(server.connection);
        if (this._linterDelegate != null) {
            linterPushV2.attach(this._linterDelegate);
        }
        server.disposable.add(linterPushV2);
        const loggingConsole = new logging_console_adapter_1.default(server.connection);
        if (this._consoleDelegate != null) {
            loggingConsole.attach(this._consoleDelegate({ id: this.name, name: this.getLanguageName() }));
        }
        server.disposable.add(loggingConsole);
        let signatureHelpAdapter;
        if (signature_help_adapter_1.default.canAdapt(server.capabilities)) {
            signatureHelpAdapter = new signature_help_adapter_1.default(server, this.getGrammarScopes());
            if (this._signatureHelpRegistry != null) {
                signatureHelpAdapter.attach(this._signatureHelpRegistry);
            }
            server.disposable.add(signatureHelpAdapter);
        }
        this._serverAdapters.set(server, {
            linterPushV2,
            loggingConsole,
            signatureHelpAdapter,
        });
        ShowDocumentAdapter.attach(server.connection);
        server.connection.onWorkspaceFolders(() => this._serverManager.getWorkspaceFolders());
    }
    shouldSyncForEditor(editor, projectPath) {
        return this.isFileInProject(editor, projectPath) && this.shouldStartForEditor(editor);
    }
    isFileInProject(editor, projectPath) {
        return (editor.getPath() || "").startsWith(projectPath);
    }
    // Autocomplete+ via LS completion---------------------------------------
    /**
     * A method to override to return an array of grammar scopes that should not be used for autocompletion.
     *
     * Usually that's used for disabling autocomplete inside comments,
     *
     * @example If the grammar scopes are [ '.source.js' ], `getAutocompleteDisabledScopes` may return [ '.source.js .comment' ].
     */
    getAutocompleteDisabledScopes() {
        return [];
    }
    provideAutocomplete() {
        return {
            selector: this.getGrammarScopes()
                .map((g) => autocomplete_adapter_1.grammarScopeToAutoCompleteSelector(g))
                .join(", "),
            disableForSelector: this.getAutocompleteDisabledScopes()
                .map((g) => autocomplete_adapter_1.grammarScopeToAutoCompleteSelector(g))
                .join(", "),
            inclusionPriority: 1,
            suggestionPriority: 2,
            excludeLowerPriority: false,
            filterSuggestions: true,
            getSuggestions: this.getSuggestions.bind(this),
            onDidInsertSuggestion: (event) => {
                autocomplete_adapter_1.default.applyAdditionalTextEdits(event);
                this.onDidInsertSuggestion(event);
            },
            getSuggestionDetailsOnSelect: this.getSuggestionDetailsOnSelect.bind(this),
        };
    }
    getSuggestions(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(request.editor);
            if (server == null || !autocomplete_adapter_1.default.canAdapt(server.capabilities)) {
                return [];
            }
            this.autoComplete = this.autoComplete || new autocomplete_adapter_1.default();
            this._lastAutocompleteRequest = request;
            return this.autoComplete.getSuggestions(server, request, this.onDidConvertAutocomplete, atom.config.get("autocomplete-plus.minimumWordLength"));
        });
    }
    getSuggestionDetailsOnSelect(suggestion) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = this._lastAutocompleteRequest;
            if (request == null) {
                return null;
            }
            const server = yield this._serverManager.getServer(request.editor);
            if (server == null || !autocomplete_adapter_1.default.canResolve(server.capabilities) || this.autoComplete == null) {
                return null;
            }
            return this.autoComplete.completeSuggestion(server, suggestion, request, this.onDidConvertAutocomplete);
        });
    }
    onDidConvertAutocomplete(_completionItem, _suggestion, _request) { }
    onDidInsertSuggestion(_arg) { }
    // Definitions via LS documentHighlight and gotoDefinition------------
    provideDefinitions() {
        return {
            name: this.name,
            priority: 20,
            grammarScopes: this.getGrammarScopes(),
            wordRegExp: null,
            getDefinition: this.getDefinition.bind(this),
        };
    }
    getDefinition(editor, point) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !definition_adapter_1.default.canAdapt(server.capabilities)) {
                return null;
            }
            this.definitions = this.definitions || new definition_adapter_1.default();
            const query = yield this.definitions.getDefinition(server.connection, server.capabilities, this.getLanguageName(), editor, point);
            if (query !== null && server.additionalPaths !== undefined) {
                // populate additionalPaths based on definitions
                // Indicates that the language server can support LSP functionality for out of project files indicated by `textDocument/definition` responses.
                for (const def of query.definitions) {
                    server_manager_js_1.considerAdditionalPath(server, path.dirname(def.path));
                }
            }
            return query;
        });
    }
    // Outline View via LS documentSymbol---------------------------------
    provideOutlines() {
        return {
            name: this.name,
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            getOutline: this.getOutline.bind(this),
        };
    }
    getOutline(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !outline_view_adapter_1.default.canAdapt(server.capabilities)) {
                return null;
            }
            this.outlineView = this.outlineView || new outline_view_adapter_1.default();
            return this.outlineView.getOutline(server.connection, editor);
        });
    }
    // Call Hierarchy View via LS callHierarchy---------------------------------
    provideCallHierarchy() {
        return {
            name: this.name,
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            getIncomingCallHierarchy: this.getIncomingCallHierarchy.bind(this),
            getOutgoingCallHierarchy: this.getOutgoingCallHierarchy.bind(this),
        };
    }
    getIncomingCallHierarchy(editor, point) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server === null || !CallHierarchyAdapter.canAdapt(server.capabilities)) {
                return null;
            }
            this.callHierarchy = (_a = this.callHierarchy) !== null && _a !== void 0 ? _a : CallHierarchyAdapter;
            return this.callHierarchy.getCallHierarchy(server.connection, editor, point, "incoming");
        });
    }
    getOutgoingCallHierarchy(editor, point) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server === null || !CallHierarchyAdapter.canAdapt(server.capabilities)) {
                return null;
            }
            this.callHierarchy = (_a = this.callHierarchy) !== null && _a !== void 0 ? _a : CallHierarchyAdapter;
            return this.callHierarchy.getCallHierarchy(server.connection, editor, point, "outgoing");
        });
    }
    // Linter push v2 API via LS publishDiagnostics
    consumeLinterV2(registerIndie) {
        this._linterDelegate = registerIndie({ name: this.name });
        if (this._linterDelegate == null) {
            return;
        }
        for (const server of this._serverManager.getActiveServers()) {
            const linterPushV2 = this.getServerAdapter(server, "linterPushV2");
            if (linterPushV2 != null) {
                linterPushV2.attach(this._linterDelegate);
            }
        }
    }
    // Find References via LS findReferences------------------------------
    provideFindReferences() {
        return {
            isEditorSupported: (editor) => this.getGrammarScopes().includes(editor.getGrammar().scopeName),
            findReferences: this.getReferences.bind(this),
        };
    }
    getReferences(editor, point) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !find_references_adapter_1.default.canAdapt(server.capabilities)) {
                return null;
            }
            this.findReferences = this.findReferences || new find_references_adapter_1.default();
            return this.findReferences.getReferences(server.connection, editor, point, server.projectPath);
        });
    }
    // Datatip via LS textDocument/hover----------------------------------
    consumeDatatip(service) {
        this._disposable.add(service.addProvider({
            providerName: this.name,
            priority: 1,
            grammarScopes: this.getGrammarScopes(),
            validForScope: (scopeName) => {
                return this.getGrammarScopes().includes(scopeName);
            },
            datatip: this.getDatatip.bind(this),
        }));
    }
    getDatatip(editor, point) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !datatip_adapter_1.default.canAdapt(server.capabilities)) {
                return null;
            }
            this.datatip = this.datatip || new datatip_adapter_1.default();
            return this.datatip.getDatatip(server.connection, editor, point);
        });
    }
    // Console via LS logging---------------------------------------------
    consumeConsole(createConsole) {
        this._consoleDelegate = createConsole;
        for (const server of this._serverManager.getActiveServers()) {
            const loggingConsole = this.getServerAdapter(server, "loggingConsole");
            if (loggingConsole) {
                loggingConsole.attach(this._consoleDelegate({ id: this.name, name: this.getLanguageName() }));
            }
        }
        // No way of detaching from client connections today
        return new atom_1.Disposable(() => { });
    }
    // Code Format via LS formatDocument & formatDocumentRange------------
    provideCodeFormat() {
        return {
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            formatCode: this.getCodeFormat.bind(this),
        };
    }
    getCodeFormat(editor, range) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !code_format_adapter_1.default.canAdapt(server.capabilities)) {
                return [];
            }
            return code_format_adapter_1.default.format(server.connection, server.capabilities, editor, range);
        });
    }
    provideRangeCodeFormat() {
        return {
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            formatCode: this.getRangeCodeFormat.bind(this),
        };
    }
    getRangeCodeFormat(editor, range) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !server.capabilities.documentRangeFormattingProvider) {
                return [];
            }
            return code_format_adapter_1.default.formatRange(server.connection, editor, range);
        });
    }
    provideFileCodeFormat() {
        return {
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            formatEntireFile: this.getFileCodeFormat.bind(this),
        };
    }
    provideOnSaveCodeFormat() {
        return {
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            formatOnSave: this.getFileCodeFormat.bind(this),
        };
    }
    getFileCodeFormat(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !server.capabilities.documentFormattingProvider) {
                return [];
            }
            return code_format_adapter_1.default.formatDocument(server.connection, editor);
        });
    }
    provideOnTypeCodeFormat() {
        return {
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            formatAtPosition: this.getOnTypeCodeFormat.bind(this),
        };
    }
    getOnTypeCodeFormat(editor, point, character) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !server.capabilities.documentOnTypeFormattingProvider) {
                return [];
            }
            return code_format_adapter_1.default.formatOnType(server.connection, editor, point, character);
        });
    }
    provideCodeHighlight() {
        return {
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            highlight: (editor, position) => {
                return this.getCodeHighlight(editor, position);
            },
        };
    }
    getCodeHighlight(editor, position) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !code_highlight_adapter_1.default.canAdapt(server.capabilities)) {
                return null;
            }
            return code_highlight_adapter_1.default.highlight(server.connection, server.capabilities, editor, position);
        });
    }
    provideCodeActions() {
        return {
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            getCodeActions: (editor, range, diagnostics) => {
                return this.getCodeActions(editor, range, diagnostics);
            },
        };
    }
    getCodeActions(editor, range, diagnostics) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !code_action_adapter_1.default.canAdapt(server.capabilities)) {
                return null;
            }
            return code_action_adapter_1.default.getCodeActions(server.connection, server.capabilities, this.getServerAdapter(server, "linterPushV2"), editor, range, diagnostics, this.filterCodeActions.bind(this), this.onApplyCodeActions.bind(this));
        });
    }
    /** Optionally filter code action before they're displayed */
    filterCodeActions(actions) {
        return actions;
    }
    /**
     * Optionally handle a code action before default handling. Return `false` to prevent default handling, `true` to
     * continue with default handling.
     */
    onApplyCodeActions(_action) {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    provideRefactor() {
        return {
            grammarScopes: this.getGrammarScopes(),
            priority: 1,
            rename: this.getRename.bind(this),
        };
    }
    getRename(editor, position, newName) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = yield this._serverManager.getServer(editor);
            if (server == null || !rename_adapter_1.default.canAdapt(server.capabilities)) {
                return null;
            }
            return rename_adapter_1.default.getRename(server.connection, editor, position, newName);
        });
    }
    consumeSignatureHelp(registry) {
        this._signatureHelpRegistry = registry;
        for (const server of this._serverManager.getActiveServers()) {
            const signatureHelpAdapter = this.getServerAdapter(server, "signatureHelpAdapter");
            if (signatureHelpAdapter != null) {
                signatureHelpAdapter.attach(registry);
            }
        }
        return new atom_1.Disposable(() => {
            this._signatureHelpRegistry = undefined;
        });
    }
    consumeBusySignal(service) {
        this.busySignalService = service;
        return new atom_1.Disposable(() => delete this.busySignalService);
    }
    /**
     * `didChangeWatchedFiles` message filtering, override for custom logic.
     *
     * @param filePath Path of a file that has changed in the project path
     * @returns `false` => message will not be sent to the language server
     */
    filterChangeWatchedFiles(_filePath) {
        return true;
    }
    /**
     * Called on language server stderr output.
     *
     * @param stderr A chunk of stderr from a language server instance
     */
    handleServerStderr(stderr, _projectPath) {
        stderr
            .split("\n")
            .filter((l) => l)
            .forEach((line) => this.logger.warn(`stderr ${line}`));
    }
    getServerAdapter(server, adapter) {
        const adapters = this._serverAdapters.get(server);
        return adapters && adapters[adapter];
    }
}
exports.default = AutoLanguageClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1sYW5ndWFnZWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9hdXRvLWxhbmd1YWdlY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLG9DQUFtQztBQUVuQyxzQ0FBcUM7QUFDckMsK0NBQThDO0FBQzlDLDZCQUE0QjtBQUc1Qiw2Q0FBa0M7QUFDbEMsc0VBQTREO0FBQzVELDBFQUF5RztBQUN6RywwRUFBeUU7QUFDekUsd0VBQThEO0FBQzlELHdFQUE4RDtBQUM5RCw4RUFBb0U7QUFDcEUsZ0VBQXVEO0FBQ3ZELHNFQUE2RDtBQUM3RCw0RUFBa0U7QUFDbEUsZ0ZBQXNFO0FBQ3RFLDhFQUFtRTtBQUNuRSxnRkFBc0U7QUFDdEUsNEVBQW1FO0FBQ25FLDBFQUFnRTtBQUNoRSw4REFBcUQ7QUFDckQsOEVBQW9FO0FBQ3BFLHdFQUF1RTtBQUN2RSxpQ0FBZ0M7QUFFaEMscURBQTJEO0FBYXBDLHlHQWJkLHlDQUF3QixPQWFjO0FBWi9DLHFDQUFnRTtBQUNoRSwyREFNNEI7QUFDNUIsK0JBQWdGO0FBRWhGLCtCQUErQjtBQVcvQjs7Ozs7Ozs7R0FRRztBQUNILE1BQXFCLGtCQUFrQjtJQUF2QztRQU9VLG9CQUFlLEdBQVksS0FBSyxDQUFBO1FBQ2hDLG9CQUFlLEdBQUcsSUFBSSxPQUFPLEVBQWdDLENBQUE7UUFLM0Qsa0JBQWEsR0FBVyxFQUFFLENBQUE7UUE2K0JwQzs7O1dBR0c7UUFDTyx1QkFBa0IsR0FBWSxJQUFJLENBQUE7UUFzQmxDLG9CQUFlLEdBQTBCLENBQU8sS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BFLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO2dCQUMxQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO2FBQ3hEO2lCQUFNO2dCQUNMLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFD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SSxDQUFDO2FBQ1gsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDaEIsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUMxRCxDQUFDO0lBRU8sZ0JBQWdCLENBQ3RCLE1BQW9CLEVBQ3BCLE9BQVU7UUFFVixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNqRCxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDdEMsQ0FBQztDQW9CRjtBQXRpQ0QscUNBc2lDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNwIGZyb20gXCJjaGlsZF9wcm9jZXNzXCJcbmltcG9ydCAqIGFzIGxzIGZyb20gXCIuL2xhbmd1YWdlY2xpZW50XCJcbmltcG9ydCAqIGFzIHJwYyBmcm9tIFwidnNjb2RlLWpzb25ycGNcIlxuaW1wb3J0ICogYXMgcnBjTm9kZSBmcm9tIFwidnNjb2RlLWpzb25ycGMvbm9kZVwiXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCJcbmltcG9ydCAqIGFzIGF0b21JZGUgZnJvbSBcImF0b20taWRlXCJcbmltcG9ydCAqIGFzIGxpbnRlciBmcm9tIFwiYXRvbS9saW50ZXJcIlxuaW1wb3J0IENvbnZlcnQgZnJvbSBcIi4vY29udmVydC5qc1wiXG5pbXBvcnQgQXBwbHlFZGl0QWRhcHRlciBmcm9tIFwiLi9hZGFwdGVycy9hcHBseS1lZGl0LWFkYXB0ZXJcIlxuaW1wb3J0IEF1dG9jb21wbGV0ZUFkYXB0ZXIsIHsgZ3JhbW1hclNjb3BlVG9BdXRvQ29tcGxldGVTZWxlY3RvciB9IGZyb20gXCIuL2FkYXB0ZXJzL2F1dG9jb21wbGV0ZS1hZGFwdGVyXCJcbmltcG9ydCAqIGFzIENhbGxIaWVyYXJjaHlBZGFwdGVyIGZyb20gXCIuL2FkYXB0ZXJzL2NhbGwtaGllcmFyY2h5LWFkYXB0ZXJcIlxuaW1wb3J0IENvZGVBY3Rpb25BZGFwdGVyIGZyb20gXCIuL2FkYXB0ZXJzL2NvZGUtYWN0aW9uLWFkYXB0ZXJcIlxuaW1wb3J0IENvZGVGb3JtYXRBZGFwdGVyIGZyb20gXCIuL2FkYXB0ZXJzL2NvZGUtZm9ybWF0LWFkYXB0ZXJcIlxuaW1wb3J0IENvZGVIaWdobGlnaHRBZGFwdGVyIGZyb20gXCIuL2FkYXB0ZXJzL2NvZGUtaGlnaGxpZ2h0LWFkYXB0ZXJcIlxuaW1wb3J0IERhdGF0aXBBZGFwdGVyIGZyb20gXCIuL2FkYXB0ZXJzL2RhdGF0aXAtYWRhcHRlclwiXG5pbXBvcnQgRGVmaW5pdGlvbkFkYXB0ZXIgZnJvbSBcIi4vYWRhcHRlcnMvZGVmaW5pdGlvbi1hZGFwdGVyXCJcbmltcG9ydCBEb2N1bWVudFN5bmNBZGFwdGVyIGZyb20gXCIuL2FkYXB0ZXJzL2RvY3VtZW50LXN5bmMtYWRhcHRlclwiXG5pbXBvcnQgRmluZFJlZmVyZW5jZXNBZGFwdGVyIGZyb20gXCIuL2FkYXB0ZXJzL2ZpbmQtcmVmZXJlbmNlcy1hZGFwdGVyXCJcbmltcG9ydCBMaW50ZXJQdXNoVjJBZGFwdGVyIGZyb20gXCIuL2FkYXB0ZXJzL2xpbnRlci1wdXNoLXYyLWFkYXB0ZXJcIlxuaW1wb3J0IExvZ2dpbmdDb25zb2xlQWRhcHRlciBmcm9tIFwiLi9hZGFwdGVycy9sb2dnaW5nLWNvbnNvbGUtYWRhcHRlclwiXG5pbXBvcnQgTm90aWZpY2F0aW9uc0FkYXB0ZXIgZnJvbSBcIi4vYWRhcHRlcnMvbm90aWZpY2F0aW9ucy1hZGFwdGVyXCJcbmltcG9ydCBPdXRsaW5lVmlld0FkYXB0ZXIgZnJvbSBcIi4vYWRhcHRlcnMvb3V0bGluZS12aWV3LWFkYXB0ZXJcIlxuaW1wb3J0IFJlbmFtZUFkYXB0ZXIgZnJvbSBcIi4vYWRhcHRlcnMvcmVuYW1lLWFkYXB0ZXJcIlxuaW1wb3J0IFNpZ25hdHVyZUhlbHBBZGFwdGVyIGZyb20gXCIuL2FkYXB0ZXJzL3NpZ25hdHVyZS1oZWxwLWFkYXB0ZXJcIlxuaW1wb3J0ICogYXMgU2hvd0RvY3VtZW50QWRhcHRlciBmcm9tIFwiLi9hZGFwdGVycy9zaG93LWRvY3VtZW50LWFkYXB0ZXJcIlxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vdXRpbHNcIlxuaW1wb3J0IHsgU29ja2V0IH0gZnJvbSBcIm5ldFwiXG5pbXBvcnQgeyBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24gfSBmcm9tIFwiLi9sYW5ndWFnZWNsaWVudFwiXG5pbXBvcnQgeyBDb25zb2xlTG9nZ2VyLCBGaWx0ZXJlZExvZ2dlciwgTG9nZ2VyIH0gZnJvbSBcIi4vbG9nZ2VyXCJcbmltcG9ydCB7XG4gIExhbmd1YWdlU2VydmVyUHJvY2VzcyxcbiAgU2VydmVyTWFuYWdlcixcbiAgQWN0aXZlU2VydmVyLFxuICBub3JtYWxpemVQYXRoLFxuICBjb25zaWRlckFkZGl0aW9uYWxQYXRoLFxufSBmcm9tIFwiLi9zZXJ2ZXItbWFuYWdlci5qc1wiXG5pbXBvcnQgeyBEaXNwb3NhYmxlLCBDb21wb3NpdGVEaXNwb3NhYmxlLCBQb2ludCwgUmFuZ2UsIFRleHRFZGl0b3IgfSBmcm9tIFwiYXRvbVwiXG5pbXBvcnQgKiBhcyBhYyBmcm9tIFwiYXRvbS9hdXRvY29tcGxldGUtcGx1c1wiXG5pbXBvcnQgeyBiYXNlbmFtZSB9IGZyb20gXCJwYXRoXCJcblxuZXhwb3J0IHsgQWN0aXZlU2VydmVyLCBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sIExhbmd1YWdlU2VydmVyUHJvY2VzcyB9XG5leHBvcnQgdHlwZSBDb25uZWN0aW9uVHlwZSA9IFwic3RkaW9cIiB8IFwic29ja2V0XCIgfCBcImlwY1wiXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmVyQWRhcHRlcnMge1xuICBsaW50ZXJQdXNoVjI6IExpbnRlclB1c2hWMkFkYXB0ZXJcbiAgbG9nZ2luZ0NvbnNvbGU6IExvZ2dpbmdDb25zb2xlQWRhcHRlclxuICBzaWduYXR1cmVIZWxwQWRhcHRlcj86IFNpZ25hdHVyZUhlbHBBZGFwdGVyXG59XG5cbi8qKlxuICogUHVibGljOiBBdXRvTGFuZ3VhZ2VDbGllbnQgcHJvdmlkZXMgYSBzaW1wbGUgd2F5IHRvIGhhdmUgYWxsIHRoZSBzdXBwb3J0ZWQgQXRvbS1JREUgc2VydmljZXMgd2lyZWQgdXAgZW50aXJlbHkgZm9yXG4gKiB5b3UgYnkganVzdCBzdWJjbGFzc2luZyBpdCBhbmQgaW1wbGVtZW50aW5nIGF0IGxlYXN0XG4gKlxuICogLSBgc3RhcnRTZXJ2ZXJQcm9jZXNzYFxuICogLSBgZ2V0R3JhbW1hclNjb3Blc2BcbiAqIC0gYGdldExhbmd1YWdlTmFtZWBcbiAqIC0gYGdldFNlcnZlck5hbWVgXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9MYW5ndWFnZUNsaWVudCB7XG4gIHByaXZhdGUgX2Rpc3Bvc2FibGUhOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIHByaXZhdGUgX3NlcnZlck1hbmFnZXIhOiBTZXJ2ZXJNYW5hZ2VyXG4gIHByaXZhdGUgX2NvbnNvbGVEZWxlZ2F0ZT86IGF0b21JZGUuQ29uc29sZVNlcnZpY2VcbiAgcHJpdmF0ZSBfbGludGVyRGVsZWdhdGU/OiBsaW50ZXIuSW5kaWVEZWxlZ2F0ZVxuICBwcml2YXRlIF9zaWduYXR1cmVIZWxwUmVnaXN0cnk/OiBhdG9tSWRlLlNpZ25hdHVyZUhlbHBSZWdpc3RyeVxuICBwcml2YXRlIF9sYXN0QXV0b2NvbXBsZXRlUmVxdWVzdD86IGFjLlN1Z2dlc3Rpb25zUmVxdWVzdGVkRXZlbnRcbiAgcHJpdmF0ZSBfaXNEZWFjdGl2YXRpbmc6IGJvb2xlYW4gPSBmYWxzZVxuICBwcml2YXRlIF9zZXJ2ZXJBZGFwdGVycyA9IG5ldyBXZWFrTWFwPEFjdGl2ZVNlcnZlciwgU2VydmVyQWRhcHRlcnM+KClcblxuICAvKiogQXZhaWxhYmxlIGlmIGNvbnN1bWVCdXN5U2lnbmFsIGlzIHNldHVwICovXG4gIHByb3RlY3RlZCBidXN5U2lnbmFsU2VydmljZT86IGF0b21JZGUuQnVzeVNpZ25hbFNlcnZpY2VcblxuICBwcm90ZWN0ZWQgcHJvY2Vzc1N0ZEVycjogc3RyaW5nID0gXCJcIlxuICBwcm90ZWN0ZWQgbG9nZ2VyITogTG9nZ2VyXG4gIHByb3RlY3RlZCBuYW1lITogc3RyaW5nXG4gIHByb3RlY3RlZCBzb2NrZXQhOiBTb2NrZXRcblxuICAvLyBTaGFyZWQgYWRhcHRlcnMgdGhhdCBjYW4gdGFrZSB0aGUgUlBDIGNvbm5lY3Rpb24gYXMgcmVxdWlyZWRcbiAgcHJvdGVjdGVkIGF1dG9Db21wbGV0ZT86IEF1dG9jb21wbGV0ZUFkYXB0ZXJcbiAgcHJvdGVjdGVkIGNhbGxIaWVyYXJjaHk/OiB0eXBlb2YgQ2FsbEhpZXJhcmNoeUFkYXB0ZXJcbiAgcHJvdGVjdGVkIGRhdGF0aXA/OiBEYXRhdGlwQWRhcHRlclxuICBwcm90ZWN0ZWQgZGVmaW5pdGlvbnM/OiBEZWZpbml0aW9uQWRhcHRlclxuICBwcm90ZWN0ZWQgZmluZFJlZmVyZW5jZXM/OiBGaW5kUmVmZXJlbmNlc0FkYXB0ZXJcbiAgcHJvdGVjdGVkIG91dGxpbmVWaWV3PzogT3V0bGluZVZpZXdBZGFwdGVyXG5cbiAgLy8gWW91IG11c3QgaW1wbGVtZW50IHRoZXNlIHNvIHdlIGtub3cgaG93IHRvIGRlYWwgd2l0aCB5b3VyIGxhbmd1YWdlIGFuZCBzZXJ2ZXJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKiBSZXR1cm4gYW4gYXJyYXkgb2YgdGhlIGdyYW1tYXIgc2NvcGVzIHlvdSBoYW5kbGUsIGUuZy4gWyAnc291cmNlLmpzJyBdICovXG4gIHByb3RlY3RlZCBnZXRHcmFtbWFyU2NvcGVzKCk6IHN0cmluZ1tdIHtcbiAgICB0aHJvdyBFcnJvcihcIk11c3QgaW1wbGVtZW50IGdldEdyYW1tYXJTY29wZXMgd2hlbiBleHRlbmRpbmcgQXV0b0xhbmd1YWdlQ2xpZW50XCIpXG4gIH1cblxuICAvKiogUmV0dXJuIHRoZSBuYW1lIG9mIHRoZSBsYW5ndWFnZSB5b3Ugc3VwcG9ydCwgZS5nLiAnSmF2YVNjcmlwdCcgKi9cbiAgcHJvdGVjdGVkIGdldExhbmd1YWdlTmFtZSgpOiBzdHJpbmcge1xuICAgIHRocm93IEVycm9yKFwiTXVzdCBpbXBsZW1lbnQgZ2V0TGFuZ3VhZ2VOYW1lIHdoZW4gZXh0ZW5kaW5nIEF1dG9MYW5ndWFnZUNsaWVudFwiKVxuICB9XG5cbiAgLyoqIFJldHVybiB0aGUgbmFtZSBvZiB5b3VyIHNlcnZlciwgZS5nLiAnRWNsaXBzZSBKRFQnICovXG4gIHByb3RlY3RlZCBnZXRTZXJ2ZXJOYW1lKCk6IHN0cmluZyB7XG4gICAgdGhyb3cgRXJyb3IoXCJNdXN0IGltcGxlbWVudCBnZXRTZXJ2ZXJOYW1lIHdoZW4gZXh0ZW5kaW5nIEF1dG9MYW5ndWFnZUNsaWVudFwiKVxuICB9XG5cbiAgLyoqIFN0YXJ0IHlvdXIgc2VydmVyIHByb2Nlc3MgKi9cbiAgcHJvdGVjdGVkIHN0YXJ0U2VydmVyUHJvY2VzcyhfcHJvamVjdFBhdGg6IHN0cmluZyk6IExhbmd1YWdlU2VydmVyUHJvY2VzcyB8IFByb21pc2U8TGFuZ3VhZ2VTZXJ2ZXJQcm9jZXNzPiB7XG4gICAgdGhyb3cgRXJyb3IoXCJNdXN0IG92ZXJyaWRlIHN0YXJ0U2VydmVyUHJvY2VzcyB0byBzdGFydCBsYW5ndWFnZSBzZXJ2ZXIgcHJvY2VzcyB3aGVuIGV4dGVuZGluZyBBdXRvTGFuZ3VhZ2VDbGllbnRcIilcbiAgfVxuXG4gIC8vIFlvdSBtaWdodCB3YW50IHRvIG92ZXJyaWRlIHRoZXNlIGZvciBkaWZmZXJlbnQgYmVoYXZpb3JcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqIChPcHRpb25hbCkgRGV0ZXJtaW5lIHdoZXRoZXIgd2Ugc2hvdWxkIHN0YXJ0IGEgc2VydmVyIGZvciBhIGdpdmVuIGVkaXRvciBpZiB3ZSBkb24ndCBoYXZlIG9uZSB5ZXQgKi9cbiAgcHJvdGVjdGVkIHNob3VsZFN0YXJ0Rm9yRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldEdyYW1tYXJTY29wZXMoKS5pbmNsdWRlcyhlZGl0b3IuZ2V0R3JhbW1hcigpLnNjb3BlTmFtZSlcbiAgfVxuXG4gIC8qKiAoT3B0aW9uYWwpIFJldHVybiB0aGUgcGFyYW1ldGVycyB1c2VkIHRvIGluaXRpYWxpemUgYSBjbGllbnQgLSB5b3UgbWF5IHdhbnQgdG8gZXh0ZW5kIGNhcGFiaWxpdGllcyAqL1xuICBwcm90ZWN0ZWQgZ2V0SW5pdGlhbGl6ZVBhcmFtcyhwcm9qZWN0UGF0aDogc3RyaW5nLCBsc1Byb2Nlc3M6IExhbmd1YWdlU2VydmVyUHJvY2Vzcyk6IGxzLkluaXRpYWxpemVQYXJhbXMge1xuICAgIGNvbnN0IHJvb3RVcmkgPSBDb252ZXJ0LnBhdGhUb1VyaShwcm9qZWN0UGF0aClcbiAgICByZXR1cm4ge1xuICAgICAgcHJvY2Vzc0lkOiBsc1Byb2Nlc3MucGlkICE9PSB1bmRlZmluZWQgPyBsc1Byb2Nlc3MucGlkIDogbnVsbCxcbiAgICAgIHJvb3RQYXRoOiBwcm9qZWN0UGF0aCxcbiAgICAgIHJvb3RVcmksXG4gICAgICBsb2NhbGU6IGF0b20uY29uZmlnLmdldChcImF0b20taTE4bi5sb2NhbGVcIikgfHwgXCJlblwiLFxuICAgICAgd29ya3NwYWNlRm9sZGVyczogW3sgdXJpOiByb290VXJpLCBuYW1lOiBiYXNlbmFtZShwcm9qZWN0UGF0aCkgfV0sXG4gICAgICAvLyBUaGUgY2FwYWJpbGl0aWVzIHN1cHBvcnRlZC5cbiAgICAgIC8vIFRPRE8gdGhlIGNhcGFiaWxpdGllcyBzZXQgdG8gZmFsc2UvdW5kZWZpbmVkIGFyZSBUT0RPLiBTZWUge2xzLlNlcnZlckNhcGFiaWxpdGllc30gZm9yIGEgZnVsbCBsaXN0LlxuICAgICAgY2FwYWJpbGl0aWVzOiB7XG4gICAgICAgIHdvcmtzcGFjZToge1xuICAgICAgICAgIGFwcGx5RWRpdDogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmF0aW9uOiBmYWxzZSxcbiAgICAgICAgICB3b3Jrc3BhY2VFZGl0OiB7XG4gICAgICAgICAgICBkb2N1bWVudENoYW5nZXM6IHRydWUsXG4gICAgICAgICAgICBub3JtYWxpemVzTGluZUVuZGluZ3M6IGZhbHNlLFxuICAgICAgICAgICAgY2hhbmdlQW5ub3RhdGlvblN1cHBvcnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJlc291cmNlT3BlcmF0aW9uczogW1wiY3JlYXRlXCIsIFwicmVuYW1lXCIsIFwiZGVsZXRlXCJdLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgd29ya3NwYWNlRm9sZGVyczogdHJ1ZSxcbiAgICAgICAgICBkaWRDaGFuZ2VDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRpZENoYW5nZVdhdGNoZWRGaWxlczoge1xuICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyBCTE9DS0VEOiBvbiBhdG9tL3N5bWJvbHMtdmlld1xuICAgICAgICAgIHN5bWJvbDoge1xuICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBleGVjdXRlQ29tbWFuZDoge1xuICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZW1hbnRpY1Rva2VuczogdW5kZWZpbmVkLFxuICAgICAgICAgIGNvZGVMZW5zOiB1bmRlZmluZWQsXG4gICAgICAgICAgZmlsZU9wZXJhdGlvbnM6IHtcbiAgICAgICAgICAgIC8vIEJMT0NLRUQ6IG9uIHRyZWUtdmlldyBub3QgcHJvdmlkaW5nIGhvb2tzIGZvciBcImJlZm9yZSBmaWxlL2RpciBjcmVhdGVkXCJcbiAgICAgICAgICAgIHdpbGxDcmVhdGU6IGZhbHNlLFxuICAgICAgICAgICAgLy8gQkxPQ0tFRDogb24gdHJlZS12aWV3IG5vdCBwcm92aWRpbmcgaG9va3MgZm9yIFwiYmVmb3JlIGZpbGUvZGlyIHJlbmFtZWRcIlxuICAgICAgICAgICAgd2lsbFJlbmFtZTogZmFsc2UsXG4gICAgICAgICAgICAvLyBCTE9DS0VEOiBvbiB0cmVlLXZpZXcgbm90IHByb3ZpZGluZyBob29rcyBmb3IgXCJiZWZvcmUgZmlsZS9kaXIgZGVsZXRlZFwiXG4gICAgICAgICAgICB3aWxsRGVsZXRlOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0RG9jdW1lbnQ6IHtcbiAgICAgICAgICBzeW5jaHJvbml6YXRpb246IHtcbiAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgd2lsbFNhdmU6IHRydWUsXG4gICAgICAgICAgICB3aWxsU2F2ZVdhaXRVbnRpbDogdHJ1ZSxcbiAgICAgICAgICAgIGRpZFNhdmU6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb21wbGV0aW9uOiB7XG4gICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbXBsZXRpb25JdGVtOiB7XG4gICAgICAgICAgICAgIHNuaXBwZXRTdXBwb3J0OiB0cnVlLFxuICAgICAgICAgICAgICBjb21taXRDaGFyYWN0ZXJzU3VwcG9ydDogZmFsc2UsXG4gICAgICAgICAgICAgIGRvY3VtZW50YXRpb25Gb3JtYXQ6IFtdLFxuICAgICAgICAgICAgICBkZXByZWNhdGVkU3VwcG9ydDogZmFsc2UsXG4gICAgICAgICAgICAgIHByZXNlbGVjdFN1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICB0YWdTdXBwb3J0OiB7XG4gICAgICAgICAgICAgICAgdmFsdWVTZXQ6IFtdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBpbnNlcnRSZXBsYWNlU3VwcG9ydDogZmFsc2UsXG4gICAgICAgICAgICAgIHJlc29sdmVTdXBwb3J0OiB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW10sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGluc2VydFRleHRNb2RlU3VwcG9ydDoge1xuICAgICAgICAgICAgICAgIHZhbHVlU2V0OiBbXSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wbGV0aW9uSXRlbUtpbmQ6IHtcbiAgICAgICAgICAgICAgdmFsdWVTZXQ6IFtdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRleHRTdXBwb3J0OiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2lnbmF0dXJlSGVscDoge1xuICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWNsYXJhdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIHJlZmVyZW5jZXM6IHtcbiAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZG9jdW1lbnRIaWdobGlnaHQ6IHtcbiAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZG9jdW1lbnRTeW1ib2w6IHtcbiAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgaGllcmFyY2hpY2FsRG9jdW1lbnRTeW1ib2xTdXBwb3J0OiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZm9ybWF0dGluZzoge1xuICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICByYW5nZUZvcm1hdHRpbmc6IHtcbiAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25UeXBlRm9ybWF0dGluZzoge1xuICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvZGVBY3Rpb246IHtcbiAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgY29kZUFjdGlvbkxpdGVyYWxTdXBwb3J0OiB7XG4gICAgICAgICAgICAgIGNvZGVBY3Rpb25LaW5kOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVTZXQ6IFtcIlwiXSwgLy8gVE9ETyBleHBsaWNpdGx5IHN1cHBvcnQgbW9yZT9cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb2RlTGVuczoge1xuICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkb2N1bWVudExpbms6IHtcbiAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVuYW1lOiB7XG4gICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1vbmlrZXI6IHtcbiAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVibGlzaERpYWdub3N0aWNzOiB7XG4gICAgICAgICAgICByZWxhdGVkSW5mb3JtYXRpb246IHRydWUsXG4gICAgICAgICAgICB0YWdTdXBwb3J0OiB7XG4gICAgICAgICAgICAgIC8vIEJMT0NLRUQ6IG9uIHN0ZWVsYnJhaW4vbGludGVyIHN1cHBvcnRpbmcgd2F5cyBvZiBkZW5vdGluZyB1c2VsZXNzIGNvZGUgYW5kIGRlcHJlY2F0ZWQgc3ltYm9sc1xuICAgICAgICAgICAgICB2YWx1ZVNldDogW10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvblN1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgY29kZURlc2NyaXB0aW9uU3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGFTdXBwb3J0OiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FsbEhpZXJhcmNoeToge1xuICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbXBsZW1lbnRhdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIHR5cGVEZWZpbml0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgY29sb3JQcm92aWRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvbGRpbmdSYW5nZTogdW5kZWZpbmVkLFxuICAgICAgICAgIHNlbGVjdGlvblJhbmdlOiB1bmRlZmluZWQsXG4gICAgICAgICAgbGlua2VkRWRpdGluZ1JhbmdlOiB1bmRlZmluZWQsXG4gICAgICAgICAgc2VtYW50aWNUb2tlbnM6IHVuZGVmaW5lZCxcbiAgICAgICAgfSxcbiAgICAgICAgZ2VuZXJhbDoge1xuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uczogdW5kZWZpbmVkLFxuICAgICAgICAgIG1hcmtkb3duOiB1bmRlZmluZWQsXG4gICAgICAgIH0sXG4gICAgICAgIHdpbmRvdzoge1xuICAgICAgICAgIHdvcmtEb25lUHJvZ3Jlc3M6IGZhbHNlLCAvLyBUT0RPOiBzdXBwb3J0XG4gICAgICAgICAgc2hvd01lc3NhZ2U6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzaG93RG9jdW1lbnQ6IHsgc3VwcG9ydDogdHJ1ZSB9LFxuICAgICAgICB9LFxuICAgICAgICBleHBlcmltZW50YWw6IHt9LFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICAvKiogKE9wdGlvbmFsKSBFYXJseSB3aXJlLXVwIG9mIGxpc3RlbmVycyBiZWZvcmUgaW5pdGlhbGl6ZSBtZXRob2QgaXMgc2VudCAqL1xuICBwcm90ZWN0ZWQgcHJlSW5pdGlhbGl6YXRpb24oX2Nvbm5lY3Rpb246IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbik6IHZvaWQge31cblxuICAvKiogKE9wdGlvbmFsKSBMYXRlIHdpcmUtdXAgb2YgbGlzdGVuZXJzIGFmdGVyIGluaXRpYWxpemUgbWV0aG9kIGhhcyBiZWVuIHNlbnQgKi9cbiAgcHJvdGVjdGVkIHBvc3RJbml0aWFsaXphdGlvbihfc2VydmVyOiBBY3RpdmVTZXJ2ZXIpOiB2b2lkIHt9XG5cbiAgLyoqIChPcHRpb25hbCkgRGV0ZXJtaW5lIHdoZXRoZXIgdG8gdXNlIGlwYywgc3RkaW8gb3Igc29ja2V0IHRvIGNvbm5lY3QgdG8gdGhlIHNlcnZlciAqL1xuICBwcm90ZWN0ZWQgZ2V0Q29ubmVjdGlvblR5cGUoKTogQ29ubmVjdGlvblR5cGUge1xuICAgIHJldHVybiB0aGlzLnNvY2tldCAhPSBudWxsID8gXCJzb2NrZXRcIiA6IFwic3RkaW9cIlxuICB9XG5cbiAgLyoqIChPcHRpb25hbCkgUmV0dXJuIHRoZSBuYW1lIG9mIHlvdXIgcm9vdCBjb25maWd1cmF0aW9uIGtleSAqL1xuICBwcm90ZWN0ZWQgZ2V0Um9vdENvbmZpZ3VyYXRpb25LZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJcIlxuICB9XG5cbiAgLyoqIChPcHRpb25hbCkgVHJhbnNmb3JtIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBiZWZvcmUgaXQgaXMgc2VudCB0byB0aGUgc2VydmVyICovXG4gIHByb3RlY3RlZCBtYXBDb25maWd1cmF0aW9uT2JqZWN0KGNvbmZpZ3VyYXRpb246IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIGNvbmZpZ3VyYXRpb25cbiAgfVxuXG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIERldGVybWluZXMgdGhlIGBsYW5ndWFnZUlkYCBzdHJpbmcgdXNlZCBmb3IgYHRleHREb2N1bWVudC9kaWRPcGVuYCBub3RpZmljYXRpb24uIFRoZSBkZWZhdWx0IGlzIHRvIHVzZVxuICAgKiB0aGUgZ3JhbW1hciBuYW1lLlxuICAgKlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgbGlrZSB0aGlzOlxuICAgKlxuICAgKiAgICAgY2xhc3MgTXlMYW5ndWFnZUNsaWVudCBleHRlbmRzIEF1dG9MYW5ndWFnZUNsaWVudCB7XG4gICAqICAgICAgIGdldExhbmd1YWdlSWRGcm9tRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgKiAgICAgICAgIGlmIChlZGl0b3IuZ2V0R3JhbW1hcigpLnNjb3BlTmFtZSA9PT0gXCJzb3VyY2UubXlMYW5ndWFnZVwiKSB7XG4gICAqICAgICAgICAgICByZXR1cm4gXCJteUN1c3R1bUxhbmd1YWdlSWRcIlxuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgICByZXR1cm4gc3VwZXIuZ2V0TGFuZ3VhZ2VJZEZyb21FZGl0b3IoZWRpdG9yKVxuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqXG4gICAqIEBwYXJhbSBlZGl0b3IgQSB7VGV4dEVkaXRvcn0gd2hpY2ggaXMgb3BlbmVkLlxuICAgKiBAcmV0dXJucyBBIHtzdHJpbmd9IG9mIGBsYW5ndWFnZUlkYCB1c2VkIGZvciBgdGV4dERvY3VtZW50L2RpZE9wZW5gIG5vdGlmaWNhdGlvbi5cbiAgICovXG4gIHByb3RlY3RlZCBnZXRMYW5ndWFnZUlkRnJvbUVkaXRvcihlZGl0b3I6IFRleHRFZGl0b3IpOiBzdHJpbmcge1xuICAgIHJldHVybiBlZGl0b3IuZ2V0R3JhbW1hcigpLm5hbWVcbiAgfVxuXG4gIC8vIEhlbHBlciBtZXRob2RzIHRoYXQgYXJlIHVzZWZ1bCBmb3IgaW1wbGVtZW50b3JzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKiBHZXRzIGEgTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uIGZvciBhIGdpdmVuIFRleHRFZGl0b3IgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIGdldENvbm5lY3Rpb25Gb3JFZGl0b3IoZWRpdG9yOiBUZXh0RWRpdG9yKTogUHJvbWlzZTxMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24gfCBudWxsPiB7XG4gICAgY29uc3Qgc2VydmVyID0gYXdhaXQgdGhpcy5fc2VydmVyTWFuYWdlci5nZXRTZXJ2ZXIoZWRpdG9yKVxuICAgIHJldHVybiBzZXJ2ZXIgPyBzZXJ2ZXIuY29ubmVjdGlvbiA6IG51bGxcbiAgfVxuXG4gIC8qKiBSZXN0YXJ0IGFsbCBhY3RpdmUgbGFuZ3VhZ2Ugc2VydmVycyBmb3IgdGhpcyBsYW5ndWFnZSBjbGllbnQgaW4gdGhlIHdvcmtzcGFjZSAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgcmVzdGFydEFsbFNlcnZlcnMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5fc2VydmVyTWFuYWdlci5yZXN0YXJ0QWxsU2VydmVycygpXG4gIH1cblxuICAvLyBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoZSByZXN0IG9mIHRoZSBBdXRvTGFuZ3VhZ2VDbGllbnRcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqIEFjdGl2YXRlIGRvZXMgdmVyeSBsaXR0bGUgZm9yIHBlcmYgcmVhc29ucyAtIGhvb2tzIGluIHZpYSBTZXJ2ZXJNYW5hZ2VyIGZvciBsYXRlciAnYWN0aXZhdGlvbicgKi9cbiAgcHVibGljIGFjdGl2YXRlKCk6IHZvaWQge1xuICAgIHRoaXMuX2Rpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5uYW1lID0gYCR7dGhpcy5nZXRMYW5ndWFnZU5hbWUoKX0gKCR7dGhpcy5nZXRTZXJ2ZXJOYW1lKCl9KWBcbiAgICB0aGlzLmxvZ2dlciA9IHRoaXMuZ2V0TG9nZ2VyKClcbiAgICB0aGlzLl9zZXJ2ZXJNYW5hZ2VyID0gbmV3IFNlcnZlck1hbmFnZXIoXG4gICAgICAocCkgPT4gdGhpcy5zdGFydFNlcnZlcihwKSxcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgKGUpID0+IHRoaXMuc2hvdWxkU3RhcnRGb3JFZGl0b3IoZSksXG4gICAgICAoZmlsZXBhdGgpID0+IHRoaXMuZmlsdGVyQ2hhbmdlV2F0Y2hlZEZpbGVzKGZpbGVwYXRoKSxcbiAgICAgIHRoaXMucmVwb3J0QnVzeVdoaWxlLFxuICAgICAgdGhpcy5nZXRTZXJ2ZXJOYW1lKCksXG4gICAgICAodGV4dEVkaXRvcjogVGV4dEVkaXRvcikgPT4gdGhpcy5kZXRlcm1pbmVQcm9qZWN0UGF0aCh0ZXh0RWRpdG9yKSxcbiAgICAgIHRoaXMuc2h1dGRvd25HcmFjZWZ1bGx5XG4gICAgKVxuICAgIHRoaXMuX3NlcnZlck1hbmFnZXIuc3RhcnRMaXN0ZW5pbmcoKVxuICAgIHByb2Nlc3Mub24oXCJleGl0XCIsICgpID0+IHRoaXMuZXhpdENsZWFudXAuYmluZCh0aGlzKSlcbiAgfVxuXG4gIHByaXZhdGUgZXhpdENsZWFudXAoKTogdm9pZCB7XG4gICAgdGhpcy5fc2VydmVyTWFuYWdlci50ZXJtaW5hdGUoKVxuICB9XG5cbiAgLyoqIERlYWN0aXZhdGUgZGlzcG9zZXMgdGhlIHJlc291cmNlcyB3ZSdyZSB1c2luZyAqL1xuICBwdWJsaWMgYXN5bmMgZGVhY3RpdmF0ZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHRoaXMuX2lzRGVhY3RpdmF0aW5nID0gdHJ1ZVxuICAgIHRoaXMuX2Rpc3Bvc2FibGUuZGlzcG9zZSgpXG4gICAgdGhpcy5fc2VydmVyTWFuYWdlci5zdG9wTGlzdGVuaW5nKClcbiAgICBhd2FpdCB0aGlzLl9zZXJ2ZXJNYW5hZ2VyLnN0b3BBbGxTZXJ2ZXJzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGF3biBhIGdlbmVyYWwgbGFuZ3VhZ2Ugc2VydmVyLiBVc2UgdGhpcyBpbnNpZGUgdGhlIGBzdGFydFNlcnZlclByb2Nlc3NgIG92ZXJyaWRlIGlmIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgaXMgYVxuICAgKiBnZW5lcmFsIGV4ZWN1dGFibGUuIEFsc28gc2VlIHRoZSBgc3Bhd25DaGlsZE5vZGVgIG1ldGhvZC4gSWYgdGhlIG5hbWUgaXMgcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCBpdCBjaGVja3NcbiAgICogYGJpbi9wbGF0Zm9ybS1hcmNoL2V4ZU5hbWVgIGJ5IGRlZmF1bHQsIGFuZCBpZiBkb2Vzbid0IGV4aXN0cyB1c2VzIHRoZSBleGUgb24gUEFUSC4gRm9yIGV4YW1wbGUgb24gV2luZG93cyB4NjQsIGJ5XG4gICAqIHBhc3NpbmcgYHNlcnZlLWRgLCBgYmluL3dpbjMyLXg2NC9leGVOYW1lLmV4ZWAgaXMgc3Bhd25lZCBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBAcGFyYW0gZXhlIFRoZSBgbmFtZWAgb3IgYHBhdGhgIG9mIHRoZSBleGVjdXRhYmxlXG4gICAqIEBwYXJhbSBhcmdzIEFyZ3MgcGFzc2VkIHRvIHNwYXduIHRoZSBleGUuIERlZmF1bHRzIHRvIGBbXWAuXG4gICAqIEBwYXJhbSBvcHRpb25zOiBDaGlsZCBwcm9jZXNzIHNwYXduIG9wdGlvbnMuIERlZmF1bHRzIHRvIGB7fWAuXG4gICAqIEBwYXJhbSByb290UGF0aCBUaGUgcGF0aCBvZiB0aGUgZm9sZGVyIG9mIHRoZSBleGUgZmlsZS4gRGVmYXVsdHMgdG8gYGpvaW4oXCJiaW5cIiwgYCR7cHJvY2Vzcy5wbGF0Zm9ybX0tJHtwcm9jZXNzLmFyY2h9IGApYC5cbiAgICogQHBhcmFtIGV4ZUV4dGVudGlvbiBUaGUgZXh0ZW50aW9uIG9mIHRoZSBleGUgZmlsZS4gRGVmYXVsdHMgdG8gYHByb2Nlc3MucGxhdGZvcm0gPT09IFwid2luMzJcIiA/IFwiLmV4ZVwiIDogXCJcImBcbiAgICovXG4gIHByb3RlY3RlZCBzcGF3bihcbiAgICBleGU6IHN0cmluZyxcbiAgICBhcmdzOiBzdHJpbmdbXSA9IFtdLFxuICAgIG9wdGlvbnM6IGNwLlNwYXduT3B0aW9ucyA9IHt9LFxuICAgIHJvb3RQYXRoID0gVXRpbHMucm9vdFBhdGhEZWZhdWx0LFxuICAgIGV4ZUV4dGVudGlvbiA9IFV0aWxzLmV4ZUV4dGVudGlvbkRlZmF1bHRcbiAgKTogTGFuZ3VhZ2VTZXJ2ZXJQcm9jZXNzIHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1Zyhgc3RhcnRpbmcgXCIke2V4ZX0gJHthcmdzLmpvaW4oXCIgXCIpfVwiYClcbiAgICByZXR1cm4gY3Auc3Bhd24oVXRpbHMuZ2V0RXhlUGF0aChleGUsIHJvb3RQYXRoLCBleGVFeHRlbnRpb24pLCBhcmdzLCBvcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIFNwYXduIGEgbGFuZ3VhZ2Ugc2VydmVyIHVzaW5nIEF0b20ncyBOb2RlanMgcHJvY2VzcyBVc2UgdGhpcyBpbnNpZGUgdGhlIGBzdGFydFNlcnZlclByb2Nlc3NgIG92ZXJyaWRlIGlmIHRoZVxuICAgKiBsYW5ndWFnZSBzZXJ2ZXIgaXMgYSBKYXZhU2NyaXB0IGZpbGUuIEFsc28gc2VlIHRoZSBgc3Bhd25gIG1ldGhvZFxuICAgKi9cbiAgcHJvdGVjdGVkIHNwYXduQ2hpbGROb2RlKGFyZ3M6IHN0cmluZ1tdLCBvcHRpb25zOiBjcC5TcGF3bk9wdGlvbnMgPSB7fSk6IExhbmd1YWdlU2VydmVyUHJvY2VzcyB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoYHN0YXJ0aW5nIGNoaWxkIE5vZGUgXCIke2FyZ3Muam9pbihcIiBcIil9XCJgKVxuICAgIG9wdGlvbnMuZW52ID0gb3B0aW9ucy5lbnYgfHwgT2JqZWN0LmNyZWF0ZShwcm9jZXNzLmVudilcbiAgICBpZiAob3B0aW9ucy5lbnYpIHtcbiAgICAgIG9wdGlvbnMuZW52LkVMRUNUUk9OX1JVTl9BU19OT0RFID0gXCIxXCJcbiAgICAgIG9wdGlvbnMuZW52LkVMRUNUUk9OX05PX0FUVEFDSF9DT05TT0xFID0gXCIxXCJcbiAgICB9XG4gICAgcmV0dXJuIGNwLnNwYXduKHByb2Nlc3MuZXhlY1BhdGgsIGFyZ3MsIG9wdGlvbnMpXG4gIH1cblxuICAvKiogTFNQIGxvZ2dpbmcgaXMgb25seSBzZXQgZm9yIHdhcm5pbmdzICYgZXJyb3JzIGJ5IGRlZmF1bHQgdW5sZXNzIHlvdSB0dXJuIG9uIHRoZSBjb3JlLmRlYnVnTFNQIHNldHRpbmcgKi9cbiAgcHJvdGVjdGVkIGdldExvZ2dlcigpOiBMb2dnZXIge1xuICAgIGNvbnN0IGZpbHRlciA9IGF0b20uY29uZmlnLmdldChcImNvcmUuZGVidWdMU1BcIilcbiAgICAgID8gRmlsdGVyZWRMb2dnZXIuRGV2ZWxvcGVyTGV2ZWxGaWx0ZXJcbiAgICAgIDogRmlsdGVyZWRMb2dnZXIuVXNlckxldmVsRmlsdGVyXG4gICAgcmV0dXJuIG5ldyBGaWx0ZXJlZExvZ2dlcihuZXcgQ29uc29sZUxvZ2dlcih0aGlzLm5hbWUpLCBmaWx0ZXIpXG4gIH1cblxuICAvKiogU3RhcnRzIHRoZSBzZXJ2ZXIgYnkgc3RhcnRpbmcgdGhlIHByb2Nlc3MsIHRoZW4gaW5pdGlhbGl6aW5nIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgYW5kIHN0YXJ0aW5nIGFkYXB0ZXJzICovXG4gIHByaXZhdGUgYXN5bmMgc3RhcnRTZXJ2ZXIocHJvamVjdFBhdGg6IHN0cmluZyk6IFByb21pc2U8QWN0aXZlU2VydmVyPiB7XG4gICAgY29uc3QgbHNQcm9jZXNzID0gYXdhaXQgdGhpcy5yZXBvcnRCdXN5V2hpbGUoXG4gICAgICBgU3RhcnRpbmcgJHt0aGlzLmdldFNlcnZlck5hbWUoKX0gZm9yICR7cGF0aC5iYXNlbmFtZShwcm9qZWN0UGF0aCl9YCxcbiAgICAgIGFzeW5jICgpID0+IHRoaXMuc3RhcnRTZXJ2ZXJQcm9jZXNzKHByb2plY3RQYXRoKVxuICAgIClcbiAgICB0aGlzLmNhcHR1cmVTZXJ2ZXJFcnJvcnMobHNQcm9jZXNzLCBwcm9qZWN0UGF0aClcbiAgICBjb25zdCBjb25uZWN0aW9uID0gbmV3IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbih0aGlzLmNyZWF0ZVJwY0Nvbm5lY3Rpb24obHNQcm9jZXNzKSwgdGhpcy5sb2dnZXIpXG4gICAgdGhpcy5wcmVJbml0aWFsaXphdGlvbihjb25uZWN0aW9uKVxuICAgIGNvbnN0IGluaXRpYWxpemVQYXJhbXMgPSB0aGlzLmdldEluaXRpYWxpemVQYXJhbXMocHJvamVjdFBhdGgsIGxzUHJvY2VzcylcbiAgICBjb25zdCBpbml0aWFsaXphdGlvbiA9IGNvbm5lY3Rpb24uaW5pdGlhbGl6ZShpbml0aWFsaXplUGFyYW1zKVxuICAgIHRoaXMucmVwb3J0QnVzeVdoaWxlKGAke3RoaXMuZ2V0U2VydmVyTmFtZSgpfSBpbml0aWFsaXppbmcgZm9yICR7cGF0aC5iYXNlbmFtZShwcm9qZWN0UGF0aCl9YCwgKCkgPT4gaW5pdGlhbGl6YXRpb24pXG4gICAgY29uc3QgaW5pdGlhbGl6ZVJlc3BvbnNlID0gYXdhaXQgaW5pdGlhbGl6YXRpb25cbiAgICBjb25zdCBuZXdTZXJ2ZXIgPSB7XG4gICAgICBwcm9qZWN0UGF0aCxcbiAgICAgIHByb2Nlc3M6IGxzUHJvY2VzcyxcbiAgICAgIGNvbm5lY3Rpb24sXG4gICAgICBjYXBhYmlsaXRpZXM6IGluaXRpYWxpemVSZXNwb25zZS5jYXBhYmlsaXRpZXMsXG4gICAgICBkaXNwb3NhYmxlOiBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpLFxuICAgICAgYWRkaXRpb25hbFBhdGhzOiBuZXcgU2V0PHN0cmluZz4oKSxcbiAgICB9XG4gICAgdGhpcy5wb3N0SW5pdGlhbGl6YXRpb24obmV3U2VydmVyKVxuICAgIGNvbm5lY3Rpb24uaW5pdGlhbGl6ZWQoKVxuICAgIGNvbm5lY3Rpb24ub24oXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2lzRGVhY3RpdmF0aW5nKSB7XG4gICAgICAgIHRoaXMuX3NlcnZlck1hbmFnZXIuc3RvcFNlcnZlcihuZXdTZXJ2ZXIpXG4gICAgICAgIGlmICghdGhpcy5fc2VydmVyTWFuYWdlci5oYXNTZXJ2ZXJSZWFjaGVkUmVzdGFydExpbWl0KG5ld1NlcnZlcikpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgUmVzdGFydGluZyBsYW5ndWFnZSBzZXJ2ZXIgZm9yIHByb2plY3QgJyR7bmV3U2VydmVyLnByb2plY3RQYXRofSdgKVxuICAgICAgICAgIHRoaXMuX3NlcnZlck1hbmFnZXIuc3RhcnRTZXJ2ZXIocHJvamVjdFBhdGgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIud2FybihgTGFuZ3VhZ2Ugc2VydmVyIGhhcyBleGNlZWRlZCBhdXRvLXJlc3RhcnQgbGltaXQgZm9yIHByb2plY3QgJyR7bmV3U2VydmVyLnByb2plY3RQYXRofSdgKVxuICAgICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihcbiAgICAgICAgICAgIGBUaGUgJHt0aGlzLm5hbWV9IGxhbmd1YWdlIHNlcnZlciBoYXMgZXhpdGVkIGFuZCBleGNlZWRlZCB0aGUgcmVzdGFydCBsaW1pdCBmb3IgcHJvamVjdCAnJHtuZXdTZXJ2ZXIucHJvamVjdFBhdGh9J2BcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgY29uZmlndXJhdGlvbktleSA9IHRoaXMuZ2V0Um9vdENvbmZpZ3VyYXRpb25LZXkoKVxuICAgIGlmIChjb25maWd1cmF0aW9uS2V5KSB7XG4gICAgICBuZXdTZXJ2ZXIuZGlzcG9zYWJsZS5hZGQoXG4gICAgICAgIGF0b20uY29uZmlnLm9ic2VydmUoY29uZmlndXJhdGlvbktleSwgKGNvbmZpZykgPT4ge1xuICAgICAgICAgIGNvbnN0IG1hcHBlZENvbmZpZyA9IHRoaXMubWFwQ29uZmlndXJhdGlvbk9iamVjdChjb25maWcgfHwge30pXG4gICAgICAgICAgaWYgKG1hcHBlZENvbmZpZykge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5kaWRDaGFuZ2VDb25maWd1cmF0aW9uKHtcbiAgICAgICAgICAgICAgc2V0dGluZ3M6IG1hcHBlZENvbmZpZyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMuc3RhcnRFeGNsdXNpdmVBZGFwdGVycyhuZXdTZXJ2ZXIpXG4gICAgcmV0dXJuIG5ld1NlcnZlclxuICB9XG5cbiAgcHJpdmF0ZSBjYXB0dXJlU2VydmVyRXJyb3JzKGxzUHJvY2VzczogTGFuZ3VhZ2VTZXJ2ZXJQcm9jZXNzLCBwcm9qZWN0UGF0aDogc3RyaW5nKTogdm9pZCB7XG4gICAgbHNQcm9jZXNzLm9uKFwiZXJyb3JcIiwgKGVycikgPT4gdGhpcy5vblNwYXduRXJyb3IoZXJyKSlcbiAgICBsc1Byb2Nlc3Mub24oXCJjbG9zZVwiLCAoY29kZSwgc2lnbmFsKSA9PiB0aGlzLm9uU3Bhd25DbG9zZShjb2RlLCBzaWduYWwpKVxuICAgIGxzUHJvY2Vzcy5vbihcImRpc2Nvbm5lY3RcIiwgKCkgPT4gdGhpcy5vblNwYXduRGlzY29ubmVjdCgpKVxuICAgIGxzUHJvY2Vzcy5vbihcImV4aXRcIiwgKGNvZGUsIHNpZ25hbCkgPT4gdGhpcy5vblNwYXduRXhpdChjb2RlLCBzaWduYWwpKVxuICAgIGxzUHJvY2Vzcy5zdGRlcnI/LnNldEVuY29kaW5nKFwidXRmOFwiKVxuICAgIGxzUHJvY2Vzcy5zdGRlcnI/Lm9uKFwiZGF0YVwiLCAoY2h1bms6IEJ1ZmZlcikgPT4gdGhpcy5vblNwYXduU3RkRXJyRGF0YShjaHVuaywgcHJvamVjdFBhdGgpKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiBjYWxsZWQgd2hlbmV2ZXIgdGhlIHNwYXduZWQgc2VydmVyIGBlcnJvcmBzLiBFeHRlbmQgKGNhbGwgc3VwZXIub25TcGF3bkVycm9yKSBvciBvdmVycmlkZSB0aGlzIGlmIHlvdVxuICAgKiBuZWVkIGN1c3RvbSBlcnJvciBoYW5kbGluZ1xuICAgKi9cbiAgcHJvdGVjdGVkIG9uU3Bhd25FcnJvcihlcnI6IEVycm9yKTogdm9pZCB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKFxuICAgICAgYCR7dGhpcy5nZXRTZXJ2ZXJOYW1lKCl9IGxhbmd1YWdlIHNlcnZlciBmb3IgJHt0aGlzLmdldExhbmd1YWdlTmFtZSgpfSB1bmFibGUgdG8gc3RhcnRgLFxuICAgICAge1xuICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGVyci50b1N0cmluZygpLFxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gY2FsbGVkIHdoZW5ldmVyIHRoZSBzcGF3bmVkIHNlcnZlciBgY2xvc2Vgcy4gRXh0ZW5kIChjYWxsIHN1cGVyLm9uU3Bhd25DbG9zZSkgb3Igb3ZlcnJpZGUgdGhpcyBpZiB5b3VcbiAgICogbmVlZCBjdXN0b20gY2xvc2UgaGFuZGxpbmdcbiAgICovXG4gIHByb3RlY3RlZCBvblNwYXduQ2xvc2UoY29kZTogbnVtYmVyIHwgbnVsbCwgc2lnbmFsOiBOb2RlSlMuU2lnbmFscyB8IG51bGwpOiB2b2lkIHtcbiAgICBpZiAoY29kZSAhPT0gMCAmJiBzaWduYWwgPT09IG51bGwpIHtcbiAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihcbiAgICAgICAgYCR7dGhpcy5nZXRTZXJ2ZXJOYW1lKCl9IGxhbmd1YWdlIHNlcnZlciBmb3IgJHt0aGlzLmdldExhbmd1YWdlTmFtZSgpfSB3YXMgY2xvc2VkIHdpdGggY29kZTogJHtjb2RlfS5gXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiBjYWxsZWQgd2hlbmV2ZXIgdGhlIHNwYXduZWQgc2VydmVyIGBkaXNjb25uZWN0YHMuIEV4dGVuZCAoY2FsbCBzdXBlci5vblNwYXduRGlzY29ubmVjdCkgb3Igb3ZlcnJpZGVcbiAgICogdGhpcyBpZiB5b3UgbmVlZCBjdXN0b20gZGlzY29ubmVjdCBoYW5kbGluZ1xuICAgKi9cbiAgcHJvdGVjdGVkIG9uU3Bhd25EaXNjb25uZWN0KCk6IHZvaWQge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKGAke3RoaXMuZ2V0U2VydmVyTmFtZSgpfSBsYW5ndWFnZSBzZXJ2ZXIgZm9yICR7dGhpcy5nZXRMYW5ndWFnZU5hbWUoKX0gZ290IGRpc2Nvbm5lY3RlZC5gKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiBjYWxsZWQgd2hlbmV2ZXIgdGhlIHNwYXduZWQgc2VydmVyIGBleGl0YHMuIEV4dGVuZCAoY2FsbCBzdXBlci5vblNwYXduRXhpdCkgb3Igb3ZlcnJpZGUgdGhpcyBpZiB5b3VcbiAgICogbmVlZCBjdXN0b20gZXhpdCBoYW5kbGluZ1xuICAgKi9cbiAgcHJvdGVjdGVkIG9uU3Bhd25FeGl0KGNvZGU6IG51bWJlciB8IG51bGwsIHNpZ25hbDogTm9kZUpTLlNpZ25hbHMgfCBudWxsKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoYGV4aXQ6IGNvZGUgJHtjb2RlfSBzaWduYWwgJHtzaWduYWx9YClcbiAgfVxuXG4gIC8qKiAoT3B0aW9uYWwpIEZpbmRzIHRoZSBwcm9qZWN0IHBhdGguIElmIHRoZXJlIGlzIGEgY3VzdG9tIGxvZ2ljIGZvciBmaW5kaW5nIHByb2plY3RzIG92ZXJyaWRlIHRoaXMgbWV0aG9kLiAqL1xuICBwcm90ZWN0ZWQgZGV0ZXJtaW5lUHJvamVjdFBhdGgodGV4dEVkaXRvcjogVGV4dEVkaXRvcik6IHN0cmluZyB8IG51bGwge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gdGV4dEVkaXRvci5nZXRQYXRoKClcbiAgICAvLyBUT0RPIGNhbiBmaWxlUGF0aCBiZSBudWxsXG4gICAgaWYgKGZpbGVQYXRoID09PSBudWxsIHx8IGZpbGVQYXRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIGNvbnN0IHByb2plY3RQYXRoID0gdGhpcy5fc2VydmVyTWFuYWdlci5nZXROb3JtYWxpemVkUHJvamVjdFBhdGhzKCkuZmluZCgoZCkgPT4gZmlsZVBhdGguc3RhcnRzV2l0aChkKSlcbiAgICBpZiAocHJvamVjdFBhdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHByb2plY3RQYXRoXG4gICAgfVxuXG4gICAgY29uc3Qgc2VydmVyV2l0aENsYWltID0gdGhpcy5fc2VydmVyTWFuYWdlclxuICAgICAgLmdldEFjdGl2ZVNlcnZlcnMoKVxuICAgICAgLmZpbmQoKHNlcnZlcikgPT4gc2VydmVyLmFkZGl0aW9uYWxQYXRocz8uaGFzKHBhdGguZGlybmFtZShmaWxlUGF0aCkpKVxuICAgIGlmIChzZXJ2ZXJXaXRoQ2xhaW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVBhdGgoc2VydmVyV2l0aENsYWltLnByb2plY3RQYXRoKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiBjYWxsZWQgd2hlbmV2ZXIgdGhlIHNwYXduZWQgc2VydmVyIHJldHVybnMgYGRhdGFgIGluIGBzdGRlcnJgIEV4dGVuZCAoY2FsbCBzdXBlci5vblNwYXduU3RkRXJyRGF0YSkgb3JcbiAgICogb3ZlcnJpZGUgdGhpcyBpZiB5b3UgbmVlZCBjdXN0b20gc3RkZXJyIGRhdGEgaGFuZGxpbmdcbiAgICovXG4gIHByb3RlY3RlZCBvblNwYXduU3RkRXJyRGF0YShjaHVuazogQnVmZmVyLCBwcm9qZWN0UGF0aDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgZXJyb3JTdHJpbmcgPSBjaHVuay50b1N0cmluZygpXG4gICAgdGhpcy5oYW5kbGVTZXJ2ZXJTdGRlcnIoZXJyb3JTdHJpbmcsIHByb2plY3RQYXRoKVxuICAgIC8vIEtlZXAgdGhlIGxhc3QgNSBsaW5lcyBmb3IgcGFja2FnZXMgdG8gdXNlIGluIG1lc3NhZ2VzXG4gICAgdGhpcy5wcm9jZXNzU3RkRXJyID0gKHRoaXMucHJvY2Vzc1N0ZEVyciArIGVycm9yU3RyaW5nKS5zcGxpdChcIlxcblwiKS5zbGljZSgtNSkuam9pbihcIlxcblwiKVxuICB9XG5cbiAgLyoqIENyZWF0ZXMgdGhlIFJQQyBjb25uZWN0aW9uIHdoaWNoIGNhbiBiZSBpcGMsIHNvY2tldCBvciBzdGRpbyAqL1xuICBwcml2YXRlIGNyZWF0ZVJwY0Nvbm5lY3Rpb24obHNQcm9jZXNzOiBMYW5ndWFnZVNlcnZlclByb2Nlc3MpOiBycGMuTWVzc2FnZUNvbm5lY3Rpb24ge1xuICAgIGxldCByZWFkZXI6IHJwYy5NZXNzYWdlUmVhZGVyXG4gICAgbGV0IHdyaXRlcjogcnBjLk1lc3NhZ2VXcml0ZXJcbiAgICBjb25zdCBjb25uZWN0aW9uVHlwZSA9IHRoaXMuZ2V0Q29ubmVjdGlvblR5cGUoKVxuICAgIHN3aXRjaCAoY29ubmVjdGlvblR5cGUpIHtcbiAgICAgIGNhc2UgXCJpcGNcIjpcbiAgICAgICAgcmVhZGVyID0gbmV3IHJwY05vZGUuSVBDTWVzc2FnZVJlYWRlcihsc1Byb2Nlc3MgYXMgY3AuQ2hpbGRQcm9jZXNzKVxuICAgICAgICB3cml0ZXIgPSBuZXcgcnBjTm9kZS5JUENNZXNzYWdlV3JpdGVyKGxzUHJvY2VzcyBhcyBjcC5DaGlsZFByb2Nlc3MpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwic29ja2V0XCI6XG4gICAgICAgIHJlYWRlciA9IG5ldyBycGNOb2RlLlNvY2tldE1lc3NhZ2VSZWFkZXIodGhpcy5zb2NrZXQpXG4gICAgICAgIHdyaXRlciA9IG5ldyBycGNOb2RlLlNvY2tldE1lc3NhZ2VXcml0ZXIodGhpcy5zb2NrZXQpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwic3RkaW9cIjpcbiAgICAgICAgaWYgKGxzUHJvY2Vzcy5zdGRpbiAhPT0gbnVsbCAmJiBsc1Byb2Nlc3Muc3Rkb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgcmVhZGVyID0gbmV3IHJwY05vZGUuU3RyZWFtTWVzc2FnZVJlYWRlcihsc1Byb2Nlc3Muc3Rkb3V0KVxuICAgICAgICAgIHdyaXRlciA9IG5ldyBycGNOb2RlLlN0cmVhbU1lc3NhZ2VXcml0ZXIobHNQcm9jZXNzLnN0ZGluKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgYFRoZSBsYW5ndWFnZSBzZXJ2ZXIgcHJvY2VzcyBmb3IgJHt0aGlzLmdldExhbmd1YWdlTmFtZSgpfSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgc3RkaW4gYW5kIHN0ZG91dGBcbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIFV0aWxzLmFzc2VydFVucmVhY2hhYmxlKFwic3RkaW9cIiBhcyBuZXZlcilcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFV0aWxzLmFzc2VydFVucmVhY2hhYmxlKGNvbm5lY3Rpb25UeXBlKVxuICAgIH1cblxuICAgIHJldHVybiBycGMuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24ocmVhZGVyLCB3cml0ZXIsIHtcbiAgICAgIGxvZzogKC4uLl9hcmdzOiBhbnlbXSkgPT4ge30sXG4gICAgICB3YXJuOiAoLi4uX2FyZ3M6IGFueVtdKSA9PiB7fSxcbiAgICAgIGluZm86ICguLi5fYXJnczogYW55W10pID0+IHt9LFxuICAgICAgZXJyb3I6ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihhcmdzKVxuICAgICAgfSxcbiAgICB9KVxuICB9XG5cbiAgLyoqIFN0YXJ0IGFkYXB0ZXJzIHRoYXQgYXJlIG5vdCBzaGFyZWQgYmV0d2VlbiBzZXJ2ZXJzICovXG4gIHByaXZhdGUgc3RhcnRFeGNsdXNpdmVBZGFwdGVycyhzZXJ2ZXI6IEFjdGl2ZVNlcnZlcik6IHZvaWQge1xuICAgIEFwcGx5RWRpdEFkYXB0ZXIuYXR0YWNoKHNlcnZlci5jb25uZWN0aW9uKVxuICAgIE5vdGlmaWNhdGlvbnNBZGFwdGVyLmF0dGFjaChzZXJ2ZXIuY29ubmVjdGlvbiwgdGhpcy5uYW1lLCBzZXJ2ZXIucHJvamVjdFBhdGgpXG5cbiAgICBpZiAoRG9jdW1lbnRTeW5jQWRhcHRlci5jYW5BZGFwdChzZXJ2ZXIuY2FwYWJpbGl0aWVzKSkge1xuICAgICAgY29uc3QgZG9jU3luY0FkYXB0ZXIgPSBuZXcgRG9jdW1lbnRTeW5jQWRhcHRlcihcbiAgICAgICAgc2VydmVyLmNvbm5lY3Rpb24sXG4gICAgICAgIChlZGl0b3IpID0+IHRoaXMuc2hvdWxkU3luY0ZvckVkaXRvcihlZGl0b3IsIHNlcnZlci5wcm9qZWN0UGF0aCksXG4gICAgICAgIHNlcnZlci5jYXBhYmlsaXRpZXMudGV4dERvY3VtZW50U3luYyxcbiAgICAgICAgdGhpcy5yZXBvcnRCdXN5V2hpbGUsXG4gICAgICAgIChlZGl0b3IpID0+IHRoaXMuZ2V0TGFuZ3VhZ2VJZEZyb21FZGl0b3IoZWRpdG9yKVxuICAgICAgKVxuICAgICAgc2VydmVyLmRpc3Bvc2FibGUuYWRkKGRvY1N5bmNBZGFwdGVyKVxuICAgIH1cblxuICAgIGNvbnN0IGxpbnRlclB1c2hWMiA9IG5ldyBMaW50ZXJQdXNoVjJBZGFwdGVyKHNlcnZlci5jb25uZWN0aW9uKVxuICAgIGlmICh0aGlzLl9saW50ZXJEZWxlZ2F0ZSAhPSBudWxsKSB7XG4gICAgICBsaW50ZXJQdXNoVjIuYXR0YWNoKHRoaXMuX2xpbnRlckRlbGVnYXRlKVxuICAgIH1cbiAgICBzZXJ2ZXIuZGlzcG9zYWJsZS5hZGQobGludGVyUHVzaFYyKVxuXG4gICAgY29uc3QgbG9nZ2luZ0NvbnNvbGUgPSBuZXcgTG9nZ2luZ0NvbnNvbGVBZGFwdGVyKHNlcnZlci5jb25uZWN0aW9uKVxuICAgIGlmICh0aGlzLl9jb25zb2xlRGVsZWdhdGUgIT0gbnVsbCkge1xuICAgICAgbG9nZ2luZ0NvbnNvbGUuYXR0YWNoKHRoaXMuX2NvbnNvbGVEZWxlZ2F0ZSh7IGlkOiB0aGlzLm5hbWUsIG5hbWU6IHRoaXMuZ2V0TGFuZ3VhZ2VOYW1lKCkgfSkpXG4gICAgfVxuICAgIHNlcnZlci5kaXNwb3NhYmxlLmFkZChsb2dnaW5nQ29uc29sZSlcblxuICAgIGxldCBzaWduYXR1cmVIZWxwQWRhcHRlcjogU2lnbmF0dXJlSGVscEFkYXB0ZXIgfCB1bmRlZmluZWRcbiAgICBpZiAoU2lnbmF0dXJlSGVscEFkYXB0ZXIuY2FuQWRhcHQoc2VydmVyLmNhcGFiaWxpdGllcykpIHtcbiAgICAgIHNpZ25hdHVyZUhlbHBBZGFwdGVyID0gbmV3IFNpZ25hdHVyZUhlbHBBZGFwdGVyKHNlcnZlciwgdGhpcy5nZXRHcmFtbWFyU2NvcGVzKCkpXG4gICAgICBpZiAodGhpcy5fc2lnbmF0dXJlSGVscFJlZ2lzdHJ5ICE9IG51bGwpIHtcbiAgICAgICAgc2lnbmF0dXJlSGVscEFkYXB0ZXIuYXR0YWNoKHRoaXMuX3NpZ25hdHVyZUhlbHBSZWdpc3RyeSlcbiAgICAgIH1cbiAgICAgIHNlcnZlci5kaXNwb3NhYmxlLmFkZChzaWduYXR1cmVIZWxwQWRhcHRlcilcbiAgICB9XG5cbiAgICB0aGlzLl9zZXJ2ZXJBZGFwdGVycy5zZXQoc2VydmVyLCB7XG4gICAgICBsaW50ZXJQdXNoVjIsXG4gICAgICBsb2dnaW5nQ29uc29sZSxcbiAgICAgIHNpZ25hdHVyZUhlbHBBZGFwdGVyLFxuICAgIH0pXG5cbiAgICBTaG93RG9jdW1lbnRBZGFwdGVyLmF0dGFjaChzZXJ2ZXIuY29ubmVjdGlvbilcblxuICAgIHNlcnZlci5jb25uZWN0aW9uLm9uV29ya3NwYWNlRm9sZGVycygoKSA9PiB0aGlzLl9zZXJ2ZXJNYW5hZ2VyLmdldFdvcmtzcGFjZUZvbGRlcnMoKSlcbiAgfVxuXG4gIHB1YmxpYyBzaG91bGRTeW5jRm9yRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvciwgcHJvamVjdFBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzRmlsZUluUHJvamVjdChlZGl0b3IsIHByb2plY3RQYXRoKSAmJiB0aGlzLnNob3VsZFN0YXJ0Rm9yRWRpdG9yKGVkaXRvcilcbiAgfVxuXG4gIHByb3RlY3RlZCBpc0ZpbGVJblByb2plY3QoZWRpdG9yOiBUZXh0RWRpdG9yLCBwcm9qZWN0UGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChlZGl0b3IuZ2V0UGF0aCgpIHx8IFwiXCIpLnN0YXJ0c1dpdGgocHJvamVjdFBhdGgpXG4gIH1cblxuICAvLyBBdXRvY29tcGxldGUrIHZpYSBMUyBjb21wbGV0aW9uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRvIG92ZXJyaWRlIHRvIHJldHVybiBhbiBhcnJheSBvZiBncmFtbWFyIHNjb3BlcyB0aGF0IHNob3VsZCBub3QgYmUgdXNlZCBmb3IgYXV0b2NvbXBsZXRpb24uXG4gICAqXG4gICAqIFVzdWFsbHkgdGhhdCdzIHVzZWQgZm9yIGRpc2FibGluZyBhdXRvY29tcGxldGUgaW5zaWRlIGNvbW1lbnRzLFxuICAgKlxuICAgKiBAZXhhbXBsZSBJZiB0aGUgZ3JhbW1hciBzY29wZXMgYXJlIFsgJy5zb3VyY2UuanMnIF0sIGBnZXRBdXRvY29tcGxldGVEaXNhYmxlZFNjb3Blc2AgbWF5IHJldHVybiBbICcuc291cmNlLmpzIC5jb21tZW50JyBdLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldEF1dG9jb21wbGV0ZURpc2FibGVkU2NvcGVzKCk6IEFycmF5PHN0cmluZz4ge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgcHVibGljIHByb3ZpZGVBdXRvY29tcGxldGUoKTogYWMuQXV0b2NvbXBsZXRlUHJvdmlkZXIge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RvcjogdGhpcy5nZXRHcmFtbWFyU2NvcGVzKClcbiAgICAgICAgLm1hcCgoZykgPT4gZ3JhbW1hclNjb3BlVG9BdXRvQ29tcGxldGVTZWxlY3RvcihnKSlcbiAgICAgICAgLmpvaW4oXCIsIFwiKSxcbiAgICAgIGRpc2FibGVGb3JTZWxlY3RvcjogdGhpcy5nZXRBdXRvY29tcGxldGVEaXNhYmxlZFNjb3BlcygpXG4gICAgICAgIC5tYXAoKGcpID0+IGdyYW1tYXJTY29wZVRvQXV0b0NvbXBsZXRlU2VsZWN0b3IoZykpXG4gICAgICAgIC5qb2luKFwiLCBcIiksXG4gICAgICBpbmNsdXNpb25Qcmlvcml0eTogMSxcbiAgICAgIHN1Z2dlc3Rpb25Qcmlvcml0eTogMixcbiAgICAgIGV4Y2x1ZGVMb3dlclByaW9yaXR5OiBmYWxzZSxcbiAgICAgIGZpbHRlclN1Z2dlc3Rpb25zOiB0cnVlLFxuICAgICAgZ2V0U3VnZ2VzdGlvbnM6IHRoaXMuZ2V0U3VnZ2VzdGlvbnMuYmluZCh0aGlzKSxcbiAgICAgIG9uRGlkSW5zZXJ0U3VnZ2VzdGlvbjogKGV2ZW50KSA9PiB7XG4gICAgICAgIEF1dG9jb21wbGV0ZUFkYXB0ZXIuYXBwbHlBZGRpdGlvbmFsVGV4dEVkaXRzKGV2ZW50KVxuICAgICAgICB0aGlzLm9uRGlkSW5zZXJ0U3VnZ2VzdGlvbihldmVudClcbiAgICAgIH0sXG4gICAgICBnZXRTdWdnZXN0aW9uRGV0YWlsc09uU2VsZWN0OiB0aGlzLmdldFN1Z2dlc3Rpb25EZXRhaWxzT25TZWxlY3QuYmluZCh0aGlzKSxcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0U3VnZ2VzdGlvbnMocmVxdWVzdDogYWMuU3VnZ2VzdGlvbnNSZXF1ZXN0ZWRFdmVudCk6IFByb21pc2U8YWMuQW55U3VnZ2VzdGlvbltdPiB7XG4gICAgY29uc3Qgc2VydmVyID0gYXdhaXQgdGhpcy5fc2VydmVyTWFuYWdlci5nZXRTZXJ2ZXIocmVxdWVzdC5lZGl0b3IpXG4gICAgaWYgKHNlcnZlciA9PSBudWxsIHx8ICFBdXRvY29tcGxldGVBZGFwdGVyLmNhbkFkYXB0KHNlcnZlci5jYXBhYmlsaXRpZXMpKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG5cbiAgICB0aGlzLmF1dG9Db21wbGV0ZSA9IHRoaXMuYXV0b0NvbXBsZXRlIHx8IG5ldyBBdXRvY29tcGxldGVBZGFwdGVyKClcbiAgICB0aGlzLl9sYXN0QXV0b2NvbXBsZXRlUmVxdWVzdCA9IHJlcXVlc3RcbiAgICByZXR1cm4gdGhpcy5hdXRvQ29tcGxldGUuZ2V0U3VnZ2VzdGlvbnMoXG4gICAgICBzZXJ2ZXIsXG4gICAgICByZXF1ZXN0LFxuICAgICAgdGhpcy5vbkRpZENvbnZlcnRBdXRvY29tcGxldGUsXG4gICAgICBhdG9tLmNvbmZpZy5nZXQoXCJhdXRvY29tcGxldGUtcGx1cy5taW5pbXVtV29yZExlbmd0aFwiKVxuICAgIClcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBnZXRTdWdnZXN0aW9uRGV0YWlsc09uU2VsZWN0KHN1Z2dlc3Rpb246IGFjLkFueVN1Z2dlc3Rpb24pOiBQcm9taXNlPGFjLkFueVN1Z2dlc3Rpb24gfCBudWxsPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2xhc3RBdXRvY29tcGxldGVSZXF1ZXN0XG4gICAgaWYgKHJlcXVlc3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgY29uc3Qgc2VydmVyID0gYXdhaXQgdGhpcy5fc2VydmVyTWFuYWdlci5nZXRTZXJ2ZXIocmVxdWVzdC5lZGl0b3IpXG4gICAgaWYgKHNlcnZlciA9PSBudWxsIHx8ICFBdXRvY29tcGxldGVBZGFwdGVyLmNhblJlc29sdmUoc2VydmVyLmNhcGFiaWxpdGllcykgfHwgdGhpcy5hdXRvQ29tcGxldGUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hdXRvQ29tcGxldGUuY29tcGxldGVTdWdnZXN0aW9uKHNlcnZlciwgc3VnZ2VzdGlvbiwgcmVxdWVzdCwgdGhpcy5vbkRpZENvbnZlcnRBdXRvY29tcGxldGUpXG4gIH1cblxuICBwcm90ZWN0ZWQgb25EaWRDb252ZXJ0QXV0b2NvbXBsZXRlKFxuICAgIF9jb21wbGV0aW9uSXRlbTogbHMuQ29tcGxldGlvbkl0ZW0sXG4gICAgX3N1Z2dlc3Rpb246IGFjLkFueVN1Z2dlc3Rpb24sXG4gICAgX3JlcXVlc3Q6IGFjLlN1Z2dlc3Rpb25zUmVxdWVzdGVkRXZlbnRcbiAgKTogdm9pZCB7fVxuXG4gIHByb3RlY3RlZCBvbkRpZEluc2VydFN1Z2dlc3Rpb24oX2FyZzogYWMuU3VnZ2VzdGlvbkluc2VydGVkRXZlbnQpOiB2b2lkIHt9XG5cbiAgLy8gRGVmaW5pdGlvbnMgdmlhIExTIGRvY3VtZW50SGlnaGxpZ2h0IGFuZCBnb3RvRGVmaW5pdGlvbi0tLS0tLS0tLS0tLVxuICBwdWJsaWMgcHJvdmlkZURlZmluaXRpb25zKCk6IGF0b21JZGUuRGVmaW5pdGlvblByb3ZpZGVyIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgcHJpb3JpdHk6IDIwLFxuICAgICAgZ3JhbW1hclNjb3BlczogdGhpcy5nZXRHcmFtbWFyU2NvcGVzKCksXG4gICAgICB3b3JkUmVnRXhwOiBudWxsLCAvLyBUT0RPIHBhc3MgUmVnRXhwXG4gICAgICBnZXREZWZpbml0aW9uOiB0aGlzLmdldERlZmluaXRpb24uYmluZCh0aGlzKSxcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0RGVmaW5pdGlvbihlZGl0b3I6IFRleHRFZGl0b3IsIHBvaW50OiBQb2ludCk6IFByb21pc2U8YXRvbUlkZS5EZWZpbml0aW9uUXVlcnlSZXN1bHQgfCBudWxsPiB7XG4gICAgY29uc3Qgc2VydmVyID0gYXdhaXQgdGhpcy5fc2VydmVyTWFuYWdlci5nZXRTZXJ2ZXIoZWRpdG9yKVxuICAgIGlmIChzZXJ2ZXIgPT0gbnVsbCB8fCAhRGVmaW5pdGlvbkFkYXB0ZXIuY2FuQWRhcHQoc2VydmVyLmNhcGFiaWxpdGllcykpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgdGhpcy5kZWZpbml0aW9ucyA9IHRoaXMuZGVmaW5pdGlvbnMgfHwgbmV3IERlZmluaXRpb25BZGFwdGVyKClcbiAgICBjb25zdCBxdWVyeSA9IGF3YWl0IHRoaXMuZGVmaW5pdGlvbnMuZ2V0RGVmaW5pdGlvbihcbiAgICAgIHNlcnZlci5jb25uZWN0aW9uLFxuICAgICAgc2VydmVyLmNhcGFiaWxpdGllcyxcbiAgICAgIHRoaXMuZ2V0TGFuZ3VhZ2VOYW1lKCksXG4gICAgICBlZGl0b3IsXG4gICAgICBwb2ludFxuICAgIClcblxuICAgIGlmIChxdWVyeSAhPT0gbnVsbCAmJiBzZXJ2ZXIuYWRkaXRpb25hbFBhdGhzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHBvcHVsYXRlIGFkZGl0aW9uYWxQYXRocyBiYXNlZCBvbiBkZWZpbml0aW9uc1xuICAgICAgLy8gSW5kaWNhdGVzIHRoYXQgdGhlIGxhbmd1YWdlIHNlcnZlciBjYW4gc3VwcG9ydCBMU1AgZnVuY3Rpb25hbGl0eSBmb3Igb3V0IG9mIHByb2plY3QgZmlsZXMgaW5kaWNhdGVkIGJ5IGB0ZXh0RG9jdW1lbnQvZGVmaW5pdGlvbmAgcmVzcG9uc2VzLlxuICAgICAgZm9yIChjb25zdCBkZWYgb2YgcXVlcnkuZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgY29uc2lkZXJBZGRpdGlvbmFsUGF0aChzZXJ2ZXIgYXMgQWN0aXZlU2VydmVyICYgeyBhZGRpdGlvbmFsUGF0aHM6IFNldDxzdHJpbmc+IH0sIHBhdGguZGlybmFtZShkZWYucGF0aCkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1ZXJ5XG4gIH1cblxuICAvLyBPdXRsaW5lIFZpZXcgdmlhIExTIGRvY3VtZW50U3ltYm9sLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHB1YmxpYyBwcm92aWRlT3V0bGluZXMoKTogYXRvbUlkZS5PdXRsaW5lUHJvdmlkZXIge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBncmFtbWFyU2NvcGVzOiB0aGlzLmdldEdyYW1tYXJTY29wZXMoKSxcbiAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgZ2V0T3V0bGluZTogdGhpcy5nZXRPdXRsaW5lLmJpbmQodGhpcyksXG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGdldE91dGxpbmUoZWRpdG9yOiBUZXh0RWRpdG9yKTogUHJvbWlzZTxhdG9tSWRlLk91dGxpbmUgfCBudWxsPiB7XG4gICAgY29uc3Qgc2VydmVyID0gYXdhaXQgdGhpcy5fc2VydmVyTWFuYWdlci5nZXRTZXJ2ZXIoZWRpdG9yKVxuICAgIGlmIChzZXJ2ZXIgPT0gbnVsbCB8fCAhT3V0bGluZVZpZXdBZGFwdGVyLmNhbkFkYXB0KHNlcnZlci5jYXBhYmlsaXRpZXMpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHRoaXMub3V0bGluZVZpZXcgPSB0aGlzLm91dGxpbmVWaWV3IHx8IG5ldyBPdXRsaW5lVmlld0FkYXB0ZXIoKVxuICAgIHJldHVybiB0aGlzLm91dGxpbmVWaWV3LmdldE91dGxpbmUoc2VydmVyLmNvbm5lY3Rpb24sIGVkaXRvcilcbiAgfVxuXG4gIC8vIENhbGwgSGllcmFyY2h5IFZpZXcgdmlhIExTIGNhbGxIaWVyYXJjaHktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcHVibGljIHByb3ZpZGVDYWxsSGllcmFyY2h5KCk6IGF0b21JZGUuQ2FsbEhpZXJhcmNoeVByb3ZpZGVyIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZ3JhbW1hclNjb3BlczogdGhpcy5nZXRHcmFtbWFyU2NvcGVzKCksXG4gICAgICBwcmlvcml0eTogMSxcbiAgICAgIGdldEluY29taW5nQ2FsbEhpZXJhcmNoeTogdGhpcy5nZXRJbmNvbWluZ0NhbGxIaWVyYXJjaHkuYmluZCh0aGlzKSxcbiAgICAgIGdldE91dGdvaW5nQ2FsbEhpZXJhcmNoeTogdGhpcy5nZXRPdXRnb2luZ0NhbGxIaWVyYXJjaHkuYmluZCh0aGlzKSxcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0SW5jb21pbmdDYWxsSGllcmFyY2h5KFxuICAgIGVkaXRvcjogVGV4dEVkaXRvcixcbiAgICBwb2ludDogUG9pbnRcbiAgKTogUHJvbWlzZTxhdG9tSWRlLkNhbGxIaWVyYXJjaHk8XCJpbmNvbWluZ1wiPiB8IG51bGw+IHtcbiAgICBjb25zdCBzZXJ2ZXIgPSBhd2FpdCB0aGlzLl9zZXJ2ZXJNYW5hZ2VyLmdldFNlcnZlcihlZGl0b3IpXG4gICAgaWYgKHNlcnZlciA9PT0gbnVsbCB8fCAhQ2FsbEhpZXJhcmNoeUFkYXB0ZXIuY2FuQWRhcHQoc2VydmVyLmNhcGFiaWxpdGllcykpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIHRoaXMuY2FsbEhpZXJhcmNoeSA9IHRoaXMuY2FsbEhpZXJhcmNoeSA/PyBDYWxsSGllcmFyY2h5QWRhcHRlclxuICAgIHJldHVybiB0aGlzLmNhbGxIaWVyYXJjaHkuZ2V0Q2FsbEhpZXJhcmNoeShzZXJ2ZXIuY29ubmVjdGlvbiwgZWRpdG9yLCBwb2ludCwgXCJpbmNvbWluZ1wiKVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGdldE91dGdvaW5nQ2FsbEhpZXJhcmNoeShcbiAgICBlZGl0b3I6IFRleHRFZGl0b3IsXG4gICAgcG9pbnQ6IFBvaW50XG4gICk6IFByb21pc2U8YXRvbUlkZS5DYWxsSGllcmFyY2h5PFwib3V0Z29pbmdcIj4gfCBudWxsPiB7XG4gICAgY29uc3Qgc2VydmVyID0gYXdhaXQgdGhpcy5fc2VydmVyTWFuYWdlci5nZXRTZXJ2ZXIoZWRpdG9yKVxuICAgIGlmIChzZXJ2ZXIgPT09IG51bGwgfHwgIUNhbGxIaWVyYXJjaHlBZGFwdGVyLmNhbkFkYXB0KHNlcnZlci5jYXBhYmlsaXRpZXMpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICB0aGlzLmNhbGxIaWVyYXJjaHkgPSB0aGlzLmNhbGxIaWVyYXJjaHkgPz8gQ2FsbEhpZXJhcmNoeUFkYXB0ZXJcbiAgICByZXR1cm4gdGhpcy5jYWxsSGllcmFyY2h5LmdldENhbGxIaWVyYXJjaHkoc2VydmVyLmNvbm5lY3Rpb24sIGVkaXRvciwgcG9pbnQsIFwib3V0Z29pbmdcIilcbiAgfVxuXG4gIC8vIExpbnRlciBwdXNoIHYyIEFQSSB2aWEgTFMgcHVibGlzaERpYWdub3N0aWNzXG4gIHB1YmxpYyBjb25zdW1lTGludGVyVjIocmVnaXN0ZXJJbmRpZTogKHBhcmFtczogeyBuYW1lOiBzdHJpbmcgfSkgPT4gbGludGVyLkluZGllRGVsZWdhdGUpOiB2b2lkIHtcbiAgICB0aGlzLl9saW50ZXJEZWxlZ2F0ZSA9IHJlZ2lzdGVySW5kaWUoeyBuYW1lOiB0aGlzLm5hbWUgfSlcbiAgICBpZiAodGhpcy5fbGludGVyRGVsZWdhdGUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgdGhpcy5fc2VydmVyTWFuYWdlci5nZXRBY3RpdmVTZXJ2ZXJzKCkpIHtcbiAgICAgIGNvbnN0IGxpbnRlclB1c2hWMiA9IHRoaXMuZ2V0U2VydmVyQWRhcHRlcihzZXJ2ZXIsIFwibGludGVyUHVzaFYyXCIpXG4gICAgICBpZiAobGludGVyUHVzaFYyICE9IG51bGwpIHtcbiAgICAgICAgbGludGVyUHVzaFYyLmF0dGFjaCh0aGlzLl9saW50ZXJEZWxlZ2F0ZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBGaW5kIFJlZmVyZW5jZXMgdmlhIExTIGZpbmRSZWZlcmVuY2VzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHB1YmxpYyBwcm92aWRlRmluZFJlZmVyZW5jZXMoKTogYXRvbUlkZS5GaW5kUmVmZXJlbmNlc1Byb3ZpZGVyIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNFZGl0b3JTdXBwb3J0ZWQ6IChlZGl0b3I6IFRleHRFZGl0b3IpID0+IHRoaXMuZ2V0R3JhbW1hclNjb3BlcygpLmluY2x1ZGVzKGVkaXRvci5nZXRHcmFtbWFyKCkuc2NvcGVOYW1lKSxcbiAgICAgIGZpbmRSZWZlcmVuY2VzOiB0aGlzLmdldFJlZmVyZW5jZXMuYmluZCh0aGlzKSxcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0UmVmZXJlbmNlcyhlZGl0b3I6IFRleHRFZGl0b3IsIHBvaW50OiBQb2ludCk6IFByb21pc2U8YXRvbUlkZS5GaW5kUmVmZXJlbmNlc1JldHVybiB8IG51bGw+IHtcbiAgICBjb25zdCBzZXJ2ZXIgPSBhd2FpdCB0aGlzLl9zZXJ2ZXJNYW5hZ2VyLmdldFNlcnZlcihlZGl0b3IpXG4gICAgaWYgKHNlcnZlciA9PSBudWxsIHx8ICFGaW5kUmVmZXJlbmNlc0FkYXB0ZXIuY2FuQWRhcHQoc2VydmVyLmNhcGFiaWxpdGllcykpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgdGhpcy5maW5kUmVmZXJlbmNlcyA9IHRoaXMuZmluZFJlZmVyZW5jZXMgfHwgbmV3IEZpbmRSZWZlcmVuY2VzQWRhcHRlcigpXG4gICAgcmV0dXJuIHRoaXMuZmluZFJlZmVyZW5jZXMuZ2V0UmVmZXJlbmNlcyhzZXJ2ZXIuY29ubmVjdGlvbiwgZWRpdG9yLCBwb2ludCwgc2VydmVyLnByb2plY3RQYXRoKVxuICB9XG5cbiAgLy8gRGF0YXRpcCB2aWEgTFMgdGV4dERvY3VtZW50L2hvdmVyLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBwdWJsaWMgY29uc3VtZURhdGF0aXAoc2VydmljZTogYXRvbUlkZS5EYXRhdGlwU2VydmljZSk6IHZvaWQge1xuICAgIHRoaXMuX2Rpc3Bvc2FibGUuYWRkKFxuICAgICAgc2VydmljZS5hZGRQcm92aWRlcih7XG4gICAgICAgIHByb3ZpZGVyTmFtZTogdGhpcy5uYW1lLFxuICAgICAgICBwcmlvcml0eTogMSxcbiAgICAgICAgZ3JhbW1hclNjb3BlczogdGhpcy5nZXRHcmFtbWFyU2NvcGVzKCksXG4gICAgICAgIHZhbGlkRm9yU2NvcGU6IChzY29wZU5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldEdyYW1tYXJTY29wZXMoKS5pbmNsdWRlcyhzY29wZU5hbWUpXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGF0aXA6IHRoaXMuZ2V0RGF0YXRpcC5iaW5kKHRoaXMpLFxuICAgICAgfSlcbiAgICApXG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0RGF0YXRpcChlZGl0b3I6IFRleHRFZGl0b3IsIHBvaW50OiBQb2ludCk6IFByb21pc2U8YXRvbUlkZS5EYXRhdGlwIHwgbnVsbD4ge1xuICAgIGNvbnN0IHNlcnZlciA9IGF3YWl0IHRoaXMuX3NlcnZlck1hbmFnZXIuZ2V0U2VydmVyKGVkaXRvcilcbiAgICBpZiAoc2VydmVyID09IG51bGwgfHwgIURhdGF0aXBBZGFwdGVyLmNhbkFkYXB0KHNlcnZlci5jYXBhYmlsaXRpZXMpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHRoaXMuZGF0YXRpcCA9IHRoaXMuZGF0YXRpcCB8fCBuZXcgRGF0YXRpcEFkYXB0ZXIoKVxuICAgIHJldHVybiB0aGlzLmRhdGF0aXAuZ2V0RGF0YXRpcChzZXJ2ZXIuY29ubmVjdGlvbiwgZWRpdG9yLCBwb2ludClcbiAgfVxuXG4gIC8vIENvbnNvbGUgdmlhIExTIGxvZ2dpbmctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcHVibGljIGNvbnN1bWVDb25zb2xlKGNyZWF0ZUNvbnNvbGU6IGF0b21JZGUuQ29uc29sZVNlcnZpY2UpOiBEaXNwb3NhYmxlIHtcbiAgICB0aGlzLl9jb25zb2xlRGVsZWdhdGUgPSBjcmVhdGVDb25zb2xlXG5cbiAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiB0aGlzLl9zZXJ2ZXJNYW5hZ2VyLmdldEFjdGl2ZVNlcnZlcnMoKSkge1xuICAgICAgY29uc3QgbG9nZ2luZ0NvbnNvbGUgPSB0aGlzLmdldFNlcnZlckFkYXB0ZXIoc2VydmVyLCBcImxvZ2dpbmdDb25zb2xlXCIpXG4gICAgICBpZiAobG9nZ2luZ0NvbnNvbGUpIHtcbiAgICAgICAgbG9nZ2luZ0NvbnNvbGUuYXR0YWNoKHRoaXMuX2NvbnNvbGVEZWxlZ2F0ZSh7IGlkOiB0aGlzLm5hbWUsIG5hbWU6IHRoaXMuZ2V0TGFuZ3VhZ2VOYW1lKCkgfSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTm8gd2F5IG9mIGRldGFjaGluZyBmcm9tIGNsaWVudCBjb25uZWN0aW9ucyB0b2RheVxuICAgIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7fSlcbiAgfVxuXG4gIC8vIENvZGUgRm9ybWF0IHZpYSBMUyBmb3JtYXREb2N1bWVudCAmIGZvcm1hdERvY3VtZW50UmFuZ2UtLS0tLS0tLS0tLS1cbiAgcHVibGljIHByb3ZpZGVDb2RlRm9ybWF0KCk6IGF0b21JZGUuUmFuZ2VDb2RlRm9ybWF0UHJvdmlkZXIge1xuICAgIHJldHVybiB7XG4gICAgICBncmFtbWFyU2NvcGVzOiB0aGlzLmdldEdyYW1tYXJTY29wZXMoKSxcbiAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgZm9ybWF0Q29kZTogdGhpcy5nZXRDb2RlRm9ybWF0LmJpbmQodGhpcyksXG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGdldENvZGVGb3JtYXQoZWRpdG9yOiBUZXh0RWRpdG9yLCByYW5nZTogUmFuZ2UpOiBQcm9taXNlPGF0b21JZGUuVGV4dEVkaXRbXT4ge1xuICAgIGNvbnN0IHNlcnZlciA9IGF3YWl0IHRoaXMuX3NlcnZlck1hbmFnZXIuZ2V0U2VydmVyKGVkaXRvcilcbiAgICBpZiAoc2VydmVyID09IG51bGwgfHwgIUNvZGVGb3JtYXRBZGFwdGVyLmNhbkFkYXB0KHNlcnZlci5jYXBhYmlsaXRpZXMpKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG5cbiAgICByZXR1cm4gQ29kZUZvcm1hdEFkYXB0ZXIuZm9ybWF0KHNlcnZlci5jb25uZWN0aW9uLCBzZXJ2ZXIuY2FwYWJpbGl0aWVzLCBlZGl0b3IsIHJhbmdlKVxuICB9XG5cbiAgcHVibGljIHByb3ZpZGVSYW5nZUNvZGVGb3JtYXQoKTogYXRvbUlkZS5SYW5nZUNvZGVGb3JtYXRQcm92aWRlciB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdyYW1tYXJTY29wZXM6IHRoaXMuZ2V0R3JhbW1hclNjb3BlcygpLFxuICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICBmb3JtYXRDb2RlOiB0aGlzLmdldFJhbmdlQ29kZUZvcm1hdC5iaW5kKHRoaXMpLFxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBnZXRSYW5nZUNvZGVGb3JtYXQoZWRpdG9yOiBUZXh0RWRpdG9yLCByYW5nZTogUmFuZ2UpOiBQcm9taXNlPGF0b21JZGUuVGV4dEVkaXRbXT4ge1xuICAgIGNvbnN0IHNlcnZlciA9IGF3YWl0IHRoaXMuX3NlcnZlck1hbmFnZXIuZ2V0U2VydmVyKGVkaXRvcilcbiAgICBpZiAoc2VydmVyID09IG51bGwgfHwgIXNlcnZlci5jYXBhYmlsaXRpZXMuZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdQcm92aWRlcikge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgcmV0dXJuIENvZGVGb3JtYXRBZGFwdGVyLmZvcm1hdFJhbmdlKHNlcnZlci5jb25uZWN0aW9uLCBlZGl0b3IsIHJhbmdlKVxuICB9XG5cbiAgcHVibGljIHByb3ZpZGVGaWxlQ29kZUZvcm1hdCgpOiBhdG9tSWRlLkZpbGVDb2RlRm9ybWF0UHJvdmlkZXIge1xuICAgIHJldHVybiB7XG4gICAgICBncmFtbWFyU2NvcGVzOiB0aGlzLmdldEdyYW1tYXJTY29wZXMoKSxcbiAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgZm9ybWF0RW50aXJlRmlsZTogdGhpcy5nZXRGaWxlQ29kZUZvcm1hdC5iaW5kKHRoaXMpLFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwcm92aWRlT25TYXZlQ29kZUZvcm1hdCgpOiBhdG9tSWRlLk9uU2F2ZUNvZGVGb3JtYXRQcm92aWRlciB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdyYW1tYXJTY29wZXM6IHRoaXMuZ2V0R3JhbW1hclNjb3BlcygpLFxuICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICBmb3JtYXRPblNhdmU6IHRoaXMuZ2V0RmlsZUNvZGVGb3JtYXQuYmluZCh0aGlzKSxcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0RmlsZUNvZGVGb3JtYXQoZWRpdG9yOiBUZXh0RWRpdG9yKTogUHJvbWlzZTxhdG9tSWRlLlRleHRFZGl0W10+IHtcbiAgICBjb25zdCBzZXJ2ZXIgPSBhd2FpdCB0aGlzLl9zZXJ2ZXJNYW5hZ2VyLmdldFNlcnZlcihlZGl0b3IpXG4gICAgaWYgKHNlcnZlciA9PSBudWxsIHx8ICFzZXJ2ZXIuY2FwYWJpbGl0aWVzLmRvY3VtZW50Rm9ybWF0dGluZ1Byb3ZpZGVyKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG5cbiAgICByZXR1cm4gQ29kZUZvcm1hdEFkYXB0ZXIuZm9ybWF0RG9jdW1lbnQoc2VydmVyLmNvbm5lY3Rpb24sIGVkaXRvcilcbiAgfVxuXG4gIHB1YmxpYyBwcm92aWRlT25UeXBlQ29kZUZvcm1hdCgpOiBhdG9tSWRlLk9uVHlwZUNvZGVGb3JtYXRQcm92aWRlciB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdyYW1tYXJTY29wZXM6IHRoaXMuZ2V0R3JhbW1hclNjb3BlcygpLFxuICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICBmb3JtYXRBdFBvc2l0aW9uOiB0aGlzLmdldE9uVHlwZUNvZGVGb3JtYXQuYmluZCh0aGlzKSxcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0T25UeXBlQ29kZUZvcm1hdChcbiAgICBlZGl0b3I6IFRleHRFZGl0b3IsXG4gICAgcG9pbnQ6IFBvaW50LFxuICAgIGNoYXJhY3Rlcjogc3RyaW5nXG4gICk6IFByb21pc2U8YXRvbUlkZS5UZXh0RWRpdFtdPiB7XG4gICAgY29uc3Qgc2VydmVyID0gYXdhaXQgdGhpcy5fc2VydmVyTWFuYWdlci5nZXRTZXJ2ZXIoZWRpdG9yKVxuICAgIGlmIChzZXJ2ZXIgPT0gbnVsbCB8fCAhc2VydmVyLmNhcGFiaWxpdGllcy5kb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdQcm92aWRlcikge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgcmV0dXJuIENvZGVGb3JtYXRBZGFwdGVyLmZvcm1hdE9uVHlwZShzZXJ2ZXIuY29ubmVjdGlvbiwgZWRpdG9yLCBwb2ludCwgY2hhcmFjdGVyKVxuICB9XG5cbiAgcHVibGljIHByb3ZpZGVDb2RlSGlnaGxpZ2h0KCk6IGF0b21JZGUuQ29kZUhpZ2hsaWdodFByb3ZpZGVyIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ3JhbW1hclNjb3BlczogdGhpcy5nZXRHcmFtbWFyU2NvcGVzKCksXG4gICAgICBwcmlvcml0eTogMSxcbiAgICAgIGhpZ2hsaWdodDogKGVkaXRvciwgcG9zaXRpb24pID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29kZUhpZ2hsaWdodChlZGl0b3IsIHBvc2l0aW9uKVxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0Q29kZUhpZ2hsaWdodChlZGl0b3I6IFRleHRFZGl0b3IsIHBvc2l0aW9uOiBQb2ludCk6IFByb21pc2U8UmFuZ2VbXSB8IG51bGw+IHtcbiAgICBjb25zdCBzZXJ2ZXIgPSBhd2FpdCB0aGlzLl9zZXJ2ZXJNYW5hZ2VyLmdldFNlcnZlcihlZGl0b3IpXG4gICAgaWYgKHNlcnZlciA9PSBudWxsIHx8ICFDb2RlSGlnaGxpZ2h0QWRhcHRlci5jYW5BZGFwdChzZXJ2ZXIuY2FwYWJpbGl0aWVzKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gQ29kZUhpZ2hsaWdodEFkYXB0ZXIuaGlnaGxpZ2h0KHNlcnZlci5jb25uZWN0aW9uLCBzZXJ2ZXIuY2FwYWJpbGl0aWVzLCBlZGl0b3IsIHBvc2l0aW9uKVxuICB9XG5cbiAgcHVibGljIHByb3ZpZGVDb2RlQWN0aW9ucygpOiBhdG9tSWRlLkNvZGVBY3Rpb25Qcm92aWRlciB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdyYW1tYXJTY29wZXM6IHRoaXMuZ2V0R3JhbW1hclNjb3BlcygpLFxuICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICBnZXRDb2RlQWN0aW9uczogKGVkaXRvciwgcmFuZ2UsIGRpYWdub3N0aWNzKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvZGVBY3Rpb25zKGVkaXRvciwgcmFuZ2UsIGRpYWdub3N0aWNzKVxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0Q29kZUFjdGlvbnMoXG4gICAgZWRpdG9yOiBUZXh0RWRpdG9yLFxuICAgIHJhbmdlOiBSYW5nZSxcbiAgICBkaWFnbm9zdGljczogYXRvbUlkZS5EaWFnbm9zdGljW11cbiAgKTogUHJvbWlzZTxhdG9tSWRlLkNvZGVBY3Rpb25bXSB8IG51bGw+IHtcbiAgICBjb25zdCBzZXJ2ZXIgPSBhd2FpdCB0aGlzLl9zZXJ2ZXJNYW5hZ2VyLmdldFNlcnZlcihlZGl0b3IpXG4gICAgaWYgKHNlcnZlciA9PSBudWxsIHx8ICFDb2RlQWN0aW9uQWRhcHRlci5jYW5BZGFwdChzZXJ2ZXIuY2FwYWJpbGl0aWVzKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gQ29kZUFjdGlvbkFkYXB0ZXIuZ2V0Q29kZUFjdGlvbnMoXG4gICAgICBzZXJ2ZXIuY29ubmVjdGlvbixcbiAgICAgIHNlcnZlci5jYXBhYmlsaXRpZXMsXG4gICAgICB0aGlzLmdldFNlcnZlckFkYXB0ZXIoc2VydmVyLCBcImxpbnRlclB1c2hWMlwiKSxcbiAgICAgIGVkaXRvcixcbiAgICAgIHJhbmdlLFxuICAgICAgZGlhZ25vc3RpY3MsXG4gICAgICB0aGlzLmZpbHRlckNvZGVBY3Rpb25zLmJpbmQodGhpcyksXG4gICAgICB0aGlzLm9uQXBwbHlDb2RlQWN0aW9ucy5iaW5kKHRoaXMpXG4gICAgKVxuICB9XG5cbiAgLyoqIE9wdGlvbmFsbHkgZmlsdGVyIGNvZGUgYWN0aW9uIGJlZm9yZSB0aGV5J3JlIGRpc3BsYXllZCAqL1xuICBwcm90ZWN0ZWQgZmlsdGVyQ29kZUFjdGlvbnMoYWN0aW9uczogKGxzLkNvbW1hbmQgfCBscy5Db2RlQWN0aW9uKVtdIHwgbnVsbCk6IChscy5Db21tYW5kIHwgbHMuQ29kZUFjdGlvbilbXSB8IG51bGwge1xuICAgIHJldHVybiBhY3Rpb25zXG4gIH1cblxuICAvKipcbiAgICogT3B0aW9uYWxseSBoYW5kbGUgYSBjb2RlIGFjdGlvbiBiZWZvcmUgZGVmYXVsdCBoYW5kbGluZy4gUmV0dXJuIGBmYWxzZWAgdG8gcHJldmVudCBkZWZhdWx0IGhhbmRsaW5nLCBgdHJ1ZWAgdG9cbiAgICogY29udGludWUgd2l0aCBkZWZhdWx0IGhhbmRsaW5nLlxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIG9uQXBwbHlDb2RlQWN0aW9ucyhfYWN0aW9uOiBscy5Db21tYW5kIHwgbHMuQ29kZUFjdGlvbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBwdWJsaWMgcHJvdmlkZVJlZmFjdG9yKCk6IGF0b21JZGUuUmVmYWN0b3JQcm92aWRlciB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdyYW1tYXJTY29wZXM6IHRoaXMuZ2V0R3JhbW1hclNjb3BlcygpLFxuICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICByZW5hbWU6IHRoaXMuZ2V0UmVuYW1lLmJpbmQodGhpcyksXG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGdldFJlbmFtZShcbiAgICBlZGl0b3I6IFRleHRFZGl0b3IsXG4gICAgcG9zaXRpb246IFBvaW50LFxuICAgIG5ld05hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPE1hcDxzdHJpbmcsIGF0b21JZGUuVGV4dEVkaXRbXT4gfCBudWxsPiB7XG4gICAgY29uc3Qgc2VydmVyID0gYXdhaXQgdGhpcy5fc2VydmVyTWFuYWdlci5nZXRTZXJ2ZXIoZWRpdG9yKVxuICAgIGlmIChzZXJ2ZXIgPT0gbnVsbCB8fCAhUmVuYW1lQWRhcHRlci5jYW5BZGFwdChzZXJ2ZXIuY2FwYWJpbGl0aWVzKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gUmVuYW1lQWRhcHRlci5nZXRSZW5hbWUoc2VydmVyLmNvbm5lY3Rpb24sIGVkaXRvciwgcG9zaXRpb24sIG5ld05hbWUpXG4gIH1cblxuICBwdWJsaWMgY29uc3VtZVNpZ25hdHVyZUhlbHAocmVnaXN0cnk6IGF0b21JZGUuU2lnbmF0dXJlSGVscFJlZ2lzdHJ5KTogRGlzcG9zYWJsZSB7XG4gICAgdGhpcy5fc2lnbmF0dXJlSGVscFJlZ2lzdHJ5ID0gcmVnaXN0cnlcbiAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiB0aGlzLl9zZXJ2ZXJNYW5hZ2VyLmdldEFjdGl2ZVNlcnZlcnMoKSkge1xuICAgICAgY29uc3Qgc2lnbmF0dXJlSGVscEFkYXB0ZXIgPSB0aGlzLmdldFNlcnZlckFkYXB0ZXIoc2VydmVyLCBcInNpZ25hdHVyZUhlbHBBZGFwdGVyXCIpXG4gICAgICBpZiAoc2lnbmF0dXJlSGVscEFkYXB0ZXIgIT0gbnVsbCkge1xuICAgICAgICBzaWduYXR1cmVIZWxwQWRhcHRlci5hdHRhY2gocmVnaXN0cnkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICB0aGlzLl9zaWduYXR1cmVIZWxwUmVnaXN0cnkgPSB1bmRlZmluZWRcbiAgICB9KVxuICB9XG5cbiAgcHVibGljIGNvbnN1bWVCdXN5U2lnbmFsKHNlcnZpY2U6IGF0b21JZGUuQnVzeVNpZ25hbFNlcnZpY2UpOiBEaXNwb3NhYmxlIHtcbiAgICB0aGlzLmJ1c3lTaWduYWxTZXJ2aWNlID0gc2VydmljZVxuICAgIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiBkZWxldGUgdGhpcy5idXN5U2lnbmFsU2VydmljZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBgZGlkQ2hhbmdlV2F0Y2hlZEZpbGVzYCBtZXNzYWdlIGZpbHRlcmluZywgb3ZlcnJpZGUgZm9yIGN1c3RvbSBsb2dpYy5cbiAgICpcbiAgICogQHBhcmFtIGZpbGVQYXRoIFBhdGggb2YgYSBmaWxlIHRoYXQgaGFzIGNoYW5nZWQgaW4gdGhlIHByb2plY3QgcGF0aFxuICAgKiBAcmV0dXJucyBgZmFsc2VgID0+IG1lc3NhZ2Ugd2lsbCBub3QgYmUgc2VudCB0byB0aGUgbGFuZ3VhZ2Ugc2VydmVyXG4gICAqL1xuICBwcm90ZWN0ZWQgZmlsdGVyQ2hhbmdlV2F0Y2hlZEZpbGVzKF9maWxlUGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGlzIGlzIHNldCB0byBgdHJ1ZWAgKHRoZSBkZWZhdWx0IHZhbHVlKSwgdGhlIHNlcnZlcnMgd2lsbCBzaHV0IGRvd24gZ3JhY2VmdWxseS4gSWYgaXQgaXMgc2V0IHRvIGBmYWxzZWAsIHRoZVxuICAgKiBzZXJ2ZXJzIHdpbGwgYmUga2lsbGVkIHdpdGhvdXQgYXdhaXRpbmcgc2h1dGRvd24gcmVzcG9uc2UuXG4gICAqL1xuICBwcm90ZWN0ZWQgc2h1dGRvd25HcmFjZWZ1bGx5OiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gbGFuZ3VhZ2Ugc2VydmVyIHN0ZGVyciBvdXRwdXQuXG4gICAqXG4gICAqIEBwYXJhbSBzdGRlcnIgQSBjaHVuayBvZiBzdGRlcnIgZnJvbSBhIGxhbmd1YWdlIHNlcnZlciBpbnN0YW5jZVxuICAgKi9cbiAgcHJvdGVjdGVkIGhhbmRsZVNlcnZlclN0ZGVycihzdGRlcnI6IHN0cmluZywgX3Byb2plY3RQYXRoOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBzdGRlcnJcbiAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgLmZpbHRlcigobCkgPT4gbClcbiAgICAgIC5mb3JFYWNoKChsaW5lKSA9PiB0aGlzLmxvZ2dlci53YXJuKGBzdGRlcnIgJHtsaW5lfWApKVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRTZXJ2ZXJBZGFwdGVyPFQgZXh0ZW5kcyBrZXlvZiBTZXJ2ZXJBZGFwdGVycz4oXG4gICAgc2VydmVyOiBBY3RpdmVTZXJ2ZXIsXG4gICAgYWRhcHRlcjogVFxuICApOiBTZXJ2ZXJBZGFwdGVyc1tUXSB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgYWRhcHRlcnMgPSB0aGlzLl9zZXJ2ZXJBZGFwdGVycy5nZXQoc2VydmVyKVxuICAgIHJldHVybiBhZGFwdGVycyAmJiBhZGFwdGVyc1thZGFwdGVyXVxuICB9XG5cbiAgcHJvdGVjdGVkIHJlcG9ydEJ1c3lXaGlsZTogVXRpbHMuUmVwb3J0QnVzeVdoaWxlID0gYXN5bmMgKHRpdGxlLCBmKSA9PiB7XG4gICAgaWYgKHRoaXMuYnVzeVNpZ25hbFNlcnZpY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1c3lTaWduYWxTZXJ2aWNlLnJlcG9ydEJ1c3lXaGlsZSh0aXRsZSwgZilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0QnVzeVdoaWxlRGVmYXVsdCh0aXRsZSwgZilcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVwb3J0QnVzeVdoaWxlRGVmYXVsdDogVXRpbHMuUmVwb3J0QnVzeVdoaWxlID0gYXN5bmMgKHRpdGxlLCBmKSA9PiB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgW1N0YXJ0ZWRdICR7dGl0bGV9YClcbiAgICBsZXQgcmVzXG4gICAgdHJ5IHtcbiAgICAgIHJlcyA9IGF3YWl0IGYoKVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmxvZ2dlci5pbmZvKGBbRmluaXNoZWRdICR7dGl0bGV9YClcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG4iXX0=